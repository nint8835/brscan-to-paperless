// Package paperless provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package paperless

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	PaperelessBasicAuthenticationScopes = "PaperelessBasicAuthentication.Scopes"
	CookieAuthScopes                    = "cookieAuth.Scopes"
	TokenAuthScopes                     = "tokenAuth.Scopes"
)

// Defines values for AccountTypeEnum.
const (
	AccountTypeEnumN1 AccountTypeEnum = 1
	AccountTypeEnumN2 AccountTypeEnum = 2
	AccountTypeEnumN3 AccountTypeEnum = 3
)

// Defines values for AssignCorrespondentFromEnum.
const (
	AssignCorrespondentFromEnumN1 AssignCorrespondentFromEnum = 1
	AssignCorrespondentFromEnumN2 AssignCorrespondentFromEnum = 2
	AssignCorrespondentFromEnumN3 AssignCorrespondentFromEnum = 3
	AssignCorrespondentFromEnumN4 AssignCorrespondentFromEnum = 4
)

// Defines values for AssignTitleFromEnum.
const (
	AssignTitleFromEnumN1 AssignTitleFromEnum = 1
	AssignTitleFromEnumN2 AssignTitleFromEnum = 2
	AssignTitleFromEnumN3 AssignTitleFromEnum = 3
)

// Defines values for AttachmentTypeEnum.
const (
	AttachmentTypeEnumN1 AttachmentTypeEnum = 1
	AttachmentTypeEnumN2 AttachmentTypeEnum = 2
)

// Defines values for ColorConversionStrategyEnum.
const (
	CMYK                      ColorConversionStrategyEnum = "CMYK"
	Gray                      ColorConversionStrategyEnum = "Gray"
	LeaveColorUnchanged       ColorConversionStrategyEnum = "LeaveColorUnchanged"
	RGB                       ColorConversionStrategyEnum = "RGB"
	UseDeviceIndependentColor ColorConversionStrategyEnum = "UseDeviceIndependentColor"
)

// Defines values for CompressionEnum.
const (
	CompressionEnumBzip2    CompressionEnum = "bzip2"
	CompressionEnumDeflated CompressionEnum = "deflated"
	CompressionEnumLzma     CompressionEnum = "lzma"
	CompressionEnumNone     CompressionEnum = "none"
)

// Defines values for ConsumptionScopeEnum.
const (
	ConsumptionScopeEnumN1 ConsumptionScopeEnum = 1
	ConsumptionScopeEnumN2 ConsumptionScopeEnum = 2
	ConsumptionScopeEnumN3 ConsumptionScopeEnum = 3
)

// Defines values for ContentEnum.
const (
	ContentEnumArchive   ContentEnum = "archive"
	ContentEnumBoth      ContentEnum = "both"
	ContentEnumOriginals ContentEnum = "originals"
)

// Defines values for DataTypeEnum.
const (
	Boolean      DataTypeEnum = "boolean"
	Date         DataTypeEnum = "date"
	Documentlink DataTypeEnum = "documentlink"
	Float        DataTypeEnum = "float"
	Integer      DataTypeEnum = "integer"
	Monetary     DataTypeEnum = "monetary"
	Select       DataTypeEnum = "select"
	String       DataTypeEnum = "string"
	Url          DataTypeEnum = "url"
)

// Defines values for DisplayModeEnum.
const (
	LargeCards DisplayModeEnum = "largeCards"
	SmallCards DisplayModeEnum = "smallCards"
	Table      DisplayModeEnum = "table"
)

// Defines values for FileVersionEnum.
const (
	FileVersionEnumArchive  FileVersionEnum = "archive"
	FileVersionEnumOriginal FileVersionEnum = "original"
)

// Defines values for ImapSecurityEnum.
const (
	ImapSecurityEnumN1 ImapSecurityEnum = 1
	ImapSecurityEnumN2 ImapSecurityEnum = 2
	ImapSecurityEnumN3 ImapSecurityEnum = 3
)

// Defines values for MailRuleActionEnum.
const (
	MailRuleActionEnumN1 MailRuleActionEnum = 1
	MailRuleActionEnumN2 MailRuleActionEnum = 2
	MailRuleActionEnumN3 MailRuleActionEnum = 3
	MailRuleActionEnumN4 MailRuleActionEnum = 4
	MailRuleActionEnumN5 MailRuleActionEnum = 5
)

// Defines values for MatchingAlgorithm.
const (
	MatchingAlgorithmN0 MatchingAlgorithm = 0
	MatchingAlgorithmN1 MatchingAlgorithm = 1
	MatchingAlgorithmN2 MatchingAlgorithm = 2
	MatchingAlgorithmN3 MatchingAlgorithm = 3
	MatchingAlgorithmN4 MatchingAlgorithm = 4
	MatchingAlgorithmN5 MatchingAlgorithm = 5
	MatchingAlgorithmN6 MatchingAlgorithm = 6
)

// Defines values for MethodEnum.
const (
	MethodEnumAddTag             MethodEnum = "add_tag"
	MethodEnumDelete             MethodEnum = "delete"
	MethodEnumDeletePages        MethodEnum = "delete_pages"
	MethodEnumEditPdf            MethodEnum = "edit_pdf"
	MethodEnumMerge              MethodEnum = "merge"
	MethodEnumModifyCustomFields MethodEnum = "modify_custom_fields"
	MethodEnumModifyTags         MethodEnum = "modify_tags"
	MethodEnumRemoveTag          MethodEnum = "remove_tag"
	MethodEnumReprocess          MethodEnum = "reprocess"
	MethodEnumRotate             MethodEnum = "rotate"
	MethodEnumSetCorrespondent   MethodEnum = "set_correspondent"
	MethodEnumSetDocumentType    MethodEnum = "set_document_type"
	MethodEnumSetPermissions     MethodEnum = "set_permissions"
	MethodEnumSetStoragePath     MethodEnum = "set_storage_path"
	MethodEnumSplit              MethodEnum = "split"
)

// Defines values for ModeEnum.
const (
	Force         ModeEnum = "force"
	Redo          ModeEnum = "redo"
	Skip          ModeEnum = "skip"
	SkipNoarchive ModeEnum = "skip_noarchive"
)

// Defines values for ObjectTypeEnum.
const (
	Correspondents ObjectTypeEnum = "correspondents"
	DocumentTypes  ObjectTypeEnum = "document_types"
	StoragePaths   ObjectTypeEnum = "storage_paths"
	Tags           ObjectTypeEnum = "tags"
)

// Defines values for OperationEnum.
const (
	OperationEnumDelete         OperationEnum = "delete"
	OperationEnumSetPermissions OperationEnum = "set_permissions"
)

// Defines values for OutputTypeEnum.
const (
	Pdf   OutputTypeEnum = "pdf"
	Pdfa  OutputTypeEnum = "pdfa"
	Pdfa1 OutputTypeEnum = "pdfa-1"
	Pdfa2 OutputTypeEnum = "pdfa-2"
	Pdfa3 OutputTypeEnum = "pdfa-3"
)

// Defines values for PdfLayoutEnum.
const (
	PdfLayoutEnumN0 PdfLayoutEnum = 0
	PdfLayoutEnumN1 PdfLayoutEnum = 1
	PdfLayoutEnumN2 PdfLayoutEnum = 2
	PdfLayoutEnumN3 PdfLayoutEnum = 3
	PdfLayoutEnumN4 PdfLayoutEnum = 4
)

// Defines values for RuleTypeEnum.
const (
	RuleTypeEnumN0  RuleTypeEnum = 0
	RuleTypeEnumN1  RuleTypeEnum = 1
	RuleTypeEnumN10 RuleTypeEnum = 10
	RuleTypeEnumN11 RuleTypeEnum = 11
	RuleTypeEnumN12 RuleTypeEnum = 12
	RuleTypeEnumN13 RuleTypeEnum = 13
	RuleTypeEnumN14 RuleTypeEnum = 14
	RuleTypeEnumN15 RuleTypeEnum = 15
	RuleTypeEnumN16 RuleTypeEnum = 16
	RuleTypeEnumN17 RuleTypeEnum = 17
	RuleTypeEnumN18 RuleTypeEnum = 18
	RuleTypeEnumN19 RuleTypeEnum = 19
	RuleTypeEnumN2  RuleTypeEnum = 2
	RuleTypeEnumN20 RuleTypeEnum = 20
	RuleTypeEnumN21 RuleTypeEnum = 21
	RuleTypeEnumN22 RuleTypeEnum = 22
	RuleTypeEnumN23 RuleTypeEnum = 23
	RuleTypeEnumN24 RuleTypeEnum = 24
	RuleTypeEnumN25 RuleTypeEnum = 25
	RuleTypeEnumN26 RuleTypeEnum = 26
	RuleTypeEnumN27 RuleTypeEnum = 27
	RuleTypeEnumN28 RuleTypeEnum = 28
	RuleTypeEnumN29 RuleTypeEnum = 29
	RuleTypeEnumN3  RuleTypeEnum = 3
	RuleTypeEnumN30 RuleTypeEnum = 30
	RuleTypeEnumN31 RuleTypeEnum = 31
	RuleTypeEnumN32 RuleTypeEnum = 32
	RuleTypeEnumN33 RuleTypeEnum = 33
	RuleTypeEnumN34 RuleTypeEnum = 34
	RuleTypeEnumN35 RuleTypeEnum = 35
	RuleTypeEnumN36 RuleTypeEnum = 36
	RuleTypeEnumN37 RuleTypeEnum = 37
	RuleTypeEnumN38 RuleTypeEnum = 38
	RuleTypeEnumN39 RuleTypeEnum = 39
	RuleTypeEnumN4  RuleTypeEnum = 4
	RuleTypeEnumN40 RuleTypeEnum = 40
	RuleTypeEnumN41 RuleTypeEnum = 41
	RuleTypeEnumN42 RuleTypeEnum = 42
	RuleTypeEnumN43 RuleTypeEnum = 43
	RuleTypeEnumN44 RuleTypeEnum = 44
	RuleTypeEnumN45 RuleTypeEnum = 45
	RuleTypeEnumN46 RuleTypeEnum = 46
	RuleTypeEnumN47 RuleTypeEnum = 47
	RuleTypeEnumN5  RuleTypeEnum = 5
	RuleTypeEnumN6  RuleTypeEnum = 6
	RuleTypeEnumN7  RuleTypeEnum = 7
	RuleTypeEnumN8  RuleTypeEnum = 8
	RuleTypeEnumN9  RuleTypeEnum = 9
)

// Defines values for ScheduleDateFieldEnum.
const (
	ScheduleDateFieldEnumAdded       ScheduleDateFieldEnum = "added"
	ScheduleDateFieldEnumCreated     ScheduleDateFieldEnum = "created"
	ScheduleDateFieldEnumCustomField ScheduleDateFieldEnum = "custom_field"
	ScheduleDateFieldEnumModified    ScheduleDateFieldEnum = "modified"
)

// Defines values for SkipArchiveFileEnum.
const (
	Always   SkipArchiveFileEnum = "always"
	Never    SkipArchiveFileEnum = "never"
	WithText SkipArchiveFileEnum = "with_text"
)

// Defines values for SourcesEnum.
const (
	SourcesEnumN1 SourcesEnum = 1
	SourcesEnumN2 SourcesEnum = 2
	SourcesEnumN3 SourcesEnum = 3
	SourcesEnumN4 SourcesEnum = 4
)

// Defines values for StatusEnum.
const (
	StatusEnumFAILURE  StatusEnum = "FAILURE"
	StatusEnumPENDING  StatusEnum = "PENDING"
	StatusEnumRECEIVED StatusEnum = "RECEIVED"
	StatusEnumRETRY    StatusEnum = "RETRY"
	StatusEnumREVOKED  StatusEnum = "REVOKED"
	StatusEnumSTARTED  StatusEnum = "STARTED"
	StatusEnumSUCCESS  StatusEnum = "SUCCESS"
)

// Defines values for TaskNameEnum.
const (
	TaskNameEnumCheckSanity     TaskNameEnum = "check_sanity"
	TaskNameEnumConsumeFile     TaskNameEnum = "consume_file"
	TaskNameEnumIndexOptimize   TaskNameEnum = "index_optimize"
	TaskNameEnumTrainClassifier TaskNameEnum = "train_classifier"
)

// Defines values for TasksViewTypeEnum.
const (
	TasksViewTypeEnumAutoTask      TasksViewTypeEnum = "auto_task"
	TasksViewTypeEnumManualTask    TasksViewTypeEnum = "manual_task"
	TasksViewTypeEnumScheduledTask TasksViewTypeEnum = "scheduled_task"
)

// Defines values for TrashActionEnum.
const (
	Empty   TrashActionEnum = "empty"
	Restore TrashActionEnum = "restore"
)

// Defines values for UnpaperCleanEnum.
const (
	UnpaperCleanEnumClean      UnpaperCleanEnum = "clean"
	UnpaperCleanEnumCleanFinal UnpaperCleanEnum = "clean-final"
	UnpaperCleanEnumNone       UnpaperCleanEnum = "none"
)

// Defines values for WorkflowActionTypeEnum.
const (
	WorkflowActionTypeEnumN1 WorkflowActionTypeEnum = 1
	WorkflowActionTypeEnumN2 WorkflowActionTypeEnum = 2
	WorkflowActionTypeEnumN3 WorkflowActionTypeEnum = 3
	WorkflowActionTypeEnumN4 WorkflowActionTypeEnum = 4
)

// Defines values for WorkflowTriggerMatchingAlgorithmEnum.
const (
	WorkflowTriggerMatchingAlgorithmEnumN0 WorkflowTriggerMatchingAlgorithmEnum = 0
	WorkflowTriggerMatchingAlgorithmEnumN1 WorkflowTriggerMatchingAlgorithmEnum = 1
	WorkflowTriggerMatchingAlgorithmEnumN2 WorkflowTriggerMatchingAlgorithmEnum = 2
	WorkflowTriggerMatchingAlgorithmEnumN3 WorkflowTriggerMatchingAlgorithmEnum = 3
	WorkflowTriggerMatchingAlgorithmEnumN4 WorkflowTriggerMatchingAlgorithmEnum = 4
	WorkflowTriggerMatchingAlgorithmEnumN5 WorkflowTriggerMatchingAlgorithmEnum = 5
)

// Defines values for WorkflowTriggerTypeEnum.
const (
	WorkflowTriggerTypeEnumN1 WorkflowTriggerTypeEnum = 1
	WorkflowTriggerTypeEnumN2 WorkflowTriggerTypeEnum = 2
	WorkflowTriggerTypeEnumN3 WorkflowTriggerTypeEnum = 3
	WorkflowTriggerTypeEnumN4 WorkflowTriggerTypeEnum = 4
)

// Defines values for TasksListParamsStatus.
const (
	TasksListParamsStatusFAILURE  TasksListParamsStatus = "FAILURE"
	TasksListParamsStatusPENDING  TasksListParamsStatus = "PENDING"
	TasksListParamsStatusRECEIVED TasksListParamsStatus = "RECEIVED"
	TasksListParamsStatusRETRY    TasksListParamsStatus = "RETRY"
	TasksListParamsStatusREVOKED  TasksListParamsStatus = "REVOKED"
	TasksListParamsStatusSTARTED  TasksListParamsStatus = "STARTED"
	TasksListParamsStatusSUCCESS  TasksListParamsStatus = "SUCCESS"
)

// Defines values for TasksListParamsTaskName.
const (
	TasksListParamsTaskNameCheckSanity     TasksListParamsTaskName = "check_sanity"
	TasksListParamsTaskNameConsumeFile     TasksListParamsTaskName = "consume_file"
	TasksListParamsTaskNameIndexOptimize   TasksListParamsTaskName = "index_optimize"
	TasksListParamsTaskNameTrainClassifier TasksListParamsTaskName = "train_classifier"
)

// Defines values for TasksListParamsType.
const (
	TasksListParamsTypeAutoTask      TasksListParamsType = "auto_task"
	TasksListParamsTypeManualTask    TasksListParamsType = "manual_task"
	TasksListParamsTypeScheduledTask TasksListParamsType = "scheduled_task"
)

// AccountTypeEnum * `1` - IMAP
// * `2` - Gmail OAuth
// * `3` - Outlook OAuth
type AccountTypeEnum int

// AcknowledgeTasks defines model for AcknowledgeTasks.
type AcknowledgeTasks struct {
	Result int `json:"result"`
}

// Actor defines model for Actor.
type Actor struct {
	Id       int    `json:"id"`
	Username string `json:"username"`
}

// ApplicationConfiguration defines model for ApplicationConfiguration.
type ApplicationConfiguration struct {
	AppLogo                  *string                                           `json:"app_logo"`
	AppTitle                 *string                                           `json:"app_title"`
	BarcodeAsnPrefix         *string                                           `json:"barcode_asn_prefix"`
	BarcodeDpi               *int64                                            `json:"barcode_dpi"`
	BarcodeEnableAsn         *bool                                             `json:"barcode_enable_asn"`
	BarcodeEnableTag         *bool                                             `json:"barcode_enable_tag"`
	BarcodeEnableTiffSupport *bool                                             `json:"barcode_enable_tiff_support"`
	BarcodeMaxPages          *int64                                            `json:"barcode_max_pages"`
	BarcodeRetainSplitPages  *bool                                             `json:"barcode_retain_split_pages"`
	BarcodeString            *string                                           `json:"barcode_string"`
	BarcodeTagMapping        interface{}                                       `json:"barcode_tag_mapping"`
	BarcodeUpscale           *float64                                          `json:"barcode_upscale"`
	BarcodesEnabled          *bool                                             `json:"barcodes_enabled"`
	ColorConversionStrategy  *ApplicationConfiguration_ColorConversionStrategy `json:"color_conversion_strategy"`
	Deskew                   *bool                                             `json:"deskew"`
	Id                       *int                                              `json:"id,omitempty"`
	ImageDpi                 *int64                                            `json:"image_dpi"`
	Language                 *string                                           `json:"language"`
	MaxImagePixels           *float64                                          `json:"max_image_pixels"`
	Mode                     *ApplicationConfiguration_Mode                    `json:"mode"`
	OutputType               *ApplicationConfiguration_OutputType              `json:"output_type"`
	Pages                    *int64                                            `json:"pages"`
	RotatePages              *bool                                             `json:"rotate_pages"`
	RotatePagesThreshold     *float64                                          `json:"rotate_pages_threshold"`
	SkipArchiveFile          *ApplicationConfiguration_SkipArchiveFile         `json:"skip_archive_file"`
	UnpaperClean             *ApplicationConfiguration_UnpaperClean            `json:"unpaper_clean"`
	UserArgs                 interface{}                                       `json:"user_args"`
}

// ApplicationConfiguration_ColorConversionStrategy defines model for ApplicationConfiguration.ColorConversionStrategy.
type ApplicationConfiguration_ColorConversionStrategy struct {
	union json.RawMessage
}

// ApplicationConfiguration_Mode defines model for ApplicationConfiguration.Mode.
type ApplicationConfiguration_Mode struct {
	union json.RawMessage
}

// ApplicationConfiguration_OutputType defines model for ApplicationConfiguration.OutputType.
type ApplicationConfiguration_OutputType struct {
	union json.RawMessage
}

// ApplicationConfiguration_SkipArchiveFile defines model for ApplicationConfiguration.SkipArchiveFile.
type ApplicationConfiguration_SkipArchiveFile struct {
	union json.RawMessage
}

// ApplicationConfiguration_UnpaperClean defines model for ApplicationConfiguration.UnpaperClean.
type ApplicationConfiguration_UnpaperClean struct {
	union json.RawMessage
}

// ApplicationConfigurationRequest defines model for ApplicationConfigurationRequest.
type ApplicationConfigurationRequest struct {
	AppLogo                  *openapi_types.File                                      `json:"app_logo"`
	AppTitle                 *string                                                  `json:"app_title"`
	BarcodeAsnPrefix         *string                                                  `json:"barcode_asn_prefix"`
	BarcodeDpi               *int64                                                   `json:"barcode_dpi"`
	BarcodeEnableAsn         *bool                                                    `json:"barcode_enable_asn"`
	BarcodeEnableTag         *bool                                                    `json:"barcode_enable_tag"`
	BarcodeEnableTiffSupport *bool                                                    `json:"barcode_enable_tiff_support"`
	BarcodeMaxPages          *int64                                                   `json:"barcode_max_pages"`
	BarcodeRetainSplitPages  *bool                                                    `json:"barcode_retain_split_pages"`
	BarcodeString            *string                                                  `json:"barcode_string"`
	BarcodeTagMapping        interface{}                                              `json:"barcode_tag_mapping"`
	BarcodeUpscale           *float64                                                 `json:"barcode_upscale"`
	BarcodesEnabled          *bool                                                    `json:"barcodes_enabled"`
	ColorConversionStrategy  *ApplicationConfigurationRequest_ColorConversionStrategy `json:"color_conversion_strategy"`
	Deskew                   *bool                                                    `json:"deskew"`
	ImageDpi                 *int64                                                   `json:"image_dpi"`
	Language                 *string                                                  `json:"language"`
	MaxImagePixels           *float64                                                 `json:"max_image_pixels"`
	Mode                     *ApplicationConfigurationRequest_Mode                    `json:"mode"`
	OutputType               *ApplicationConfigurationRequest_OutputType              `json:"output_type"`
	Pages                    *int64                                                   `json:"pages"`
	RotatePages              *bool                                                    `json:"rotate_pages"`
	RotatePagesThreshold     *float64                                                 `json:"rotate_pages_threshold"`
	SkipArchiveFile          *ApplicationConfigurationRequest_SkipArchiveFile         `json:"skip_archive_file"`
	UnpaperClean             *ApplicationConfigurationRequest_UnpaperClean            `json:"unpaper_clean"`
	UserArgs                 interface{}                                              `json:"user_args"`
}

// ApplicationConfigurationRequest_ColorConversionStrategy defines model for ApplicationConfigurationRequest.ColorConversionStrategy.
type ApplicationConfigurationRequest_ColorConversionStrategy struct {
	union json.RawMessage
}

// ApplicationConfigurationRequest_Mode defines model for ApplicationConfigurationRequest.Mode.
type ApplicationConfigurationRequest_Mode struct {
	union json.RawMessage
}

// ApplicationConfigurationRequest_OutputType defines model for ApplicationConfigurationRequest.OutputType.
type ApplicationConfigurationRequest_OutputType struct {
	union json.RawMessage
}

// ApplicationConfigurationRequest_SkipArchiveFile defines model for ApplicationConfigurationRequest.SkipArchiveFile.
type ApplicationConfigurationRequest_SkipArchiveFile struct {
	union json.RawMessage
}

// ApplicationConfigurationRequest_UnpaperClean defines model for ApplicationConfigurationRequest.UnpaperClean.
type ApplicationConfigurationRequest_UnpaperClean struct {
	union json.RawMessage
}

// AssignCorrespondentFromEnum * `1` - Do not assign a correspondent
// * `2` - Use mail address
// * `3` - Use name (or mail address if not available)
// * `4` - Use correspondent selected below
type AssignCorrespondentFromEnum int

// AssignTitleFromEnum * `1` - Use subject as title
// * `2` - Use attachment filename as title
// * `3` - Do not assign title from rule
type AssignTitleFromEnum int

// AttachmentTypeEnum * `1` - Only process attachments.
// * `2` - Process all files, including 'inline' attachments.
type AttachmentTypeEnum int

// BasicUser defines model for BasicUser.
type BasicUser struct {
	FirstName *string `json:"first_name,omitempty"`
	Id        *int    `json:"id,omitempty"`
	LastName  *string `json:"last_name,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// BlankEnum defines model for BlankEnum.
type BlankEnum = interface{}

// BulkDownload defines model for BulkDownload.
type BulkDownload struct {
	Compression      *CompressionEnum `json:"compression,omitempty"`
	Content          *ContentEnum     `json:"content,omitempty"`
	FollowFormatting *bool            `json:"follow_formatting,omitempty"`
}

// BulkDownloadRequest defines model for BulkDownloadRequest.
type BulkDownloadRequest struct {
	Compression      *CompressionEnum `json:"compression,omitempty"`
	Content          *ContentEnum     `json:"content,omitempty"`
	Documents        *[]int           `json:"documents,omitempty"`
	FollowFormatting *bool            `json:"follow_formatting,omitempty"`
}

// BulkEditDocumentsResult defines model for BulkEditDocumentsResult.
type BulkEditDocumentsResult struct {
	Result string `json:"result"`
}

// BulkEditObjectsRequest defines model for BulkEditObjectsRequest.
type BulkEditObjectsRequest struct {
	Merge       *bool                   `json:"merge,omitempty"`
	ObjectType  *ObjectTypeEnum         `json:"object_type,omitempty"`
	Objects     *[]int                  `json:"objects,omitempty"`
	Operation   *OperationEnum          `json:"operation,omitempty"`
	Owner       *int                    `json:"owner"`
	Permissions *map[string]interface{} `json:"permissions,omitempty"`
}

// BulkEditRequest defines model for BulkEditRequest.
type BulkEditRequest struct {
	Documents  *[]int                  `json:"documents,omitempty"`
	Method     *MethodEnum             `json:"method,omitempty"`
	Parameters *map[string]interface{} `json:"parameters,omitempty"`
}

// BulkEditResult defines model for BulkEditResult.
type BulkEditResult struct {
	Result string `json:"result"`
}

// Classifier defines model for Classifier.
type Classifier struct {
	Error       string    `json:"error"`
	LastTrained time.Time `json:"last_trained"`
	Status      string    `json:"status"`
}

// ColorConversionStrategyEnum * `LeaveColorUnchanged` - LeaveColorUnchanged
// * `RGB` - RGB
// * `UseDeviceIndependentColor` - UseDeviceIndependentColor
// * `Gray` - Gray
// * `CMYK` - CMYK
type ColorConversionStrategyEnum string

// CompressionEnum * `none` - none
// * `deflated` - deflated
// * `bzip2` - bzip2
// * `lzma` - lzma
type CompressionEnum string

// ConsumptionScopeEnum * `1` - Only process attachments.
// * `2` - Process full Mail (with embedded attachments in file) as .eml
// * `3` - Process full Mail (with embedded attachments in file) as .eml + process attachments as separate documents
type ConsumptionScopeEnum int

// ContentEnum * `archive` - archive
// * `originals` - originals
// * `both` - both
type ContentEnum string

// Correspondent defines model for Correspondent.
type Correspondent struct {
	DocumentCount      *int                `json:"document_count,omitempty"`
	Id                 *int                `json:"id,omitempty"`
	IsInsensitive      *bool               `json:"is_insensitive,omitempty"`
	LastCorrespondence *openapi_types.Date `json:"last_correspondence,omitempty"`
	Match              *string             `json:"match,omitempty"`
	MatchingAlgorithm  *MatchingAlgorithm  `json:"matching_algorithm,omitempty"`
	Name               string              `json:"name"`
	Owner              *int                `json:"owner"`
	Permissions        *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"permissions,omitempty"`
	Slug          *string `json:"slug,omitempty"`
	UserCanChange *bool   `json:"user_can_change,omitempty"`
}

// CorrespondentCounts defines model for CorrespondentCounts.
type CorrespondentCounts struct {
	DocumentCount int `json:"document_count"`
	Id            int `json:"id"`
}

// CorrespondentRequest defines model for CorrespondentRequest.
type CorrespondentRequest struct {
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              string             `json:"name"`
	Owner             *int               `json:"owner"`
	SetPermissions    *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// CustomField defines model for CustomField.
type CustomField struct {
	// DataType * `string` - string
	// * `url` - url
	// * `date` - date
	// * `boolean` - boolean
	// * `integer` - integer
	// * `float` - float
	// * `monetary` - monetary
	// * `documentlink` - documentlink
	// * `select` - select
	DataType      DataTypeEnum `json:"data_type"`
	DocumentCount *int         `json:"document_count,omitempty"`

	// ExtraData Extra data for the custom field, such as select options
	ExtraData interface{} `json:"extra_data"`
	Id        *int        `json:"id,omitempty"`
	Name      string      `json:"name"`
}

// CustomFieldCounts defines model for CustomFieldCounts.
type CustomFieldCounts struct {
	DocumentCount int `json:"document_count"`
	Id            int `json:"id"`
}

// CustomFieldInstance defines model for CustomFieldInstance.
type CustomFieldInstance struct {
	Field int `json:"field"`

	// Value Given the *incoming* primitive data, return the value for this field
	// that should be validated and transformed to a native value.
	Value *CustomFieldInstance_Value `json:"value"`
}

// CustomFieldInstanceValue0 defines model for .
type CustomFieldInstanceValue0 = string

// CustomFieldInstanceValue1 defines model for .
type CustomFieldInstanceValue1 = int

// CustomFieldInstanceValue2 defines model for .
type CustomFieldInstanceValue2 = float64

// CustomFieldInstanceValue3 defines model for .
type CustomFieldInstanceValue3 map[string]interface{}

// CustomFieldInstance_Value Given the *incoming* primitive data, return the value for this field
// that should be validated and transformed to a native value.
type CustomFieldInstance_Value struct {
	union json.RawMessage
}

// CustomFieldInstanceRequest defines model for CustomFieldInstanceRequest.
type CustomFieldInstanceRequest struct {
	Field int `json:"field"`

	// Value Given the *incoming* primitive data, return the value for this field
	// that should be validated and transformed to a native value.
	Value *CustomFieldInstanceRequest_Value `json:"value"`
}

// CustomFieldInstanceRequestValue0 defines model for .
type CustomFieldInstanceRequestValue0 = string

// CustomFieldInstanceRequestValue1 defines model for .
type CustomFieldInstanceRequestValue1 = int

// CustomFieldInstanceRequestValue2 defines model for .
type CustomFieldInstanceRequestValue2 = float64

// CustomFieldInstanceRequestValue3 defines model for .
type CustomFieldInstanceRequestValue3 map[string]interface{}

// CustomFieldInstanceRequest_Value Given the *incoming* primitive data, return the value for this field
// that should be validated and transformed to a native value.
type CustomFieldInstanceRequest_Value struct {
	union json.RawMessage
}

// CustomFieldRequest defines model for CustomFieldRequest.
type CustomFieldRequest struct {
	// DataType * `string` - string
	// * `url` - url
	// * `date` - date
	// * `boolean` - boolean
	// * `integer` - integer
	// * `float` - float
	// * `monetary` - monetary
	// * `documentlink` - documentlink
	// * `select` - select
	DataType DataTypeEnum `json:"data_type"`

	// ExtraData Extra data for the custom field, such as select options
	ExtraData interface{} `json:"extra_data"`
	Name      string      `json:"name"`
}

// DataTypeEnum * `string` - string
// * `url` - url
// * `date` - date
// * `boolean` - boolean
// * `integer` - integer
// * `float` - float
// * `monetary` - monetary
// * `documentlink` - documentlink
// * `select` - select
type DataTypeEnum string

// Database defines model for Database.
type Database struct {
	Error           string          `json:"error"`
	MigrationStatus MigrationStatus `json:"migration_status"`
	Status          string          `json:"status"`
	Type            string          `json:"type"`
	Url             string          `json:"url"`
}

// DisplayModeEnum * `table` - Table
// * `smallCards` - Small Cards
// * `largeCards` - Large Cards
type DisplayModeEnum string

// Document Adds update nested feature
type Document struct {
	Added *time.Time `json:"added,omitempty"`

	// ArchiveSerialNumber The position of this document in your physical document archive.
	ArchiveSerialNumber *int64  `json:"archive_serial_number"`
	ArchivedFileName    *string `json:"archived_file_name"`

	// Content The raw, text-only data of the document. This field is primarily used for searching.
	Content       *string             `json:"content,omitempty"`
	Correspondent *int                `json:"correspondent"`
	Created       *openapi_types.Date `json:"created,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	CreatedDate         *openapi_types.Date    `json:"created_date,omitempty"`
	CustomFields        *[]CustomFieldInstance `json:"custom_fields,omitempty"`
	DeletedAt           *time.Time             `json:"deleted_at"`
	DocumentType        *int                   `json:"document_type"`
	Id                  *int                   `json:"id,omitempty"`
	IsSharedByRequester *bool                  `json:"is_shared_by_requester,omitempty"`
	MimeType            *string                `json:"mime_type,omitempty"`
	Modified            *time.Time             `json:"modified,omitempty"`
	Notes               *[]Notes               `json:"notes,omitempty"`
	OriginalFileName    *string                `json:"original_file_name"`
	Owner               *int                   `json:"owner"`
	PageCount           *int                   `json:"page_count"`
	Permissions         *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"permissions,omitempty"`
	StoragePath   *int    `json:"storage_path"`
	Tags          []int   `json:"tags"`
	Title         *string `json:"title,omitempty"`
	UserCanChange *bool   `json:"user_can_change,omitempty"`
}

// DocumentListRequest defines model for DocumentListRequest.
type DocumentListRequest struct {
	Documents *[]int `json:"documents,omitempty"`
}

// DocumentRequest Adds update nested feature
type DocumentRequest struct {
	// ArchiveSerialNumber The position of this document in your physical document archive.
	ArchiveSerialNumber *int64 `json:"archive_serial_number"`

	// Content The raw, text-only data of the document. This field is primarily used for searching.
	Content       *string             `json:"content,omitempty"`
	Correspondent *int                `json:"correspondent"`
	Created       *openapi_types.Date `json:"created,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	CreatedDate     *openapi_types.Date           `json:"created_date,omitempty"`
	CustomFields    *[]CustomFieldInstanceRequest `json:"custom_fields,omitempty"`
	DeletedAt       *time.Time                    `json:"deleted_at"`
	DocumentType    *int                          `json:"document_type"`
	Owner           *int                          `json:"owner"`
	RemoveInboxTags *bool                         `json:"remove_inbox_tags"`
	SetPermissions  *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
	StoragePath *int    `json:"storage_path"`
	Tags        []int   `json:"tags"`
	Title       *string `json:"title,omitempty"`
}

// DocumentType defines model for DocumentType.
type DocumentType struct {
	DocumentCount     *int               `json:"document_count,omitempty"`
	Id                *int               `json:"id,omitempty"`
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              string             `json:"name"`
	Owner             *int               `json:"owner"`
	Permissions       *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"permissions,omitempty"`
	Slug          *string `json:"slug,omitempty"`
	UserCanChange *bool   `json:"user_can_change,omitempty"`
}

// DocumentTypeCounts defines model for DocumentTypeCounts.
type DocumentTypeCounts struct {
	DocumentCount int `json:"document_count"`
	Id            int `json:"id"`
}

// DocumentTypeRequest defines model for DocumentTypeRequest.
type DocumentTypeRequest struct {
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              string             `json:"name"`
	Owner             *int               `json:"owner"`
	SetPermissions    *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// EmailRequestRequest defines model for EmailRequestRequest.
type EmailRequestRequest struct {
	Addresses         string `json:"addresses"`
	Message           string `json:"message"`
	Subject           string `json:"subject"`
	UseArchiveVersion *bool  `json:"use_archive_version,omitempty"`
}

// EmailResponse defines model for EmailResponse.
type EmailResponse struct {
	Message string `json:"message"`
}

// FileVersionEnum * `archive` - Archive
// * `original` - Original
type FileVersionEnum string

// Group defines model for Group.
type Group struct {
	Id          *int     `json:"id,omitempty"`
	Name        string   `json:"name"`
	Permissions []string `json:"permissions"`
}

// GroupRequest defines model for GroupRequest.
type GroupRequest struct {
	Name        string   `json:"name"`
	Permissions []string `json:"permissions"`
}

// ImapSecurityEnum * `1` - No encryption
// * `2` - Use SSL
// * `3` - Use STARTTLS
type ImapSecurityEnum int

// Index defines model for Index.
type Index struct {
	Error        string    `json:"error"`
	LastModified time.Time `json:"last_modified"`
	Status       string    `json:"status"`
}

// LogEntry defines model for LogEntry.
type LogEntry struct {
	Action    string                 `json:"action"`
	Actor     Actor                  `json:"actor"`
	Changes   map[string]interface{} `json:"changes"`
	Id        int                    `json:"id"`
	Timestamp time.Time              `json:"timestamp"`
}

// MailAccount defines model for MailAccount.
type MailAccount struct {
	AccountType *AccountTypeEnum `json:"account_type,omitempty"`

	// CharacterSet The character set to use when communicating with the mail server, such as 'UTF-8' or 'US-ASCII'.
	CharacterSet *string `json:"character_set,omitempty"`

	// Expiration The expiration date of the refresh token.
	Expiration *time.Time `json:"expiration"`
	Id         *int       `json:"id,omitempty"`

	// ImapPort This is usually 143 for unencrypted and STARTTLS connections, and 993 for SSL connections.
	ImapPort      *int64            `json:"imap_port"`
	ImapSecurity  *ImapSecurityEnum `json:"imap_security,omitempty"`
	ImapServer    string            `json:"imap_server"`
	IsToken       *bool             `json:"is_token,omitempty"`
	Name          string            `json:"name"`
	Owner         *int              `json:"owner"`
	Password      string            `json:"password"`
	UserCanChange *bool             `json:"user_can_change,omitempty"`
	Username      string            `json:"username"`
}

// MailAccountProcessResponse defines model for MailAccountProcessResponse.
type MailAccountProcessResponse struct {
	Result *string `json:"result,omitempty"`
}

// MailAccountRequest defines model for MailAccountRequest.
type MailAccountRequest struct {
	AccountType *AccountTypeEnum `json:"account_type,omitempty"`

	// CharacterSet The character set to use when communicating with the mail server, such as 'UTF-8' or 'US-ASCII'.
	CharacterSet *string `json:"character_set,omitempty"`

	// Expiration The expiration date of the refresh token.
	Expiration *time.Time `json:"expiration"`

	// ImapPort This is usually 143 for unencrypted and STARTTLS connections, and 993 for SSL connections.
	ImapPort       *int64            `json:"imap_port"`
	ImapSecurity   *ImapSecurityEnum `json:"imap_security,omitempty"`
	ImapServer     string            `json:"imap_server"`
	IsToken        *bool             `json:"is_token,omitempty"`
	Name           string            `json:"name"`
	Owner          *int              `json:"owner"`
	Password       string            `json:"password"`
	SetPermissions *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
	Username string `json:"username"`
}

// MailAccountTestResponse defines model for MailAccountTestResponse.
type MailAccountTestResponse struct {
	Success bool `json:"success"`
}

// MailRule defines model for MailRule.
type MailRule struct {
	Account                 int                          `json:"account"`
	Action                  *MailRuleActionEnum          `json:"action,omitempty"`
	ActionParameter         *string                      `json:"action_parameter"`
	AssignCorrespondent     *int                         `json:"assign_correspondent"`
	AssignCorrespondentFrom *AssignCorrespondentFromEnum `json:"assign_correspondent_from,omitempty"`
	AssignDocumentType      *int                         `json:"assign_document_type"`
	AssignOwnerFromRule     *bool                        `json:"assign_owner_from_rule,omitempty"`
	AssignTags              *[]int                       `json:"assign_tags,omitempty"`
	AssignTitleFrom         *AssignTitleFromEnum         `json:"assign_title_from,omitempty"`

	// AttachmentType Inline attachments include embedded images, so it's best to combine this option with a filename filter.
	//
	// * `1` - Only process attachments.
	// * `2` - Process all files, including 'inline' attachments.
	AttachmentType   *AttachmentTypeEnum   `json:"attachment_type,omitempty"`
	ConsumptionScope *ConsumptionScopeEnum `json:"consumption_scope,omitempty"`
	Enabled          *bool                 `json:"enabled,omitempty"`

	// FilterAttachmentFilenameExclude Do not consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
	FilterAttachmentFilenameExclude *string `json:"filter_attachment_filename_exclude"`

	// FilterAttachmentFilenameInclude Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
	FilterAttachmentFilenameInclude *string `json:"filter_attachment_filename_include"`
	FilterBody                      *string `json:"filter_body"`
	FilterFrom                      *string `json:"filter_from"`
	FilterSubject                   *string `json:"filter_subject"`
	FilterTo                        *string `json:"filter_to"`

	// Folder Subfolders must be separated by a delimiter, often a dot ('.') or slash ('/'), but it varies by mail server.
	Folder *string `json:"folder,omitempty"`
	Id     *int    `json:"id,omitempty"`

	// MaximumAge Specified in days.
	MaximumAge    *int64         `json:"maximum_age,omitempty"`
	Name          string         `json:"name"`
	Order         *int           `json:"order,omitempty"`
	Owner         *int           `json:"owner"`
	PdfLayout     *PdfLayoutEnum `json:"pdf_layout,omitempty"`
	UserCanChange *bool          `json:"user_can_change,omitempty"`
}

// MailRuleActionEnum * `1` - Delete
// * `2` - Move to specified folder
// * `3` - Mark as read, don't process read mails
// * `4` - Flag the mail, don't process flagged mails
// * `5` - Tag the mail with specified tag, don't process tagged mails
type MailRuleActionEnum int

// MailRuleRequest defines model for MailRuleRequest.
type MailRuleRequest struct {
	Account                 int                          `json:"account"`
	Action                  *MailRuleActionEnum          `json:"action,omitempty"`
	ActionParameter         *string                      `json:"action_parameter"`
	AssignCorrespondent     *int                         `json:"assign_correspondent"`
	AssignCorrespondentFrom *AssignCorrespondentFromEnum `json:"assign_correspondent_from,omitempty"`
	AssignDocumentType      *int                         `json:"assign_document_type"`
	AssignOwnerFromRule     *bool                        `json:"assign_owner_from_rule,omitempty"`
	AssignTags              *[]int                       `json:"assign_tags,omitempty"`
	AssignTitleFrom         *AssignTitleFromEnum         `json:"assign_title_from,omitempty"`

	// AttachmentType Inline attachments include embedded images, so it's best to combine this option with a filename filter.
	//
	// * `1` - Only process attachments.
	// * `2` - Process all files, including 'inline' attachments.
	AttachmentType   *AttachmentTypeEnum   `json:"attachment_type,omitempty"`
	ConsumptionScope *ConsumptionScopeEnum `json:"consumption_scope,omitempty"`
	Enabled          *bool                 `json:"enabled,omitempty"`

	// FilterAttachmentFilenameExclude Do not consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
	FilterAttachmentFilenameExclude *string `json:"filter_attachment_filename_exclude"`

	// FilterAttachmentFilenameInclude Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
	FilterAttachmentFilenameInclude *string `json:"filter_attachment_filename_include"`
	FilterBody                      *string `json:"filter_body"`
	FilterFrom                      *string `json:"filter_from"`
	FilterSubject                   *string `json:"filter_subject"`
	FilterTo                        *string `json:"filter_to"`

	// Folder Subfolders must be separated by a delimiter, often a dot ('.') or slash ('/'), but it varies by mail server.
	Folder *string `json:"folder,omitempty"`

	// MaximumAge Specified in days.
	MaximumAge     *int64         `json:"maximum_age,omitempty"`
	Name           string         `json:"name"`
	Order          *int           `json:"order,omitempty"`
	Owner          *int           `json:"owner"`
	PdfLayout      *PdfLayoutEnum `json:"pdf_layout,omitempty"`
	SetPermissions *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// MatchingAlgorithm * `0` - None
// * `1` - Any word
// * `2` - All words
// * `3` - Exact match
// * `4` - Regular expression
// * `5` - Fuzzy word
// * `6` - Automatic
type MatchingAlgorithm int

// Metadata defines model for Metadata.
type Metadata struct {
	ArchiveChecksum      string                 `json:"archive_checksum"`
	ArchiveMediaFilename string                 `json:"archive_media_filename"`
	ArchiveMetadata      map[string]interface{} `json:"archive_metadata"`
	ArchiveSize          int                    `json:"archive_size"`
	HasArchiveVersion    bool                   `json:"has_archive_version"`
	Lang                 string                 `json:"lang"`
	MediaFilename        string                 `json:"media_filename"`
	OriginalChecksum     string                 `json:"original_checksum"`
	OriginalFilename     string                 `json:"original_filename"`
	OriginalMetadata     map[string]interface{} `json:"original_metadata"`
	OriginalMimeType     string                 `json:"original_mime_type"`
	OriginalSize         int                    `json:"original_size"`
}

// MethodEnum * `set_correspondent` - set_correspondent
// * `set_document_type` - set_document_type
// * `set_storage_path` - set_storage_path
// * `add_tag` - add_tag
// * `remove_tag` - remove_tag
// * `modify_tags` - modify_tags
// * `modify_custom_fields` - modify_custom_fields
// * `delete` - delete
// * `reprocess` - reprocess
// * `set_permissions` - set_permissions
// * `rotate` - rotate
// * `merge` - merge
// * `split` - split
// * `delete_pages` - delete_pages
// * `edit_pdf` - edit_pdf
type MethodEnum string

// MigrationStatus defines model for MigrationStatus.
type MigrationStatus struct {
	LatestMigration     string   `json:"latest_migration"`
	UnappliedMigrations []string `json:"unapplied_migrations"`
}

// ModeEnum * `skip` - skip
// * `redo` - redo
// * `force` - force
// * `skip_noarchive` - skip_noarchive
type ModeEnum string

// NoteCreateRequestRequest defines model for NoteCreateRequestRequest.
type NoteCreateRequestRequest struct {
	Note string `json:"note"`
}

// Notes defines model for Notes.
type Notes struct {
	Created *time.Time `json:"created,omitempty"`
	Id      *int       `json:"id,omitempty"`

	// Note Note for the document
	Note *string    `json:"note,omitempty"`
	User *BasicUser `json:"user,omitempty"`
}

// NullEnum defines model for NullEnum.
type NullEnum = interface{}

// ObjectTypeEnum * `tags` - tags
// * `correspondents` - correspondents
// * `document_types` - document_types
// * `storage_paths` - storage_paths
type ObjectTypeEnum string

// OperationEnum * `set_permissions` - set_permissions
// * `delete` - delete
type OperationEnum string

// OutputTypeEnum * `pdf` - pdf
// * `pdfa` - pdfa
// * `pdfa-1` - pdfa-1
// * `pdfa-2` - pdfa-2
// * `pdfa-3` - pdfa-3
type OutputTypeEnum string

// PaginatedCorrespondentList defines model for PaginatedCorrespondentList.
type PaginatedCorrespondentList struct {
	All      *[]int          `json:"all,omitempty"`
	Count    int             `json:"count"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  []Correspondent `json:"results"`
}

// PaginatedCustomFieldList defines model for PaginatedCustomFieldList.
type PaginatedCustomFieldList struct {
	All      *[]int        `json:"all,omitempty"`
	Count    int           `json:"count"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  []CustomField `json:"results"`
}

// PaginatedDocumentList defines model for PaginatedDocumentList.
type PaginatedDocumentList struct {
	All      *[]int     `json:"all,omitempty"`
	Count    int        `json:"count"`
	Next     *string    `json:"next"`
	Previous *string    `json:"previous"`
	Results  []Document `json:"results"`
}

// PaginatedDocumentTypeList defines model for PaginatedDocumentTypeList.
type PaginatedDocumentTypeList struct {
	All      *[]int         `json:"all,omitempty"`
	Count    int            `json:"count"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  []DocumentType `json:"results"`
}

// PaginatedGroupList defines model for PaginatedGroupList.
type PaginatedGroupList struct {
	All      *[]int  `json:"all,omitempty"`
	Count    int     `json:"count"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  []Group `json:"results"`
}

// PaginatedLogEntryList defines model for PaginatedLogEntryList.
type PaginatedLogEntryList struct {
	All      *[]int     `json:"all,omitempty"`
	Count    int        `json:"count"`
	Next     *string    `json:"next"`
	Previous *string    `json:"previous"`
	Results  []LogEntry `json:"results"`
}

// PaginatedMailAccountList defines model for PaginatedMailAccountList.
type PaginatedMailAccountList struct {
	All      *[]int        `json:"all,omitempty"`
	Count    int           `json:"count"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  []MailAccount `json:"results"`
}

// PaginatedMailRuleList defines model for PaginatedMailRuleList.
type PaginatedMailRuleList struct {
	All      *[]int     `json:"all,omitempty"`
	Count    int        `json:"count"`
	Next     *string    `json:"next"`
	Previous *string    `json:"previous"`
	Results  []MailRule `json:"results"`
}

// PaginatedNotesList defines model for PaginatedNotesList.
type PaginatedNotesList struct {
	All      *[]int  `json:"all,omitempty"`
	Count    int     `json:"count"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  []Notes `json:"results"`
}

// PaginatedSavedViewList defines model for PaginatedSavedViewList.
type PaginatedSavedViewList struct {
	All      *[]int      `json:"all,omitempty"`
	Count    int         `json:"count"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  []SavedView `json:"results"`
}

// PaginatedShareLinkList defines model for PaginatedShareLinkList.
type PaginatedShareLinkList struct {
	All      *[]int      `json:"all,omitempty"`
	Count    int         `json:"count"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  []ShareLink `json:"results"`
}

// PaginatedStoragePathList defines model for PaginatedStoragePathList.
type PaginatedStoragePathList struct {
	All      *[]int        `json:"all,omitempty"`
	Count    int           `json:"count"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  []StoragePath `json:"results"`
}

// PaginatedTagList defines model for PaginatedTagList.
type PaginatedTagList struct {
	All      *[]int  `json:"all,omitempty"`
	Count    int     `json:"count"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  []Tag   `json:"results"`
}

// PaginatedUserList defines model for PaginatedUserList.
type PaginatedUserList struct {
	All      *[]int  `json:"all,omitempty"`
	Count    int     `json:"count"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  []User  `json:"results"`
}

// PaginatedWorkflowActionList defines model for PaginatedWorkflowActionList.
type PaginatedWorkflowActionList struct {
	All      *[]int           `json:"all,omitempty"`
	Count    int              `json:"count"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  []WorkflowAction `json:"results"`
}

// PaginatedWorkflowList defines model for PaginatedWorkflowList.
type PaginatedWorkflowList struct {
	All      *[]int     `json:"all,omitempty"`
	Count    int        `json:"count"`
	Next     *string    `json:"next"`
	Previous *string    `json:"previous"`
	Results  []Workflow `json:"results"`
}

// PaginatedWorkflowTriggerList defines model for PaginatedWorkflowTriggerList.
type PaginatedWorkflowTriggerList struct {
	All      *[]int            `json:"all,omitempty"`
	Count    int               `json:"count"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  []WorkflowTrigger `json:"results"`
}

// PaperlessAuthToken defines model for PaperlessAuthToken.
type PaperlessAuthToken struct {
	Token *string `json:"token,omitempty"`
}

// PaperlessAuthTokenRequest defines model for PaperlessAuthTokenRequest.
type PaperlessAuthTokenRequest struct {
	Code     *string `json:"code,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PatchedApplicationConfigurationRequest defines model for PatchedApplicationConfigurationRequest.
type PatchedApplicationConfigurationRequest struct {
	AppLogo                  *openapi_types.File                                             `json:"app_logo"`
	AppTitle                 *string                                                         `json:"app_title"`
	BarcodeAsnPrefix         *string                                                         `json:"barcode_asn_prefix"`
	BarcodeDpi               *int64                                                          `json:"barcode_dpi"`
	BarcodeEnableAsn         *bool                                                           `json:"barcode_enable_asn"`
	BarcodeEnableTag         *bool                                                           `json:"barcode_enable_tag"`
	BarcodeEnableTiffSupport *bool                                                           `json:"barcode_enable_tiff_support"`
	BarcodeMaxPages          *int64                                                          `json:"barcode_max_pages"`
	BarcodeRetainSplitPages  *bool                                                           `json:"barcode_retain_split_pages"`
	BarcodeString            *string                                                         `json:"barcode_string"`
	BarcodeTagMapping        interface{}                                                     `json:"barcode_tag_mapping"`
	BarcodeUpscale           *float64                                                        `json:"barcode_upscale"`
	BarcodesEnabled          *bool                                                           `json:"barcodes_enabled"`
	ColorConversionStrategy  *PatchedApplicationConfigurationRequest_ColorConversionStrategy `json:"color_conversion_strategy"`
	Deskew                   *bool                                                           `json:"deskew"`
	ImageDpi                 *int64                                                          `json:"image_dpi"`
	Language                 *string                                                         `json:"language"`
	MaxImagePixels           *float64                                                        `json:"max_image_pixels"`
	Mode                     *PatchedApplicationConfigurationRequest_Mode                    `json:"mode"`
	OutputType               *PatchedApplicationConfigurationRequest_OutputType              `json:"output_type"`
	Pages                    *int64                                                          `json:"pages"`
	RotatePages              *bool                                                           `json:"rotate_pages"`
	RotatePagesThreshold     *float64                                                        `json:"rotate_pages_threshold"`
	SkipArchiveFile          *PatchedApplicationConfigurationRequest_SkipArchiveFile         `json:"skip_archive_file"`
	UnpaperClean             *PatchedApplicationConfigurationRequest_UnpaperClean            `json:"unpaper_clean"`
	UserArgs                 interface{}                                                     `json:"user_args"`
}

// PatchedApplicationConfigurationRequest_ColorConversionStrategy defines model for PatchedApplicationConfigurationRequest.ColorConversionStrategy.
type PatchedApplicationConfigurationRequest_ColorConversionStrategy struct {
	union json.RawMessage
}

// PatchedApplicationConfigurationRequest_Mode defines model for PatchedApplicationConfigurationRequest.Mode.
type PatchedApplicationConfigurationRequest_Mode struct {
	union json.RawMessage
}

// PatchedApplicationConfigurationRequest_OutputType defines model for PatchedApplicationConfigurationRequest.OutputType.
type PatchedApplicationConfigurationRequest_OutputType struct {
	union json.RawMessage
}

// PatchedApplicationConfigurationRequest_SkipArchiveFile defines model for PatchedApplicationConfigurationRequest.SkipArchiveFile.
type PatchedApplicationConfigurationRequest_SkipArchiveFile struct {
	union json.RawMessage
}

// PatchedApplicationConfigurationRequest_UnpaperClean defines model for PatchedApplicationConfigurationRequest.UnpaperClean.
type PatchedApplicationConfigurationRequest_UnpaperClean struct {
	union json.RawMessage
}

// PatchedCorrespondentRequest defines model for PatchedCorrespondentRequest.
type PatchedCorrespondentRequest struct {
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              *string            `json:"name,omitempty"`
	Owner             *int               `json:"owner"`
	SetPermissions    *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// PatchedCustomFieldRequest defines model for PatchedCustomFieldRequest.
type PatchedCustomFieldRequest struct {
	// DataType * `string` - string
	// * `url` - url
	// * `date` - date
	// * `boolean` - boolean
	// * `integer` - integer
	// * `float` - float
	// * `monetary` - monetary
	// * `documentlink` - documentlink
	// * `select` - select
	DataType *DataTypeEnum `json:"data_type,omitempty"`

	// ExtraData Extra data for the custom field, such as select options
	ExtraData interface{} `json:"extra_data"`
	Name      *string     `json:"name,omitempty"`
}

// PatchedDocumentRequest Adds update nested feature
type PatchedDocumentRequest struct {
	// ArchiveSerialNumber The position of this document in your physical document archive.
	ArchiveSerialNumber *int64 `json:"archive_serial_number"`

	// Content The raw, text-only data of the document. This field is primarily used for searching.
	Content       *string             `json:"content,omitempty"`
	Correspondent *int                `json:"correspondent"`
	Created       *openapi_types.Date `json:"created,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	CreatedDate     *openapi_types.Date           `json:"created_date,omitempty"`
	CustomFields    *[]CustomFieldInstanceRequest `json:"custom_fields,omitempty"`
	DeletedAt       *time.Time                    `json:"deleted_at"`
	DocumentType    *int                          `json:"document_type"`
	Owner           *int                          `json:"owner"`
	RemoveInboxTags *bool                         `json:"remove_inbox_tags"`
	SetPermissions  *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
	StoragePath *int    `json:"storage_path"`
	Tags        *[]int  `json:"tags,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// PatchedDocumentTypeRequest defines model for PatchedDocumentTypeRequest.
type PatchedDocumentTypeRequest struct {
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              *string            `json:"name,omitempty"`
	Owner             *int               `json:"owner"`
	SetPermissions    *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// PatchedGroupRequest defines model for PatchedGroupRequest.
type PatchedGroupRequest struct {
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// PatchedMailAccountRequest defines model for PatchedMailAccountRequest.
type PatchedMailAccountRequest struct {
	AccountType *AccountTypeEnum `json:"account_type,omitempty"`

	// CharacterSet The character set to use when communicating with the mail server, such as 'UTF-8' or 'US-ASCII'.
	CharacterSet *string `json:"character_set,omitempty"`

	// Expiration The expiration date of the refresh token.
	Expiration *time.Time `json:"expiration"`

	// ImapPort This is usually 143 for unencrypted and STARTTLS connections, and 993 for SSL connections.
	ImapPort       *int64            `json:"imap_port"`
	ImapSecurity   *ImapSecurityEnum `json:"imap_security,omitempty"`
	ImapServer     *string           `json:"imap_server,omitempty"`
	IsToken        *bool             `json:"is_token,omitempty"`
	Name           *string           `json:"name,omitempty"`
	Owner          *int              `json:"owner"`
	Password       *string           `json:"password,omitempty"`
	SetPermissions *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PatchedMailRuleRequest defines model for PatchedMailRuleRequest.
type PatchedMailRuleRequest struct {
	Account                 *int                         `json:"account,omitempty"`
	Action                  *MailRuleActionEnum          `json:"action,omitempty"`
	ActionParameter         *string                      `json:"action_parameter"`
	AssignCorrespondent     *int                         `json:"assign_correspondent"`
	AssignCorrespondentFrom *AssignCorrespondentFromEnum `json:"assign_correspondent_from,omitempty"`
	AssignDocumentType      *int                         `json:"assign_document_type"`
	AssignOwnerFromRule     *bool                        `json:"assign_owner_from_rule,omitempty"`
	AssignTags              *[]int                       `json:"assign_tags,omitempty"`
	AssignTitleFrom         *AssignTitleFromEnum         `json:"assign_title_from,omitempty"`

	// AttachmentType Inline attachments include embedded images, so it's best to combine this option with a filename filter.
	//
	// * `1` - Only process attachments.
	// * `2` - Process all files, including 'inline' attachments.
	AttachmentType   *AttachmentTypeEnum   `json:"attachment_type,omitempty"`
	ConsumptionScope *ConsumptionScopeEnum `json:"consumption_scope,omitempty"`
	Enabled          *bool                 `json:"enabled,omitempty"`

	// FilterAttachmentFilenameExclude Do not consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
	FilterAttachmentFilenameExclude *string `json:"filter_attachment_filename_exclude"`

	// FilterAttachmentFilenameInclude Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
	FilterAttachmentFilenameInclude *string `json:"filter_attachment_filename_include"`
	FilterBody                      *string `json:"filter_body"`
	FilterFrom                      *string `json:"filter_from"`
	FilterSubject                   *string `json:"filter_subject"`
	FilterTo                        *string `json:"filter_to"`

	// Folder Subfolders must be separated by a delimiter, often a dot ('.') or slash ('/'), but it varies by mail server.
	Folder *string `json:"folder,omitempty"`

	// MaximumAge Specified in days.
	MaximumAge     *int64         `json:"maximum_age,omitempty"`
	Name           *string        `json:"name,omitempty"`
	Order          *int           `json:"order,omitempty"`
	Owner          *int           `json:"owner"`
	PdfLayout      *PdfLayoutEnum `json:"pdf_layout,omitempty"`
	SetPermissions *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// PatchedProfileRequest defines model for PatchedProfileRequest.
type PatchedProfileRequest struct {
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"first_name,omitempty"`
	LastName  *string              `json:"last_name,omitempty"`
	Password  *string              `json:"password,omitempty"`
}

// PatchedSavedViewRequest defines model for PatchedSavedViewRequest.
type PatchedSavedViewRequest struct {
	DisplayFields   interface{}                          `json:"display_fields"`
	DisplayMode     *PatchedSavedViewRequest_DisplayMode `json:"display_mode"`
	FilterRules     *[]SavedViewFilterRuleRequest        `json:"filter_rules,omitempty"`
	Name            *string                              `json:"name,omitempty"`
	Owner           *int                                 `json:"owner"`
	PageSize        *int64                               `json:"page_size"`
	ShowInSidebar   *bool                                `json:"show_in_sidebar,omitempty"`
	ShowOnDashboard *bool                                `json:"show_on_dashboard,omitempty"`
	SortField       *string                              `json:"sort_field"`
	SortReverse     *bool                                `json:"sort_reverse,omitempty"`
}

// PatchedSavedViewRequest_DisplayMode defines model for PatchedSavedViewRequest.DisplayMode.
type PatchedSavedViewRequest_DisplayMode struct {
	union json.RawMessage
}

// PatchedShareLinkRequest defines model for PatchedShareLinkRequest.
type PatchedShareLinkRequest struct {
	Document   *int       `json:"document,omitempty"`
	Expiration *time.Time `json:"expiration"`

	// FileVersion * `archive` - Archive
	// * `original` - Original
	FileVersion *FileVersionEnum `json:"file_version,omitempty"`
}

// PatchedStoragePathRequest defines model for PatchedStoragePathRequest.
type PatchedStoragePathRequest struct {
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              *string            `json:"name,omitempty"`
	Owner             *int               `json:"owner"`
	Path              *string            `json:"path,omitempty"`
	SetPermissions    *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// PatchedTagRequest defines model for PatchedTagRequest.
type PatchedTagRequest struct {
	Color *string `json:"color,omitempty"`

	// IsInboxTag Marks this tag as an inbox tag: All newly consumed documents will be tagged with inbox tags.
	IsInboxTag        *bool              `json:"is_inbox_tag,omitempty"`
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              *string            `json:"name,omitempty"`
	Owner             *int               `json:"owner"`
	SetPermissions    *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// PatchedUserRequest defines model for PatchedUserRequest.
type PatchedUserRequest struct {
	DateJoined *time.Time           `json:"date_joined,omitempty"`
	Email      *openapi_types.Email `json:"email,omitempty"`
	FirstName  *string              `json:"first_name,omitempty"`

	// Groups The groups this user belongs to. A user will get all permissions granted to each of their groups.
	Groups *[]int `json:"groups,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsStaff Designates whether the user can log into this admin site.
	IsStaff *bool `json:"is_staff,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser     *bool     `json:"is_superuser,omitempty"`
	LastName        *string   `json:"last_name,omitempty"`
	Password        *string   `json:"password,omitempty"`
	UserPermissions *[]string `json:"user_permissions,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username *string `json:"username,omitempty"`
}

// PatchedWorkflowActionRequest defines model for PatchedWorkflowActionRequest.
type PatchedWorkflowActionRequest struct {
	AssignChangeGroups  *[]int `json:"assign_change_groups,omitempty"`
	AssignChangeUsers   *[]int `json:"assign_change_users,omitempty"`
	AssignCorrespondent *int   `json:"assign_correspondent"`
	AssignCustomFields  *[]int `json:"assign_custom_fields,omitempty"`

	// AssignCustomFieldsValues Optional values to assign to the custom fields.
	AssignCustomFieldsValues interface{} `json:"assign_custom_fields_values"`
	AssignDocumentType       *int        `json:"assign_document_type"`
	AssignOwner              *int        `json:"assign_owner"`
	AssignStoragePath        *int        `json:"assign_storage_path"`
	AssignTags               *[]int      `json:"assign_tags,omitempty"`

	// AssignTitle Assign a document title, can include some placeholders, see documentation.
	AssignTitle             *string                       `json:"assign_title"`
	AssignViewGroups        *[]int                        `json:"assign_view_groups,omitempty"`
	AssignViewUsers         *[]int                        `json:"assign_view_users,omitempty"`
	Email                   *WorkflowActionEmailRequest   `json:"email"`
	Id                      *int                          `json:"id"`
	RemoveAllCorrespondents *bool                         `json:"remove_all_correspondents,omitempty"`
	RemoveAllCustomFields   *bool                         `json:"remove_all_custom_fields,omitempty"`
	RemoveAllDocumentTypes  *bool                         `json:"remove_all_document_types,omitempty"`
	RemoveAllOwners         *bool                         `json:"remove_all_owners,omitempty"`
	RemoveAllPermissions    *bool                         `json:"remove_all_permissions,omitempty"`
	RemoveAllStoragePaths   *bool                         `json:"remove_all_storage_paths,omitempty"`
	RemoveAllTags           *bool                         `json:"remove_all_tags,omitempty"`
	RemoveChangeGroups      *[]int                        `json:"remove_change_groups,omitempty"`
	RemoveChangeUsers       *[]int                        `json:"remove_change_users,omitempty"`
	RemoveCorrespondents    *[]int                        `json:"remove_correspondents,omitempty"`
	RemoveCustomFields      *[]int                        `json:"remove_custom_fields,omitempty"`
	RemoveDocumentTypes     *[]int                        `json:"remove_document_types,omitempty"`
	RemoveOwners            *[]int                        `json:"remove_owners,omitempty"`
	RemoveStoragePaths      *[]int                        `json:"remove_storage_paths,omitempty"`
	RemoveTags              *[]int                        `json:"remove_tags,omitempty"`
	RemoveViewGroups        *[]int                        `json:"remove_view_groups,omitempty"`
	RemoveViewUsers         *[]int                        `json:"remove_view_users,omitempty"`
	Type                    *WorkflowActionTypeEnum       `json:"type,omitempty"`
	Webhook                 *WorkflowActionWebhookRequest `json:"webhook"`
}

// PatchedWorkflowRequest defines model for PatchedWorkflowRequest.
type PatchedWorkflowRequest struct {
	Actions  *[]WorkflowActionRequest  `json:"actions,omitempty"`
	Enabled  *bool                     `json:"enabled,omitempty"`
	Name     *string                   `json:"name,omitempty"`
	Order    *int                      `json:"order,omitempty"`
	Triggers *[]WorkflowTriggerRequest `json:"triggers,omitempty"`
}

// PatchedWorkflowTriggerRequest defines model for PatchedWorkflowTriggerRequest.
type PatchedWorkflowTriggerRequest struct {
	// FilterFilename Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
	FilterFilename         *string `json:"filter_filename"`
	FilterHasCorrespondent *int    `json:"filter_has_correspondent"`
	FilterHasDocumentType  *int    `json:"filter_has_document_type"`
	FilterHasTags          *[]int  `json:"filter_has_tags,omitempty"`
	FilterMailrule         *int    `json:"filter_mailrule"`

	// FilterPath Only consume documents with a path that matches this if specified. Wildcards specified as * are allowed. Case insensitive.
	FilterPath              *string                               `json:"filter_path"`
	Id                      *int                                  `json:"id"`
	IsInsensitive           *bool                                 `json:"is_insensitive,omitempty"`
	Match                   *string                               `json:"match,omitempty"`
	MatchingAlgorithm       *WorkflowTriggerMatchingAlgorithmEnum `json:"matching_algorithm,omitempty"`
	ScheduleDateCustomField *int                                  `json:"schedule_date_custom_field"`

	// ScheduleDateField The field to check for a schedule trigger.
	//
	// * `added` - Added
	// * `created` - Created
	// * `modified` - Modified
	// * `custom_field` - Custom Field
	ScheduleDateField *ScheduleDateFieldEnum `json:"schedule_date_field,omitempty"`

	// ScheduleIsRecurring If the schedule should be recurring.
	ScheduleIsRecurring *bool `json:"schedule_is_recurring,omitempty"`

	// ScheduleOffsetDays The number of days to offset the schedule trigger by.
	ScheduleOffsetDays *int64 `json:"schedule_offset_days,omitempty"`

	// ScheduleRecurringIntervalDays The number of days between recurring schedule triggers.
	ScheduleRecurringIntervalDays *int64                   `json:"schedule_recurring_interval_days,omitempty"`
	Sources                       *[]SourcesEnum           `json:"sources,omitempty"`
	Type                          *WorkflowTriggerTypeEnum `json:"type,omitempty"`
}

// PdfLayoutEnum * `0` - System default
// * `1` - Text, then HTML
// * `2` - HTML, then text
// * `3` - HTML only
// * `4` - Text only
type PdfLayoutEnum int

// PostDocumentRequest defines model for PostDocumentRequest.
type PostDocumentRequest struct {
	ArchiveSerialNumber *int64              `json:"archive_serial_number,omitempty"`
	Correspondent       *int                `json:"correspondent"`
	Created             *time.Time          `json:"created"`
	CustomFields        *[]int              `json:"custom_fields,omitempty"`
	Document            *openapi_types.File `json:"document,omitempty"`
	DocumentType        *int                `json:"document_type"`
	FromWebui           *bool               `json:"from_webui,omitempty"`
	StoragePath         *int                `json:"storage_path"`
	Tags                *[]int              `json:"tags,omitempty"`
	Title               *string             `json:"title,omitempty"`
}

// Profile defines model for Profile.
type Profile struct {
	AuthToken         *string              `json:"auth_token,omitempty"`
	Email             *openapi_types.Email `json:"email,omitempty"`
	FirstName         *string              `json:"first_name,omitempty"`
	HasUsablePassword *bool                `json:"has_usable_password,omitempty"`
	IsMfaEnabled      *bool                `json:"is_mfa_enabled,omitempty"`
	LastName          *string              `json:"last_name,omitempty"`
	Password          *string              `json:"password,omitempty"`
	SocialAccounts    *[]SocialAccount     `json:"social_accounts,omitempty"`
}

// RuleTypeEnum * `0` - title contains
// * `1` - content contains
// * `2` - ASN is
// * `3` - correspondent is
// * `4` - document type is
// * `5` - is in inbox
// * `6` - has tag
// * `7` - has any tag
// * `8` - created before
// * `9` - created after
// * `10` - created year is
// * `11` - created month is
// * `12` - created day is
// * `13` - added before
// * `14` - added after
// * `15` - modified before
// * `16` - modified after
// * `17` - does not have tag
// * `18` - does not have ASN
// * `19` - title or content contains
// * `20` - fulltext query
// * `21` - more like this
// * `22` - has tags in
// * `23` - ASN greater than
// * `24` - ASN less than
// * `25` - storage path is
// * `26` - has correspondent in
// * `27` - does not have correspondent in
// * `28` - has document type in
// * `29` - does not have document type in
// * `30` - has storage path in
// * `31` - does not have storage path in
// * `32` - owner is
// * `33` - has owner in
// * `34` - does not have owner
// * `35` - does not have owner in
// * `36` - has custom field value
// * `37` - is shared by me
// * `38` - has custom fields
// * `39` - has custom field in
// * `40` - does not have custom field in
// * `41` - does not have custom field
// * `42` - custom fields query
// * `43` - created to
// * `44` - created from
// * `45` - added to
// * `46` - added from
// * `47` - mime type is
type RuleTypeEnum int

// SanityCheck defines model for SanityCheck.
type SanityCheck struct {
	Error   string    `json:"error"`
	LastRun time.Time `json:"last_run"`
	Status  string    `json:"status"`
}

// SavedView defines model for SavedView.
type SavedView struct {
	DisplayFields   interface{}            `json:"display_fields"`
	DisplayMode     *SavedView_DisplayMode `json:"display_mode"`
	FilterRules     []SavedViewFilterRule  `json:"filter_rules"`
	Id              *int                   `json:"id,omitempty"`
	Name            string                 `json:"name"`
	Owner           *int                   `json:"owner"`
	PageSize        *int64                 `json:"page_size"`
	ShowInSidebar   bool                   `json:"show_in_sidebar"`
	ShowOnDashboard bool                   `json:"show_on_dashboard"`
	SortField       *string                `json:"sort_field"`
	SortReverse     *bool                  `json:"sort_reverse,omitempty"`
	UserCanChange   *bool                  `json:"user_can_change,omitempty"`
}

// SavedView_DisplayMode defines model for SavedView.DisplayMode.
type SavedView_DisplayMode struct {
	union json.RawMessage
}

// SavedViewFilterRule defines model for SavedViewFilterRule.
type SavedViewFilterRule struct {
	RuleType RuleTypeEnum `json:"rule_type"`
	Value    *string      `json:"value"`
}

// SavedViewFilterRuleRequest defines model for SavedViewFilterRuleRequest.
type SavedViewFilterRuleRequest struct {
	RuleType RuleTypeEnum `json:"rule_type"`
	Value    *string      `json:"value"`
}

// SavedViewRequest defines model for SavedViewRequest.
type SavedViewRequest struct {
	DisplayFields   interface{}                   `json:"display_fields"`
	DisplayMode     *SavedViewRequest_DisplayMode `json:"display_mode"`
	FilterRules     []SavedViewFilterRuleRequest  `json:"filter_rules"`
	Name            string                        `json:"name"`
	Owner           *int                          `json:"owner"`
	PageSize        *int64                        `json:"page_size"`
	ShowInSidebar   bool                          `json:"show_in_sidebar"`
	ShowOnDashboard bool                          `json:"show_on_dashboard"`
	SortField       *string                       `json:"sort_field"`
	SortReverse     *bool                         `json:"sort_reverse,omitempty"`
}

// SavedViewRequest_DisplayMode defines model for SavedViewRequest.DisplayMode.
type SavedViewRequest_DisplayMode struct {
	union json.RawMessage
}

// ScheduleDateFieldEnum * `added` - Added
// * `created` - Created
// * `modified` - Modified
// * `custom_field` - Custom Field
type ScheduleDateFieldEnum string

// SearchResult defines model for SearchResult.
type SearchResult struct {
	Correspondents []Correspondent `json:"correspondents"`
	CustomFields   []CustomField   `json:"custom_fields"`
	DocumentTypes  []DocumentType  `json:"document_types"`
	Documents      []Document      `json:"documents"`
	Groups         []Group         `json:"groups"`
	MailAccounts   []MailAccount   `json:"mail_accounts"`
	MailRules      []MailRule      `json:"mail_rules"`
	SavedViews     []SavedView     `json:"saved_views"`
	StoragePaths   []StoragePath   `json:"storage_paths"`
	Tags           []Tag           `json:"tags"`
	Total          int             `json:"total"`
	Users          []User          `json:"users"`
	Workflows      []Workflow      `json:"workflows"`
}

// SelectionData defines model for SelectionData.
type SelectionData struct {
	SelectedCorrespondents []CorrespondentCounts `json:"selected_correspondents"`
	SelectedCustomFields   []CustomFieldCounts   `json:"selected_custom_fields"`
	SelectedDocumentTypes  []DocumentTypeCounts  `json:"selected_document_types"`
	SelectedStoragePaths   []StoragePathCounts   `json:"selected_storage_paths"`
	SelectedTags           []TagCounts           `json:"selected_tags"`
}

// ShareLink defines model for ShareLink.
type ShareLink struct {
	Created    *time.Time `json:"created,omitempty"`
	Document   *int       `json:"document,omitempty"`
	Expiration *time.Time `json:"expiration"`

	// FileVersion * `archive` - Archive
	// * `original` - Original
	FileVersion *FileVersionEnum `json:"file_version,omitempty"`
	Id          *int             `json:"id,omitempty"`
	Slug        *string          `json:"slug,omitempty"`
}

// ShareLinkRequest defines model for ShareLinkRequest.
type ShareLinkRequest struct {
	Document   *int       `json:"document,omitempty"`
	Expiration *time.Time `json:"expiration"`

	// FileVersion * `archive` - Archive
	// * `original` - Original
	FileVersion *FileVersionEnum `json:"file_version,omitempty"`
}

// SkipArchiveFileEnum * `never` - never
// * `with_text` - with_text
// * `always` - always
type SkipArchiveFileEnum string

// SocialAccount defines model for SocialAccount.
type SocialAccount struct {
	Id       *int    `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Provider string  `json:"provider"`
}

// SourcesEnum * `1` - Consume Folder
// * `2` - Api Upload
// * `3` - Mail Fetch
// * `4` - Web UI
type SourcesEnum int

// StatusEnum * `FAILURE` - FAILURE
// * `PENDING` - PENDING
// * `RECEIVED` - RECEIVED
// * `RETRY` - RETRY
// * `REVOKED` - REVOKED
// * `STARTED` - STARTED
// * `SUCCESS` - SUCCESS
type StatusEnum string

// Storage defines model for Storage.
type Storage struct {
	Available int `json:"available"`
	Total     int `json:"total"`
}

// StoragePath defines model for StoragePath.
type StoragePath struct {
	DocumentCount     *int               `json:"document_count,omitempty"`
	Id                *int               `json:"id,omitempty"`
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              string             `json:"name"`
	Owner             *int               `json:"owner"`
	Path              string             `json:"path"`
	Slug              *string            `json:"slug,omitempty"`
	UserCanChange     *bool              `json:"user_can_change,omitempty"`
}

// StoragePathCounts defines model for StoragePathCounts.
type StoragePathCounts struct {
	DocumentCount int `json:"document_count"`
	Id            int `json:"id"`
}

// StoragePathRequest defines model for StoragePathRequest.
type StoragePathRequest struct {
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              string             `json:"name"`
	Owner             *int               `json:"owner"`
	Path              string             `json:"path"`
	SetPermissions    *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// Suggestions defines model for Suggestions.
type Suggestions struct {
	Correspondents []int    `json:"correspondents"`
	Dates          []string `json:"dates"`
	DocumentTypes  []int    `json:"document_types"`
	StoragePaths   []int    `json:"storage_paths"`
	Tags           []int    `json:"tags"`
}

// SystemStatus defines model for SystemStatus.
type SystemStatus struct {
	Classifier  Classifier  `json:"classifier"`
	Database    Database    `json:"database"`
	Index       Index       `json:"index"`
	InstallType string      `json:"install_type"`
	PngxVersion string      `json:"pngx_version"`
	SanityCheck SanityCheck `json:"sanity_check"`
	ServerOs    string      `json:"server_os"`
	Storage     Storage     `json:"storage"`
	Tasks       Tasks       `json:"tasks"`
}

// Tag defines model for Tag.
type Tag struct {
	Color         *string `json:"color,omitempty"`
	DocumentCount *int    `json:"document_count,omitempty"`
	Id            *int    `json:"id,omitempty"`

	// IsInboxTag Marks this tag as an inbox tag: All newly consumed documents will be tagged with inbox tags.
	IsInboxTag        *bool              `json:"is_inbox_tag,omitempty"`
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              string             `json:"name"`
	Owner             *int               `json:"owner"`
	Slug              *string            `json:"slug,omitempty"`
	TextColor         *string            `json:"text_color,omitempty"`
	UserCanChange     *bool              `json:"user_can_change,omitempty"`
}

// TagCounts defines model for TagCounts.
type TagCounts struct {
	DocumentCount int `json:"document_count"`
	Id            int `json:"id"`
}

// TagRequest defines model for TagRequest.
type TagRequest struct {
	Color *string `json:"color,omitempty"`

	// IsInboxTag Marks this tag as an inbox tag: All newly consumed documents will be tagged with inbox tags.
	IsInboxTag        *bool              `json:"is_inbox_tag,omitempty"`
	IsInsensitive     *bool              `json:"is_insensitive,omitempty"`
	Match             *string            `json:"match,omitempty"`
	MatchingAlgorithm *MatchingAlgorithm `json:"matching_algorithm,omitempty"`
	Name              string             `json:"name"`
	Owner             *int               `json:"owner"`
	SetPermissions    *struct {
		Change *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"change,omitempty"`
		View *struct {
			Groups *[]int `json:"groups,omitempty"`
			Users  *[]int `json:"users,omitempty"`
		} `json:"view,omitempty"`
	} `json:"set_permissions,omitempty"`
}

// TaskNameEnum * `consume_file` - Consume File
// * `train_classifier` - Train Classifier
// * `check_sanity` - Check Sanity
// * `index_optimize` - Index Optimize
type TaskNameEnum string

// Tasks defines model for Tasks.
type Tasks struct {
	CeleryStatus string `json:"celery_status"`
	RedisError   string `json:"redis_error"`
	RedisStatus  string `json:"redis_status"`
	RedisUrl     string `json:"redis_url"`
}

// TasksView defines model for TasksView.
type TasksView struct {
	// Acknowledged If the task is acknowledged via the frontend or API
	Acknowledged *bool `json:"acknowledged,omitempty"`

	// DateCreated Datetime field when the task result was created in UTC
	DateCreated *time.Time `json:"date_created"`

	// DateDone Datetime field when the task was completed in UTC
	DateDone        *time.Time `json:"date_done"`
	Id              *int       `json:"id,omitempty"`
	Owner           *int       `json:"owner"`
	RelatedDocument *string    `json:"related_document"`

	// Result The data returned by the task
	Result *string `json:"result"`

	// Status Current state of the task being run
	//
	// * `FAILURE` - FAILURE
	// * `PENDING` - PENDING
	// * `RECEIVED` - RECEIVED
	// * `RETRY` - RETRY
	// * `REVOKED` - REVOKED
	// * `STARTED` - STARTED
	// * `SUCCESS` - SUCCESS
	Status *StatusEnum `json:"status,omitempty"`

	// TaskFileName Name of the file which the Task was run for
	TaskFileName *string `json:"task_file_name"`

	// TaskId Celery ID for the Task that was run
	TaskId string `json:"task_id"`

	// TaskName Name of the task that was run
	//
	// * `consume_file` - Consume File
	// * `train_classifier` - Train Classifier
	// * `check_sanity` - Check Sanity
	// * `index_optimize` - Index Optimize
	TaskName *TasksView_TaskName `json:"task_name"`

	// Type The type of task that was run
	//
	// * `auto_task` - Auto Task
	// * `scheduled_task` - Scheduled Task
	// * `manual_task` - Manual Task
	Type *TasksViewTypeEnum `json:"type,omitempty"`
}

// TasksView_TaskName Name of the task that was run
//
// * `consume_file` - Consume File
// * `train_classifier` - Train Classifier
// * `check_sanity` - Check Sanity
// * `index_optimize` - Index Optimize
type TasksView_TaskName struct {
	union json.RawMessage
}

// TasksViewRequest defines model for TasksViewRequest.
type TasksViewRequest struct {
	// Acknowledged If the task is acknowledged via the frontend or API
	Acknowledged *bool `json:"acknowledged,omitempty"`

	// DateCreated Datetime field when the task result was created in UTC
	DateCreated *time.Time `json:"date_created"`

	// DateDone Datetime field when the task was completed in UTC
	DateDone *time.Time `json:"date_done"`
	Owner    *int       `json:"owner"`

	// Result The data returned by the task
	Result *string `json:"result"`

	// Status Current state of the task being run
	//
	// * `FAILURE` - FAILURE
	// * `PENDING` - PENDING
	// * `RECEIVED` - RECEIVED
	// * `RETRY` - RETRY
	// * `REVOKED` - REVOKED
	// * `STARTED` - STARTED
	// * `SUCCESS` - SUCCESS
	Status *StatusEnum `json:"status,omitempty"`

	// TaskFileName Name of the file which the Task was run for
	TaskFileName *string `json:"task_file_name"`

	// TaskId Celery ID for the Task that was run
	TaskId string `json:"task_id"`

	// TaskName Name of the task that was run
	//
	// * `consume_file` - Consume File
	// * `train_classifier` - Train Classifier
	// * `check_sanity` - Check Sanity
	// * `index_optimize` - Index Optimize
	TaskName *TasksViewRequest_TaskName `json:"task_name"`

	// Type The type of task that was run
	//
	// * `auto_task` - Auto Task
	// * `scheduled_task` - Scheduled Task
	// * `manual_task` - Manual Task
	Type *TasksViewTypeEnum `json:"type,omitempty"`
}

// TasksViewRequest_TaskName Name of the task that was run
//
// * `consume_file` - Consume File
// * `train_classifier` - Train Classifier
// * `check_sanity` - Check Sanity
// * `index_optimize` - Index Optimize
type TasksViewRequest_TaskName struct {
	union json.RawMessage
}

// TasksViewTypeEnum * `auto_task` - Auto Task
// * `scheduled_task` - Scheduled Task
// * `manual_task` - Manual Task
type TasksViewTypeEnum string

// TrashActionEnum * `restore` - restore
// * `empty` - empty
type TrashActionEnum string

// TrashRequest defines model for TrashRequest.
type TrashRequest struct {
	Action    *TrashActionEnum `json:"action,omitempty"`
	Documents *[]int           `json:"documents,omitempty"`
}

// UiSettingsView defines model for UiSettingsView.
type UiSettingsView struct {
	Id       *int                    `json:"id,omitempty"`
	Settings *map[string]interface{} `json:"settings"`
}

// UiSettingsViewRequest defines model for UiSettingsViewRequest.
type UiSettingsViewRequest struct {
	Settings *map[string]interface{} `json:"settings"`
}

// UnpaperCleanEnum * `clean` - clean
// * `clean-final` - clean-final
// * `none` - none
type UnpaperCleanEnum string

// User defines model for User.
type User struct {
	DateJoined *time.Time           `json:"date_joined,omitempty"`
	Email      *openapi_types.Email `json:"email,omitempty"`
	FirstName  *string              `json:"first_name,omitempty"`

	// Groups The groups this user belongs to. A user will get all permissions granted to each of their groups.
	Groups               *[]int    `json:"groups,omitempty"`
	Id                   *int      `json:"id,omitempty"`
	InheritedPermissions *[]string `json:"inherited_permissions,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive     *bool `json:"is_active,omitempty"`
	IsMfaEnabled *bool `json:"is_mfa_enabled,omitempty"`

	// IsStaff Designates whether the user can log into this admin site.
	IsStaff *bool `json:"is_staff,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser     *bool     `json:"is_superuser,omitempty"`
	LastName        *string   `json:"last_name,omitempty"`
	Password        *string   `json:"password,omitempty"`
	UserPermissions *[]string `json:"user_permissions,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	DateJoined *time.Time           `json:"date_joined,omitempty"`
	Email      *openapi_types.Email `json:"email,omitempty"`
	FirstName  *string              `json:"first_name,omitempty"`

	// Groups The groups this user belongs to. A user will get all permissions granted to each of their groups.
	Groups *[]int `json:"groups,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsStaff Designates whether the user can log into this admin site.
	IsStaff *bool `json:"is_staff,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser     *bool     `json:"is_superuser,omitempty"`
	LastName        *string   `json:"last_name,omitempty"`
	Password        *string   `json:"password,omitempty"`
	UserPermissions *[]string `json:"user_permissions,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// Workflow defines model for Workflow.
type Workflow struct {
	Actions  []WorkflowAction  `json:"actions"`
	Enabled  *bool             `json:"enabled,omitempty"`
	Id       *int              `json:"id,omitempty"`
	Name     string            `json:"name"`
	Order    *int              `json:"order,omitempty"`
	Triggers []WorkflowTrigger `json:"triggers"`
}

// WorkflowAction defines model for WorkflowAction.
type WorkflowAction struct {
	AssignChangeGroups  *[]int `json:"assign_change_groups,omitempty"`
	AssignChangeUsers   *[]int `json:"assign_change_users,omitempty"`
	AssignCorrespondent *int   `json:"assign_correspondent"`
	AssignCustomFields  *[]int `json:"assign_custom_fields,omitempty"`

	// AssignCustomFieldsValues Optional values to assign to the custom fields.
	AssignCustomFieldsValues interface{} `json:"assign_custom_fields_values"`
	AssignDocumentType       *int        `json:"assign_document_type"`
	AssignOwner              *int        `json:"assign_owner"`
	AssignStoragePath        *int        `json:"assign_storage_path"`
	AssignTags               *[]int      `json:"assign_tags,omitempty"`

	// AssignTitle Assign a document title, can include some placeholders, see documentation.
	AssignTitle             *string                 `json:"assign_title"`
	AssignViewGroups        *[]int                  `json:"assign_view_groups,omitempty"`
	AssignViewUsers         *[]int                  `json:"assign_view_users,omitempty"`
	Email                   *WorkflowActionEmail    `json:"email"`
	Id                      *int                    `json:"id"`
	RemoveAllCorrespondents *bool                   `json:"remove_all_correspondents,omitempty"`
	RemoveAllCustomFields   *bool                   `json:"remove_all_custom_fields,omitempty"`
	RemoveAllDocumentTypes  *bool                   `json:"remove_all_document_types,omitempty"`
	RemoveAllOwners         *bool                   `json:"remove_all_owners,omitempty"`
	RemoveAllPermissions    *bool                   `json:"remove_all_permissions,omitempty"`
	RemoveAllStoragePaths   *bool                   `json:"remove_all_storage_paths,omitempty"`
	RemoveAllTags           *bool                   `json:"remove_all_tags,omitempty"`
	RemoveChangeGroups      *[]int                  `json:"remove_change_groups,omitempty"`
	RemoveChangeUsers       *[]int                  `json:"remove_change_users,omitempty"`
	RemoveCorrespondents    *[]int                  `json:"remove_correspondents,omitempty"`
	RemoveCustomFields      *[]int                  `json:"remove_custom_fields,omitempty"`
	RemoveDocumentTypes     *[]int                  `json:"remove_document_types,omitempty"`
	RemoveOwners            *[]int                  `json:"remove_owners,omitempty"`
	RemoveStoragePaths      *[]int                  `json:"remove_storage_paths,omitempty"`
	RemoveTags              *[]int                  `json:"remove_tags,omitempty"`
	RemoveViewGroups        *[]int                  `json:"remove_view_groups,omitempty"`
	RemoveViewUsers         *[]int                  `json:"remove_view_users,omitempty"`
	Type                    *WorkflowActionTypeEnum `json:"type,omitempty"`
	Webhook                 *WorkflowActionWebhook  `json:"webhook"`
}

// WorkflowActionEmail defines model for WorkflowActionEmail.
type WorkflowActionEmail struct {
	// Body The body (message) of the email, can include some placeholders, see documentation.
	Body            string `json:"body"`
	Id              *int   `json:"id"`
	IncludeDocument *bool  `json:"include_document,omitempty"`

	// Subject The subject of the email, can include some placeholders, see documentation.
	Subject string `json:"subject"`

	// To The destination email addresses, comma separated.
	To string `json:"to"`
}

// WorkflowActionEmailRequest defines model for WorkflowActionEmailRequest.
type WorkflowActionEmailRequest struct {
	// Body The body (message) of the email, can include some placeholders, see documentation.
	Body            string `json:"body"`
	Id              *int   `json:"id"`
	IncludeDocument *bool  `json:"include_document,omitempty"`

	// Subject The subject of the email, can include some placeholders, see documentation.
	Subject string `json:"subject"`

	// To The destination email addresses, comma separated.
	To string `json:"to"`
}

// WorkflowActionRequest defines model for WorkflowActionRequest.
type WorkflowActionRequest struct {
	AssignChangeGroups  *[]int `json:"assign_change_groups,omitempty"`
	AssignChangeUsers   *[]int `json:"assign_change_users,omitempty"`
	AssignCorrespondent *int   `json:"assign_correspondent"`
	AssignCustomFields  *[]int `json:"assign_custom_fields,omitempty"`

	// AssignCustomFieldsValues Optional values to assign to the custom fields.
	AssignCustomFieldsValues interface{} `json:"assign_custom_fields_values"`
	AssignDocumentType       *int        `json:"assign_document_type"`
	AssignOwner              *int        `json:"assign_owner"`
	AssignStoragePath        *int        `json:"assign_storage_path"`
	AssignTags               *[]int      `json:"assign_tags,omitempty"`

	// AssignTitle Assign a document title, can include some placeholders, see documentation.
	AssignTitle             *string                       `json:"assign_title"`
	AssignViewGroups        *[]int                        `json:"assign_view_groups,omitempty"`
	AssignViewUsers         *[]int                        `json:"assign_view_users,omitempty"`
	Email                   *WorkflowActionEmailRequest   `json:"email"`
	Id                      *int                          `json:"id"`
	RemoveAllCorrespondents *bool                         `json:"remove_all_correspondents,omitempty"`
	RemoveAllCustomFields   *bool                         `json:"remove_all_custom_fields,omitempty"`
	RemoveAllDocumentTypes  *bool                         `json:"remove_all_document_types,omitempty"`
	RemoveAllOwners         *bool                         `json:"remove_all_owners,omitempty"`
	RemoveAllPermissions    *bool                         `json:"remove_all_permissions,omitempty"`
	RemoveAllStoragePaths   *bool                         `json:"remove_all_storage_paths,omitempty"`
	RemoveAllTags           *bool                         `json:"remove_all_tags,omitempty"`
	RemoveChangeGroups      *[]int                        `json:"remove_change_groups,omitempty"`
	RemoveChangeUsers       *[]int                        `json:"remove_change_users,omitempty"`
	RemoveCorrespondents    *[]int                        `json:"remove_correspondents,omitempty"`
	RemoveCustomFields      *[]int                        `json:"remove_custom_fields,omitempty"`
	RemoveDocumentTypes     *[]int                        `json:"remove_document_types,omitempty"`
	RemoveOwners            *[]int                        `json:"remove_owners,omitempty"`
	RemoveStoragePaths      *[]int                        `json:"remove_storage_paths,omitempty"`
	RemoveTags              *[]int                        `json:"remove_tags,omitempty"`
	RemoveViewGroups        *[]int                        `json:"remove_view_groups,omitempty"`
	RemoveViewUsers         *[]int                        `json:"remove_view_users,omitempty"`
	Type                    *WorkflowActionTypeEnum       `json:"type,omitempty"`
	Webhook                 *WorkflowActionWebhookRequest `json:"webhook"`
}

// WorkflowActionTypeEnum * `1` - Assignment
// * `2` - Removal
// * `3` - Email
// * `4` - Webhook
type WorkflowActionTypeEnum int

// WorkflowActionWebhook defines model for WorkflowActionWebhook.
type WorkflowActionWebhook struct {
	AsJson *bool `json:"as_json,omitempty"`

	// Body The body to send with the webhook URL if parameters not used.
	Body *string `json:"body"`

	// Headers The headers to send with the webhook URL.
	Headers         interface{} `json:"headers"`
	Id              *int        `json:"id"`
	IncludeDocument *bool       `json:"include_document,omitempty"`

	// Params The parameters to send with the webhook URL if body not used.
	Params interface{} `json:"params"`

	// Url The destination URL for the notification.
	Url       string `json:"url"`
	UseParams *bool  `json:"use_params,omitempty"`
}

// WorkflowActionWebhookRequest defines model for WorkflowActionWebhookRequest.
type WorkflowActionWebhookRequest struct {
	AsJson *bool `json:"as_json,omitempty"`

	// Body The body to send with the webhook URL if parameters not used.
	Body *string `json:"body"`

	// Headers The headers to send with the webhook URL.
	Headers         interface{} `json:"headers"`
	Id              *int        `json:"id"`
	IncludeDocument *bool       `json:"include_document,omitempty"`

	// Params The parameters to send with the webhook URL if body not used.
	Params interface{} `json:"params"`

	// Url The destination URL for the notification.
	Url       string `json:"url"`
	UseParams *bool  `json:"use_params,omitempty"`
}

// WorkflowRequest defines model for WorkflowRequest.
type WorkflowRequest struct {
	Actions  []WorkflowActionRequest  `json:"actions"`
	Enabled  *bool                    `json:"enabled,omitempty"`
	Name     string                   `json:"name"`
	Order    *int                     `json:"order,omitempty"`
	Triggers []WorkflowTriggerRequest `json:"triggers"`
}

// WorkflowTrigger defines model for WorkflowTrigger.
type WorkflowTrigger struct {
	// FilterFilename Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
	FilterFilename         *string `json:"filter_filename"`
	FilterHasCorrespondent *int    `json:"filter_has_correspondent"`
	FilterHasDocumentType  *int    `json:"filter_has_document_type"`
	FilterHasTags          *[]int  `json:"filter_has_tags,omitempty"`
	FilterMailrule         *int    `json:"filter_mailrule"`

	// FilterPath Only consume documents with a path that matches this if specified. Wildcards specified as * are allowed. Case insensitive.
	FilterPath              *string                               `json:"filter_path"`
	Id                      *int                                  `json:"id"`
	IsInsensitive           *bool                                 `json:"is_insensitive,omitempty"`
	Match                   *string                               `json:"match,omitempty"`
	MatchingAlgorithm       *WorkflowTriggerMatchingAlgorithmEnum `json:"matching_algorithm,omitempty"`
	ScheduleDateCustomField *int                                  `json:"schedule_date_custom_field"`

	// ScheduleDateField The field to check for a schedule trigger.
	//
	// * `added` - Added
	// * `created` - Created
	// * `modified` - Modified
	// * `custom_field` - Custom Field
	ScheduleDateField *ScheduleDateFieldEnum `json:"schedule_date_field,omitempty"`

	// ScheduleIsRecurring If the schedule should be recurring.
	ScheduleIsRecurring *bool `json:"schedule_is_recurring,omitempty"`

	// ScheduleOffsetDays The number of days to offset the schedule trigger by.
	ScheduleOffsetDays *int64 `json:"schedule_offset_days,omitempty"`

	// ScheduleRecurringIntervalDays The number of days between recurring schedule triggers.
	ScheduleRecurringIntervalDays *int64                  `json:"schedule_recurring_interval_days,omitempty"`
	Sources                       *[]SourcesEnum          `json:"sources,omitempty"`
	Type                          WorkflowTriggerTypeEnum `json:"type"`
}

// WorkflowTriggerMatchingAlgorithmEnum * `0` - None
// * `1` - Any word
// * `2` - All words
// * `3` - Exact match
// * `4` - Regular expression
// * `5` - Fuzzy word
type WorkflowTriggerMatchingAlgorithmEnum int

// WorkflowTriggerRequest defines model for WorkflowTriggerRequest.
type WorkflowTriggerRequest struct {
	// FilterFilename Only consume documents which entirely match this filename if specified. Wildcards such as *.pdf or *invoice* are allowed. Case insensitive.
	FilterFilename         *string `json:"filter_filename"`
	FilterHasCorrespondent *int    `json:"filter_has_correspondent"`
	FilterHasDocumentType  *int    `json:"filter_has_document_type"`
	FilterHasTags          *[]int  `json:"filter_has_tags,omitempty"`
	FilterMailrule         *int    `json:"filter_mailrule"`

	// FilterPath Only consume documents with a path that matches this if specified. Wildcards specified as * are allowed. Case insensitive.
	FilterPath              *string                               `json:"filter_path"`
	Id                      *int                                  `json:"id"`
	IsInsensitive           *bool                                 `json:"is_insensitive,omitempty"`
	Match                   *string                               `json:"match,omitempty"`
	MatchingAlgorithm       *WorkflowTriggerMatchingAlgorithmEnum `json:"matching_algorithm,omitempty"`
	ScheduleDateCustomField *int                                  `json:"schedule_date_custom_field"`

	// ScheduleDateField The field to check for a schedule trigger.
	//
	// * `added` - Added
	// * `created` - Created
	// * `modified` - Modified
	// * `custom_field` - Custom Field
	ScheduleDateField *ScheduleDateFieldEnum `json:"schedule_date_field,omitempty"`

	// ScheduleIsRecurring If the schedule should be recurring.
	ScheduleIsRecurring *bool `json:"schedule_is_recurring,omitempty"`

	// ScheduleOffsetDays The number of days to offset the schedule trigger by.
	ScheduleOffsetDays *int64 `json:"schedule_offset_days,omitempty"`

	// ScheduleRecurringIntervalDays The number of days between recurring schedule triggers.
	ScheduleRecurringIntervalDays *int64                  `json:"schedule_recurring_interval_days,omitempty"`
	Sources                       *[]SourcesEnum          `json:"sources,omitempty"`
	Type                          WorkflowTriggerTypeEnum `json:"type"`
}

// WorkflowTriggerTypeEnum * `1` - Consumption Started
// * `2` - Document Added
// * `3` - Document Updated
// * `4` - Scheduled
type WorkflowTriggerTypeEnum int

// CorrespondentsListParams defines parameters for CorrespondentsList.
type CorrespondentsListParams struct {
	FullPerms *bool `form:"full_perms,omitempty" json:"full_perms,omitempty"`
	Id        *int  `form:"id,omitempty" json:"id,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn            *[]int  `form:"id__in,omitempty" json:"id__in,omitempty"`
	NameIcontains   *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIendswith   *string `form:"name__iendswith,omitempty" json:"name__iendswith,omitempty"`
	NameIexact      *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CorrespondentsRetrieveParams defines parameters for CorrespondentsRetrieve.
type CorrespondentsRetrieveParams struct {
	FullPerms *bool `form:"full_perms,omitempty" json:"full_perms,omitempty"`
}

// CustomFieldsListParams defines parameters for CustomFieldsList.
type CustomFieldsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn            *[]int  `form:"id__in,omitempty" json:"id__in,omitempty"`
	NameIcontains   *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIendswith   *string `form:"name__iendswith,omitempty" json:"name__iendswith,omitempty"`
	NameIexact      *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// DocumentTypesListParams defines parameters for DocumentTypesList.
type DocumentTypesListParams struct {
	FullPerms *bool `form:"full_perms,omitempty" json:"full_perms,omitempty"`
	Id        *int  `form:"id,omitempty" json:"id,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn            *[]int  `form:"id__in,omitempty" json:"id__in,omitempty"`
	NameIcontains   *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIendswith   *string `form:"name__iendswith,omitempty" json:"name__iendswith,omitempty"`
	NameIexact      *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// DocumentTypesRetrieveParams defines parameters for DocumentTypesRetrieve.
type DocumentTypesRetrieveParams struct {
	FullPerms *bool `form:"full_perms,omitempty" json:"full_perms,omitempty"`
}

// DocumentsListParams defines parameters for DocumentsList.
type DocumentsListParams struct {
	AddedDateGt               *openapi_types.Date `form:"added__date__gt,omitempty" json:"added__date__gt,omitempty"`
	AddedDateGte              *openapi_types.Date `form:"added__date__gte,omitempty" json:"added__date__gte,omitempty"`
	AddedDateLt               *openapi_types.Date `form:"added__date__lt,omitempty" json:"added__date__lt,omitempty"`
	AddedDateLte              *openapi_types.Date `form:"added__date__lte,omitempty" json:"added__date__lte,omitempty"`
	AddedDay                  *float32            `form:"added__day,omitempty" json:"added__day,omitempty"`
	AddedGt                   *time.Time          `form:"added__gt,omitempty" json:"added__gt,omitempty"`
	AddedGte                  *time.Time          `form:"added__gte,omitempty" json:"added__gte,omitempty"`
	AddedLt                   *time.Time          `form:"added__lt,omitempty" json:"added__lt,omitempty"`
	AddedLte                  *time.Time          `form:"added__lte,omitempty" json:"added__lte,omitempty"`
	AddedMonth                *float32            `form:"added__month,omitempty" json:"added__month,omitempty"`
	AddedYear                 *float32            `form:"added__year,omitempty" json:"added__year,omitempty"`
	ArchiveSerialNumber       *int                `form:"archive_serial_number,omitempty" json:"archive_serial_number,omitempty"`
	ArchiveSerialNumberGt     *int                `form:"archive_serial_number__gt,omitempty" json:"archive_serial_number__gt,omitempty"`
	ArchiveSerialNumberGte    *int                `form:"archive_serial_number__gte,omitempty" json:"archive_serial_number__gte,omitempty"`
	ArchiveSerialNumberIsnull *bool               `form:"archive_serial_number__isnull,omitempty" json:"archive_serial_number__isnull,omitempty"`
	ArchiveSerialNumberLt     *int                `form:"archive_serial_number__lt,omitempty" json:"archive_serial_number__lt,omitempty"`
	ArchiveSerialNumberLte    *int                `form:"archive_serial_number__lte,omitempty" json:"archive_serial_number__lte,omitempty"`
	ChecksumIcontains         *string             `form:"checksum__icontains,omitempty" json:"checksum__icontains,omitempty"`
	ChecksumIendswith         *string             `form:"checksum__iendswith,omitempty" json:"checksum__iendswith,omitempty"`
	ChecksumIexact            *string             `form:"checksum__iexact,omitempty" json:"checksum__iexact,omitempty"`
	ChecksumIstartswith       *string             `form:"checksum__istartswith,omitempty" json:"checksum__istartswith,omitempty"`
	ContentIcontains          *string             `form:"content__icontains,omitempty" json:"content__icontains,omitempty"`
	ContentIendswith          *string             `form:"content__iendswith,omitempty" json:"content__iendswith,omitempty"`
	ContentIexact             *string             `form:"content__iexact,omitempty" json:"content__iexact,omitempty"`
	ContentIstartswith        *string             `form:"content__istartswith,omitempty" json:"content__istartswith,omitempty"`
	CorrespondentId           *int                `form:"correspondent__id,omitempty" json:"correspondent__id,omitempty"`

	// CorrespondentIdIn Multiple values may be separated by commas.
	CorrespondentIdIn            *[]int              `form:"correspondent__id__in,omitempty" json:"correspondent__id__in,omitempty"`
	CorrespondentIdNone          *int                `form:"correspondent__id__none,omitempty" json:"correspondent__id__none,omitempty"`
	CorrespondentIsnull          *bool               `form:"correspondent__isnull,omitempty" json:"correspondent__isnull,omitempty"`
	CorrespondentNameIcontains   *string             `form:"correspondent__name__icontains,omitempty" json:"correspondent__name__icontains,omitempty"`
	CorrespondentNameIendswith   *string             `form:"correspondent__name__iendswith,omitempty" json:"correspondent__name__iendswith,omitempty"`
	CorrespondentNameIexact      *string             `form:"correspondent__name__iexact,omitempty" json:"correspondent__name__iexact,omitempty"`
	CorrespondentNameIstartswith *string             `form:"correspondent__name__istartswith,omitempty" json:"correspondent__name__istartswith,omitempty"`
	CreatedDateGt                *openapi_types.Date `form:"created__date__gt,omitempty" json:"created__date__gt,omitempty"`
	CreatedDateGte               *openapi_types.Date `form:"created__date__gte,omitempty" json:"created__date__gte,omitempty"`
	CreatedDateLt                *openapi_types.Date `form:"created__date__lt,omitempty" json:"created__date__lt,omitempty"`
	CreatedDateLte               *openapi_types.Date `form:"created__date__lte,omitempty" json:"created__date__lte,omitempty"`
	CreatedDay                   *float32            `form:"created__day,omitempty" json:"created__day,omitempty"`
	CreatedGt                    *openapi_types.Date `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte                   *openapi_types.Date `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt                    *openapi_types.Date `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte                   *openapi_types.Date `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedMonth                 *float32            `form:"created__month,omitempty" json:"created__month,omitempty"`
	CreatedYear                  *float32            `form:"created__year,omitempty" json:"created__year,omitempty"`
	CustomFieldQuery             *string             `form:"custom_field_query,omitempty" json:"custom_field_query,omitempty"`
	CustomFieldsIcontains        *string             `form:"custom_fields__icontains,omitempty" json:"custom_fields__icontains,omitempty"`
	CustomFieldsIdAll            *int                `form:"custom_fields__id__all,omitempty" json:"custom_fields__id__all,omitempty"`
	CustomFieldsIdIn             *int                `form:"custom_fields__id__in,omitempty" json:"custom_fields__id__in,omitempty"`
	CustomFieldsIdNone           *int                `form:"custom_fields__id__none,omitempty" json:"custom_fields__id__none,omitempty"`
	DocumentTypeId               *int                `form:"document_type__id,omitempty" json:"document_type__id,omitempty"`

	// DocumentTypeIdIn Multiple values may be separated by commas.
	DocumentTypeIdIn            *[]int    `form:"document_type__id__in,omitempty" json:"document_type__id__in,omitempty"`
	DocumentTypeIdNone          *int      `form:"document_type__id__none,omitempty" json:"document_type__id__none,omitempty"`
	DocumentTypeIsnull          *bool     `form:"document_type__isnull,omitempty" json:"document_type__isnull,omitempty"`
	DocumentTypeNameIcontains   *string   `form:"document_type__name__icontains,omitempty" json:"document_type__name__icontains,omitempty"`
	DocumentTypeNameIendswith   *string   `form:"document_type__name__iendswith,omitempty" json:"document_type__name__iendswith,omitempty"`
	DocumentTypeNameIexact      *string   `form:"document_type__name__iexact,omitempty" json:"document_type__name__iexact,omitempty"`
	DocumentTypeNameIstartswith *string   `form:"document_type__name__istartswith,omitempty" json:"document_type__name__istartswith,omitempty"`
	Fields                      *[]string `form:"fields,omitempty" json:"fields,omitempty"`
	FullPerms                   *bool     `form:"full_perms,omitempty" json:"full_perms,omitempty"`

	// HasCustomFields Has custom field
	HasCustomFields *bool `form:"has_custom_fields,omitempty" json:"has_custom_fields,omitempty"`
	Id              *int  `form:"id,omitempty" json:"id,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn      *[]int `form:"id__in,omitempty" json:"id__in,omitempty"`
	IsInInbox *bool  `form:"is_in_inbox,omitempty" json:"is_in_inbox,omitempty"`

	// IsTagged Is tagged
	IsTagged        *bool               `form:"is_tagged,omitempty" json:"is_tagged,omitempty"`
	MimeType        *string             `form:"mime_type,omitempty" json:"mime_type,omitempty"`
	ModifiedDateGt  *openapi_types.Date `form:"modified__date__gt,omitempty" json:"modified__date__gt,omitempty"`
	ModifiedDateGte *openapi_types.Date `form:"modified__date__gte,omitempty" json:"modified__date__gte,omitempty"`
	ModifiedDateLt  *openapi_types.Date `form:"modified__date__lt,omitempty" json:"modified__date__lt,omitempty"`
	ModifiedDateLte *openapi_types.Date `form:"modified__date__lte,omitempty" json:"modified__date__lte,omitempty"`
	ModifiedDay     *float32            `form:"modified__day,omitempty" json:"modified__day,omitempty"`
	ModifiedGt      *time.Time          `form:"modified__gt,omitempty" json:"modified__gt,omitempty"`
	ModifiedGte     *time.Time          `form:"modified__gte,omitempty" json:"modified__gte,omitempty"`
	ModifiedLt      *time.Time          `form:"modified__lt,omitempty" json:"modified__lt,omitempty"`
	ModifiedLte     *time.Time          `form:"modified__lte,omitempty" json:"modified__lte,omitempty"`
	ModifiedMonth   *float32            `form:"modified__month,omitempty" json:"modified__month,omitempty"`
	ModifiedYear    *float32            `form:"modified__year,omitempty" json:"modified__year,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering                    *string `form:"ordering,omitempty" json:"ordering,omitempty"`
	OriginalFilenameIcontains   *string `form:"original_filename__icontains,omitempty" json:"original_filename__icontains,omitempty"`
	OriginalFilenameIendswith   *string `form:"original_filename__iendswith,omitempty" json:"original_filename__iendswith,omitempty"`
	OriginalFilenameIexact      *string `form:"original_filename__iexact,omitempty" json:"original_filename__iexact,omitempty"`
	OriginalFilenameIstartswith *string `form:"original_filename__istartswith,omitempty" json:"original_filename__istartswith,omitempty"`
	OwnerId                     *int    `form:"owner__id,omitempty" json:"owner__id,omitempty"`

	// OwnerIdIn Multiple values may be separated by commas.
	OwnerIdIn   *[]int `form:"owner__id__in,omitempty" json:"owner__id__in,omitempty"`
	OwnerIdNone *int   `form:"owner__id__none,omitempty" json:"owner__id__none,omitempty"`
	OwnerIsnull *bool  `form:"owner__isnull,omitempty" json:"owner__isnull,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Query Advanced search query string
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Search A search term.
	Search        *string `form:"search,omitempty" json:"search,omitempty"`
	SharedById    *bool   `form:"shared_by__id,omitempty" json:"shared_by__id,omitempty"`
	StoragePathId *int    `form:"storage_path__id,omitempty" json:"storage_path__id,omitempty"`

	// StoragePathIdIn Multiple values may be separated by commas.
	StoragePathIdIn            *[]int  `form:"storage_path__id__in,omitempty" json:"storage_path__id__in,omitempty"`
	StoragePathIdNone          *int    `form:"storage_path__id__none,omitempty" json:"storage_path__id__none,omitempty"`
	StoragePathIsnull          *bool   `form:"storage_path__isnull,omitempty" json:"storage_path__isnull,omitempty"`
	StoragePathNameIcontains   *string `form:"storage_path__name__icontains,omitempty" json:"storage_path__name__icontains,omitempty"`
	StoragePathNameIendswith   *string `form:"storage_path__name__iendswith,omitempty" json:"storage_path__name__iendswith,omitempty"`
	StoragePathNameIexact      *string `form:"storage_path__name__iexact,omitempty" json:"storage_path__name__iexact,omitempty"`
	StoragePathNameIstartswith *string `form:"storage_path__name__istartswith,omitempty" json:"storage_path__name__istartswith,omitempty"`
	TagsId                     *int    `form:"tags__id,omitempty" json:"tags__id,omitempty"`
	TagsIdAll                  *int    `form:"tags__id__all,omitempty" json:"tags__id__all,omitempty"`
	TagsIdIn                   *int    `form:"tags__id__in,omitempty" json:"tags__id__in,omitempty"`
	TagsIdNone                 *int    `form:"tags__id__none,omitempty" json:"tags__id__none,omitempty"`
	TagsNameIcontains          *string `form:"tags__name__icontains,omitempty" json:"tags__name__icontains,omitempty"`
	TagsNameIendswith          *string `form:"tags__name__iendswith,omitempty" json:"tags__name__iendswith,omitempty"`
	TagsNameIexact             *string `form:"tags__name__iexact,omitempty" json:"tags__name__iexact,omitempty"`
	TagsNameIstartswith        *string `form:"tags__name__istartswith,omitempty" json:"tags__name__istartswith,omitempty"`
	TitleIcontains             *string `form:"title__icontains,omitempty" json:"title__icontains,omitempty"`
	TitleIendswith             *string `form:"title__iendswith,omitempty" json:"title__iendswith,omitempty"`
	TitleIexact                *string `form:"title__iexact,omitempty" json:"title__iexact,omitempty"`
	TitleIstartswith           *string `form:"title__istartswith,omitempty" json:"title__istartswith,omitempty"`
	TitleContent               *string `form:"title_content,omitempty" json:"title_content,omitempty"`
}

// DocumentsRetrieveParams defines parameters for DocumentsRetrieve.
type DocumentsRetrieveParams struct {
	Fields    *[]string `form:"fields,omitempty" json:"fields,omitempty"`
	FullPerms *bool     `form:"full_perms,omitempty" json:"full_perms,omitempty"`
}

// DocumentsDownloadRetrieveParams defines parameters for DocumentsDownloadRetrieve.
type DocumentsDownloadRetrieveParams struct {
	Original *bool `form:"original,omitempty" json:"original,omitempty"`
}

// DocumentsHistoryListParams defines parameters for DocumentsHistoryList.
type DocumentsHistoryListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// DocumentsNotesDestroyParams defines parameters for DocumentsNotesDestroy.
type DocumentsNotesDestroyParams struct {
	// Id Note ID to delete (used only for DELETE requests)
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// DocumentsNotesListParams defines parameters for DocumentsNotesList.
type DocumentsNotesListParams struct {
	// Id Note ID to delete (used only for DELETE requests)
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// DocumentsNotesCreateParams defines parameters for DocumentsNotesCreate.
type DocumentsNotesCreateParams struct {
	// Id Note ID to delete (used only for DELETE requests)
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GroupsListParams defines parameters for GroupsList.
type GroupsListParams struct {
	NameIcontains   *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIendswith   *string `form:"name__iendswith,omitempty" json:"name__iendswith,omitempty"`
	NameIexact      *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// MailAccountsListParams defines parameters for MailAccountsList.
type MailAccountsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// MailRulesListParams defines parameters for MailRulesList.
type MailRulesListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// ProfileDisconnectSocialAccountCreateJSONBody defines parameters for ProfileDisconnectSocialAccountCreate.
type ProfileDisconnectSocialAccountCreateJSONBody struct {
	Id int `json:"id"`
}

// ProfileTotpCreateJSONBody defines parameters for ProfileTotpCreate.
type ProfileTotpCreateJSONBody struct {
	Code   string `json:"code"`
	Secret string `json:"secret"`
}

// SavedViewsListParams defines parameters for SavedViewsList.
type SavedViewsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// SearchRetrieveParams defines parameters for SearchRetrieve.
type SearchRetrieveParams struct {
	// DbOnly Search only the database
	DbOnly *bool `form:"db_only,omitempty" json:"db_only,omitempty"`

	// Query Query to search for
	Query string `form:"query" json:"query"`
}

// SearchAutocompleteListParams defines parameters for SearchAutocompleteList.
type SearchAutocompleteListParams struct {
	// Limit Number of completions to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Term Term to search for
	Term *string `form:"term,omitempty" json:"term,omitempty"`
}

// ShareLinksListParams defines parameters for ShareLinksList.
type ShareLinksListParams struct {
	CreatedDateGt     *openapi_types.Date `form:"created__date__gt,omitempty" json:"created__date__gt,omitempty"`
	CreatedDateGte    *openapi_types.Date `form:"created__date__gte,omitempty" json:"created__date__gte,omitempty"`
	CreatedDateLt     *openapi_types.Date `form:"created__date__lt,omitempty" json:"created__date__lt,omitempty"`
	CreatedDateLte    *openapi_types.Date `form:"created__date__lte,omitempty" json:"created__date__lte,omitempty"`
	CreatedDay        *float32            `form:"created__day,omitempty" json:"created__day,omitempty"`
	CreatedGt         *time.Time          `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte        *time.Time          `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt         *time.Time          `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte        *time.Time          `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedMonth      *float32            `form:"created__month,omitempty" json:"created__month,omitempty"`
	CreatedYear       *float32            `form:"created__year,omitempty" json:"created__year,omitempty"`
	ExpirationDateGt  *openapi_types.Date `form:"expiration__date__gt,omitempty" json:"expiration__date__gt,omitempty"`
	ExpirationDateGte *openapi_types.Date `form:"expiration__date__gte,omitempty" json:"expiration__date__gte,omitempty"`
	ExpirationDateLt  *openapi_types.Date `form:"expiration__date__lt,omitempty" json:"expiration__date__lt,omitempty"`
	ExpirationDateLte *openapi_types.Date `form:"expiration__date__lte,omitempty" json:"expiration__date__lte,omitempty"`
	ExpirationDay     *float32            `form:"expiration__day,omitempty" json:"expiration__day,omitempty"`
	ExpirationGt      *time.Time          `form:"expiration__gt,omitempty" json:"expiration__gt,omitempty"`
	ExpirationGte     *time.Time          `form:"expiration__gte,omitempty" json:"expiration__gte,omitempty"`
	ExpirationLt      *time.Time          `form:"expiration__lt,omitempty" json:"expiration__lt,omitempty"`
	ExpirationLte     *time.Time          `form:"expiration__lte,omitempty" json:"expiration__lte,omitempty"`
	ExpirationMonth   *float32            `form:"expiration__month,omitempty" json:"expiration__month,omitempty"`
	ExpirationYear    *float32            `form:"expiration__year,omitempty" json:"expiration__year,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// StoragePathsListParams defines parameters for StoragePathsList.
type StoragePathsListParams struct {
	FullPerms *bool `form:"full_perms,omitempty" json:"full_perms,omitempty"`
	Id        *int  `form:"id,omitempty" json:"id,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn            *[]int  `form:"id__in,omitempty" json:"id__in,omitempty"`
	NameIcontains   *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIendswith   *string `form:"name__iendswith,omitempty" json:"name__iendswith,omitempty"`
	NameIexact      *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize        *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	PathIcontains   *string `form:"path__icontains,omitempty" json:"path__icontains,omitempty"`
	PathIendswith   *string `form:"path__iendswith,omitempty" json:"path__iendswith,omitempty"`
	PathIexact      *string `form:"path__iexact,omitempty" json:"path__iexact,omitempty"`
	PathIstartswith *string `form:"path__istartswith,omitempty" json:"path__istartswith,omitempty"`
}

// StoragePathsRetrieveParams defines parameters for StoragePathsRetrieve.
type StoragePathsRetrieveParams struct {
	FullPerms *bool `form:"full_perms,omitempty" json:"full_perms,omitempty"`
}

// TagsListParams defines parameters for TagsList.
type TagsListParams struct {
	FullPerms *bool `form:"full_perms,omitempty" json:"full_perms,omitempty"`
	Id        *int  `form:"id,omitempty" json:"id,omitempty"`

	// IdIn Multiple values may be separated by commas.
	IdIn            *[]int  `form:"id__in,omitempty" json:"id__in,omitempty"`
	NameIcontains   *string `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	NameIendswith   *string `form:"name__iendswith,omitempty" json:"name__iendswith,omitempty"`
	NameIexact      *string `form:"name__iexact,omitempty" json:"name__iexact,omitempty"`
	NameIstartswith *string `form:"name__istartswith,omitempty" json:"name__istartswith,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// TagsRetrieveParams defines parameters for TagsRetrieve.
type TagsRetrieveParams struct {
	FullPerms *bool `form:"full_perms,omitempty" json:"full_perms,omitempty"`
}

// TasksListParams defines parameters for TasksList.
type TasksListParams struct {
	// Acknowledged Acknowledged
	Acknowledged *bool `form:"acknowledged,omitempty" json:"acknowledged,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Status Current state of the task being run
	//
	// * `FAILURE` - FAILURE
	// * `PENDING` - PENDING
	// * `RECEIVED` - RECEIVED
	// * `RETRY` - RETRY
	// * `REVOKED` - REVOKED
	// * `STARTED` - STARTED
	// * `SUCCESS` - SUCCESS
	Status *TasksListParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// TaskId Filter tasks by Celery UUID
	TaskId *string `form:"task_id,omitempty" json:"task_id,omitempty"`

	// TaskName Name of the task that was run
	//
	// * `consume_file` - Consume File
	// * `train_classifier` - Train Classifier
	// * `check_sanity` - Check Sanity
	// * `index_optimize` - Index Optimize
	TaskName *TasksListParamsTaskName `form:"task_name,omitempty" json:"task_name,omitempty"`

	// Type The type of task that was run
	//
	// * `auto_task` - Auto Task
	// * `scheduled_task` - Scheduled Task
	// * `manual_task` - Manual Task
	Type *TasksListParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// TasksListParamsStatus defines parameters for TasksList.
type TasksListParamsStatus string

// TasksListParamsTaskName defines parameters for TasksList.
type TasksListParamsTaskName string

// TasksListParamsType defines parameters for TasksList.
type TasksListParamsType string

// AcknowledgeTasksJSONBody defines parameters for AcknowledgeTasks.
type AcknowledgeTasksJSONBody struct {
	Tasks []int `json:"tasks"`
}

// AcknowledgeTasksParams defines parameters for AcknowledgeTasks.
type AcknowledgeTasksParams struct {
	// TaskId Filter tasks by Celery UUID
	TaskId *string `form:"task_id,omitempty" json:"task_id,omitempty"`
}

// TasksRunCreateParams defines parameters for TasksRunCreate.
type TasksRunCreateParams struct {
	// TaskId Filter tasks by Celery UUID
	TaskId *string `form:"task_id,omitempty" json:"task_id,omitempty"`
}

// TasksRetrieveParams defines parameters for TasksRetrieve.
type TasksRetrieveParams struct {
	// TaskId Filter tasks by Celery UUID
	TaskId *string `form:"task_id,omitempty" json:"task_id,omitempty"`
}

// TrashListParams defines parameters for TrashList.
type TrashListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// UsersListParams defines parameters for UsersList.
type UsersListParams struct {
	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize            *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	UsernameIcontains   *string `form:"username__icontains,omitempty" json:"username__icontains,omitempty"`
	UsernameIendswith   *string `form:"username__iendswith,omitempty" json:"username__iendswith,omitempty"`
	UsernameIexact      *string `form:"username__iexact,omitempty" json:"username__iexact,omitempty"`
	UsernameIstartswith *string `form:"username__istartswith,omitempty" json:"username__istartswith,omitempty"`
}

// WorkflowActionsListParams defines parameters for WorkflowActionsList.
type WorkflowActionsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// WorkflowTriggersListParams defines parameters for WorkflowTriggersList.
type WorkflowTriggersListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// WorkflowsListParams defines parameters for WorkflowsList.
type WorkflowsListParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// BulkEditObjectsJSONRequestBody defines body for BulkEditObjects for application/json ContentType.
type BulkEditObjectsJSONRequestBody = BulkEditObjectsRequest

// ConfigPartialUpdateJSONRequestBody defines body for ConfigPartialUpdate for application/json ContentType.
type ConfigPartialUpdateJSONRequestBody = PatchedApplicationConfigurationRequest

// ConfigPartialUpdateFormdataRequestBody defines body for ConfigPartialUpdate for application/x-www-form-urlencoded ContentType.
type ConfigPartialUpdateFormdataRequestBody = PatchedApplicationConfigurationRequest

// ConfigPartialUpdateMultipartRequestBody defines body for ConfigPartialUpdate for multipart/form-data ContentType.
type ConfigPartialUpdateMultipartRequestBody = PatchedApplicationConfigurationRequest

// ConfigUpdateJSONRequestBody defines body for ConfigUpdate for application/json ContentType.
type ConfigUpdateJSONRequestBody = ApplicationConfigurationRequest

// ConfigUpdateFormdataRequestBody defines body for ConfigUpdate for application/x-www-form-urlencoded ContentType.
type ConfigUpdateFormdataRequestBody = ApplicationConfigurationRequest

// ConfigUpdateMultipartRequestBody defines body for ConfigUpdate for multipart/form-data ContentType.
type ConfigUpdateMultipartRequestBody = ApplicationConfigurationRequest

// CorrespondentsCreateJSONRequestBody defines body for CorrespondentsCreate for application/json ContentType.
type CorrespondentsCreateJSONRequestBody = CorrespondentRequest

// CorrespondentsCreateFormdataRequestBody defines body for CorrespondentsCreate for application/x-www-form-urlencoded ContentType.
type CorrespondentsCreateFormdataRequestBody = CorrespondentRequest

// CorrespondentsCreateMultipartRequestBody defines body for CorrespondentsCreate for multipart/form-data ContentType.
type CorrespondentsCreateMultipartRequestBody = CorrespondentRequest

// CorrespondentsPartialUpdateJSONRequestBody defines body for CorrespondentsPartialUpdate for application/json ContentType.
type CorrespondentsPartialUpdateJSONRequestBody = PatchedCorrespondentRequest

// CorrespondentsPartialUpdateFormdataRequestBody defines body for CorrespondentsPartialUpdate for application/x-www-form-urlencoded ContentType.
type CorrespondentsPartialUpdateFormdataRequestBody = PatchedCorrespondentRequest

// CorrespondentsPartialUpdateMultipartRequestBody defines body for CorrespondentsPartialUpdate for multipart/form-data ContentType.
type CorrespondentsPartialUpdateMultipartRequestBody = PatchedCorrespondentRequest

// CorrespondentsUpdateJSONRequestBody defines body for CorrespondentsUpdate for application/json ContentType.
type CorrespondentsUpdateJSONRequestBody = CorrespondentRequest

// CorrespondentsUpdateFormdataRequestBody defines body for CorrespondentsUpdate for application/x-www-form-urlencoded ContentType.
type CorrespondentsUpdateFormdataRequestBody = CorrespondentRequest

// CorrespondentsUpdateMultipartRequestBody defines body for CorrespondentsUpdate for multipart/form-data ContentType.
type CorrespondentsUpdateMultipartRequestBody = CorrespondentRequest

// CustomFieldsCreateJSONRequestBody defines body for CustomFieldsCreate for application/json ContentType.
type CustomFieldsCreateJSONRequestBody = CustomFieldRequest

// CustomFieldsCreateFormdataRequestBody defines body for CustomFieldsCreate for application/x-www-form-urlencoded ContentType.
type CustomFieldsCreateFormdataRequestBody = CustomFieldRequest

// CustomFieldsCreateMultipartRequestBody defines body for CustomFieldsCreate for multipart/form-data ContentType.
type CustomFieldsCreateMultipartRequestBody = CustomFieldRequest

// CustomFieldsPartialUpdateJSONRequestBody defines body for CustomFieldsPartialUpdate for application/json ContentType.
type CustomFieldsPartialUpdateJSONRequestBody = PatchedCustomFieldRequest

// CustomFieldsPartialUpdateFormdataRequestBody defines body for CustomFieldsPartialUpdate for application/x-www-form-urlencoded ContentType.
type CustomFieldsPartialUpdateFormdataRequestBody = PatchedCustomFieldRequest

// CustomFieldsPartialUpdateMultipartRequestBody defines body for CustomFieldsPartialUpdate for multipart/form-data ContentType.
type CustomFieldsPartialUpdateMultipartRequestBody = PatchedCustomFieldRequest

// CustomFieldsUpdateJSONRequestBody defines body for CustomFieldsUpdate for application/json ContentType.
type CustomFieldsUpdateJSONRequestBody = CustomFieldRequest

// CustomFieldsUpdateFormdataRequestBody defines body for CustomFieldsUpdate for application/x-www-form-urlencoded ContentType.
type CustomFieldsUpdateFormdataRequestBody = CustomFieldRequest

// CustomFieldsUpdateMultipartRequestBody defines body for CustomFieldsUpdate for multipart/form-data ContentType.
type CustomFieldsUpdateMultipartRequestBody = CustomFieldRequest

// DocumentTypesCreateJSONRequestBody defines body for DocumentTypesCreate for application/json ContentType.
type DocumentTypesCreateJSONRequestBody = DocumentTypeRequest

// DocumentTypesCreateFormdataRequestBody defines body for DocumentTypesCreate for application/x-www-form-urlencoded ContentType.
type DocumentTypesCreateFormdataRequestBody = DocumentTypeRequest

// DocumentTypesCreateMultipartRequestBody defines body for DocumentTypesCreate for multipart/form-data ContentType.
type DocumentTypesCreateMultipartRequestBody = DocumentTypeRequest

// DocumentTypesPartialUpdateJSONRequestBody defines body for DocumentTypesPartialUpdate for application/json ContentType.
type DocumentTypesPartialUpdateJSONRequestBody = PatchedDocumentTypeRequest

// DocumentTypesPartialUpdateFormdataRequestBody defines body for DocumentTypesPartialUpdate for application/x-www-form-urlencoded ContentType.
type DocumentTypesPartialUpdateFormdataRequestBody = PatchedDocumentTypeRequest

// DocumentTypesPartialUpdateMultipartRequestBody defines body for DocumentTypesPartialUpdate for multipart/form-data ContentType.
type DocumentTypesPartialUpdateMultipartRequestBody = PatchedDocumentTypeRequest

// DocumentTypesUpdateJSONRequestBody defines body for DocumentTypesUpdate for application/json ContentType.
type DocumentTypesUpdateJSONRequestBody = DocumentTypeRequest

// DocumentTypesUpdateFormdataRequestBody defines body for DocumentTypesUpdate for application/x-www-form-urlencoded ContentType.
type DocumentTypesUpdateFormdataRequestBody = DocumentTypeRequest

// DocumentTypesUpdateMultipartRequestBody defines body for DocumentTypesUpdate for multipart/form-data ContentType.
type DocumentTypesUpdateMultipartRequestBody = DocumentTypeRequest

// DocumentsBulkDownloadCreateJSONRequestBody defines body for DocumentsBulkDownloadCreate for application/json ContentType.
type DocumentsBulkDownloadCreateJSONRequestBody = BulkDownloadRequest

// BulkEditJSONRequestBody defines body for BulkEdit for application/json ContentType.
type BulkEditJSONRequestBody = BulkEditRequest

// DocumentsPostDocumentCreateMultipartRequestBody defines body for DocumentsPostDocumentCreate for multipart/form-data ContentType.
type DocumentsPostDocumentCreateMultipartRequestBody = PostDocumentRequest

// DocumentsSelectionDataCreateJSONRequestBody defines body for DocumentsSelectionDataCreate for application/json ContentType.
type DocumentsSelectionDataCreateJSONRequestBody = DocumentListRequest

// DocumentsSelectionDataCreateMultipartRequestBody defines body for DocumentsSelectionDataCreate for multipart/form-data ContentType.
type DocumentsSelectionDataCreateMultipartRequestBody = DocumentListRequest

// DocumentsPartialUpdateJSONRequestBody defines body for DocumentsPartialUpdate for application/json ContentType.
type DocumentsPartialUpdateJSONRequestBody = PatchedDocumentRequest

// DocumentsPartialUpdateFormdataRequestBody defines body for DocumentsPartialUpdate for application/x-www-form-urlencoded ContentType.
type DocumentsPartialUpdateFormdataRequestBody = PatchedDocumentRequest

// DocumentsPartialUpdateMultipartRequestBody defines body for DocumentsPartialUpdate for multipart/form-data ContentType.
type DocumentsPartialUpdateMultipartRequestBody = PatchedDocumentRequest

// DocumentsUpdateJSONRequestBody defines body for DocumentsUpdate for application/json ContentType.
type DocumentsUpdateJSONRequestBody = DocumentRequest

// DocumentsUpdateFormdataRequestBody defines body for DocumentsUpdate for application/x-www-form-urlencoded ContentType.
type DocumentsUpdateFormdataRequestBody = DocumentRequest

// DocumentsUpdateMultipartRequestBody defines body for DocumentsUpdate for multipart/form-data ContentType.
type DocumentsUpdateMultipartRequestBody = DocumentRequest

// DocumentsEmailCreateJSONRequestBody defines body for DocumentsEmailCreate for application/json ContentType.
type DocumentsEmailCreateJSONRequestBody = EmailRequestRequest

// DocumentsEmailCreateFormdataRequestBody defines body for DocumentsEmailCreate for application/x-www-form-urlencoded ContentType.
type DocumentsEmailCreateFormdataRequestBody = EmailRequestRequest

// DocumentsEmailCreateMultipartRequestBody defines body for DocumentsEmailCreate for multipart/form-data ContentType.
type DocumentsEmailCreateMultipartRequestBody = EmailRequestRequest

// DocumentsNotesCreateJSONRequestBody defines body for DocumentsNotesCreate for application/json ContentType.
type DocumentsNotesCreateJSONRequestBody = NoteCreateRequestRequest

// DocumentsNotesCreateFormdataRequestBody defines body for DocumentsNotesCreate for application/x-www-form-urlencoded ContentType.
type DocumentsNotesCreateFormdataRequestBody = NoteCreateRequestRequest

// DocumentsNotesCreateMultipartRequestBody defines body for DocumentsNotesCreate for multipart/form-data ContentType.
type DocumentsNotesCreateMultipartRequestBody = NoteCreateRequestRequest

// GroupsCreateJSONRequestBody defines body for GroupsCreate for application/json ContentType.
type GroupsCreateJSONRequestBody = GroupRequest

// GroupsCreateFormdataRequestBody defines body for GroupsCreate for application/x-www-form-urlencoded ContentType.
type GroupsCreateFormdataRequestBody = GroupRequest

// GroupsCreateMultipartRequestBody defines body for GroupsCreate for multipart/form-data ContentType.
type GroupsCreateMultipartRequestBody = GroupRequest

// GroupsPartialUpdateJSONRequestBody defines body for GroupsPartialUpdate for application/json ContentType.
type GroupsPartialUpdateJSONRequestBody = PatchedGroupRequest

// GroupsPartialUpdateFormdataRequestBody defines body for GroupsPartialUpdate for application/x-www-form-urlencoded ContentType.
type GroupsPartialUpdateFormdataRequestBody = PatchedGroupRequest

// GroupsPartialUpdateMultipartRequestBody defines body for GroupsPartialUpdate for multipart/form-data ContentType.
type GroupsPartialUpdateMultipartRequestBody = PatchedGroupRequest

// GroupsUpdateJSONRequestBody defines body for GroupsUpdate for application/json ContentType.
type GroupsUpdateJSONRequestBody = GroupRequest

// GroupsUpdateFormdataRequestBody defines body for GroupsUpdate for application/x-www-form-urlencoded ContentType.
type GroupsUpdateFormdataRequestBody = GroupRequest

// GroupsUpdateMultipartRequestBody defines body for GroupsUpdate for multipart/form-data ContentType.
type GroupsUpdateMultipartRequestBody = GroupRequest

// MailAccountsCreateJSONRequestBody defines body for MailAccountsCreate for application/json ContentType.
type MailAccountsCreateJSONRequestBody = MailAccountRequest

// MailAccountsCreateFormdataRequestBody defines body for MailAccountsCreate for application/x-www-form-urlencoded ContentType.
type MailAccountsCreateFormdataRequestBody = MailAccountRequest

// MailAccountsCreateMultipartRequestBody defines body for MailAccountsCreate for multipart/form-data ContentType.
type MailAccountsCreateMultipartRequestBody = MailAccountRequest

// MailAccountTestJSONRequestBody defines body for MailAccountTest for application/json ContentType.
type MailAccountTestJSONRequestBody = MailAccountRequest

// MailAccountTestFormdataRequestBody defines body for MailAccountTest for application/x-www-form-urlencoded ContentType.
type MailAccountTestFormdataRequestBody = MailAccountRequest

// MailAccountTestMultipartRequestBody defines body for MailAccountTest for multipart/form-data ContentType.
type MailAccountTestMultipartRequestBody = MailAccountRequest

// MailAccountsPartialUpdateJSONRequestBody defines body for MailAccountsPartialUpdate for application/json ContentType.
type MailAccountsPartialUpdateJSONRequestBody = PatchedMailAccountRequest

// MailAccountsPartialUpdateFormdataRequestBody defines body for MailAccountsPartialUpdate for application/x-www-form-urlencoded ContentType.
type MailAccountsPartialUpdateFormdataRequestBody = PatchedMailAccountRequest

// MailAccountsPartialUpdateMultipartRequestBody defines body for MailAccountsPartialUpdate for multipart/form-data ContentType.
type MailAccountsPartialUpdateMultipartRequestBody = PatchedMailAccountRequest

// MailAccountsUpdateJSONRequestBody defines body for MailAccountsUpdate for application/json ContentType.
type MailAccountsUpdateJSONRequestBody = MailAccountRequest

// MailAccountsUpdateFormdataRequestBody defines body for MailAccountsUpdate for application/x-www-form-urlencoded ContentType.
type MailAccountsUpdateFormdataRequestBody = MailAccountRequest

// MailAccountsUpdateMultipartRequestBody defines body for MailAccountsUpdate for multipart/form-data ContentType.
type MailAccountsUpdateMultipartRequestBody = MailAccountRequest

// MailAccountProcessJSONRequestBody defines body for MailAccountProcess for application/json ContentType.
type MailAccountProcessJSONRequestBody = MailAccountRequest

// MailAccountProcessFormdataRequestBody defines body for MailAccountProcess for application/x-www-form-urlencoded ContentType.
type MailAccountProcessFormdataRequestBody = MailAccountRequest

// MailAccountProcessMultipartRequestBody defines body for MailAccountProcess for multipart/form-data ContentType.
type MailAccountProcessMultipartRequestBody = MailAccountRequest

// MailRulesCreateJSONRequestBody defines body for MailRulesCreate for application/json ContentType.
type MailRulesCreateJSONRequestBody = MailRuleRequest

// MailRulesCreateFormdataRequestBody defines body for MailRulesCreate for application/x-www-form-urlencoded ContentType.
type MailRulesCreateFormdataRequestBody = MailRuleRequest

// MailRulesCreateMultipartRequestBody defines body for MailRulesCreate for multipart/form-data ContentType.
type MailRulesCreateMultipartRequestBody = MailRuleRequest

// MailRulesPartialUpdateJSONRequestBody defines body for MailRulesPartialUpdate for application/json ContentType.
type MailRulesPartialUpdateJSONRequestBody = PatchedMailRuleRequest

// MailRulesPartialUpdateFormdataRequestBody defines body for MailRulesPartialUpdate for application/x-www-form-urlencoded ContentType.
type MailRulesPartialUpdateFormdataRequestBody = PatchedMailRuleRequest

// MailRulesPartialUpdateMultipartRequestBody defines body for MailRulesPartialUpdate for multipart/form-data ContentType.
type MailRulesPartialUpdateMultipartRequestBody = PatchedMailRuleRequest

// MailRulesUpdateJSONRequestBody defines body for MailRulesUpdate for application/json ContentType.
type MailRulesUpdateJSONRequestBody = MailRuleRequest

// MailRulesUpdateFormdataRequestBody defines body for MailRulesUpdate for application/x-www-form-urlencoded ContentType.
type MailRulesUpdateFormdataRequestBody = MailRuleRequest

// MailRulesUpdateMultipartRequestBody defines body for MailRulesUpdate for multipart/form-data ContentType.
type MailRulesUpdateMultipartRequestBody = MailRuleRequest

// ProfilePartialUpdateJSONRequestBody defines body for ProfilePartialUpdate for application/json ContentType.
type ProfilePartialUpdateJSONRequestBody = PatchedProfileRequest

// ProfilePartialUpdateFormdataRequestBody defines body for ProfilePartialUpdate for application/x-www-form-urlencoded ContentType.
type ProfilePartialUpdateFormdataRequestBody = PatchedProfileRequest

// ProfilePartialUpdateMultipartRequestBody defines body for ProfilePartialUpdate for multipart/form-data ContentType.
type ProfilePartialUpdateMultipartRequestBody = PatchedProfileRequest

// ProfileDisconnectSocialAccountCreateJSONRequestBody defines body for ProfileDisconnectSocialAccountCreate for application/json ContentType.
type ProfileDisconnectSocialAccountCreateJSONRequestBody ProfileDisconnectSocialAccountCreateJSONBody

// ProfileTotpCreateJSONRequestBody defines body for ProfileTotpCreate for application/json ContentType.
type ProfileTotpCreateJSONRequestBody ProfileTotpCreateJSONBody

// SavedViewsCreateJSONRequestBody defines body for SavedViewsCreate for application/json ContentType.
type SavedViewsCreateJSONRequestBody = SavedViewRequest

// SavedViewsCreateFormdataRequestBody defines body for SavedViewsCreate for application/x-www-form-urlencoded ContentType.
type SavedViewsCreateFormdataRequestBody = SavedViewRequest

// SavedViewsCreateMultipartRequestBody defines body for SavedViewsCreate for multipart/form-data ContentType.
type SavedViewsCreateMultipartRequestBody = SavedViewRequest

// SavedViewsPartialUpdateJSONRequestBody defines body for SavedViewsPartialUpdate for application/json ContentType.
type SavedViewsPartialUpdateJSONRequestBody = PatchedSavedViewRequest

// SavedViewsPartialUpdateFormdataRequestBody defines body for SavedViewsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SavedViewsPartialUpdateFormdataRequestBody = PatchedSavedViewRequest

// SavedViewsPartialUpdateMultipartRequestBody defines body for SavedViewsPartialUpdate for multipart/form-data ContentType.
type SavedViewsPartialUpdateMultipartRequestBody = PatchedSavedViewRequest

// SavedViewsUpdateJSONRequestBody defines body for SavedViewsUpdate for application/json ContentType.
type SavedViewsUpdateJSONRequestBody = SavedViewRequest

// SavedViewsUpdateFormdataRequestBody defines body for SavedViewsUpdate for application/x-www-form-urlencoded ContentType.
type SavedViewsUpdateFormdataRequestBody = SavedViewRequest

// SavedViewsUpdateMultipartRequestBody defines body for SavedViewsUpdate for multipart/form-data ContentType.
type SavedViewsUpdateMultipartRequestBody = SavedViewRequest

// ShareLinksCreateJSONRequestBody defines body for ShareLinksCreate for application/json ContentType.
type ShareLinksCreateJSONRequestBody = ShareLinkRequest

// ShareLinksCreateFormdataRequestBody defines body for ShareLinksCreate for application/x-www-form-urlencoded ContentType.
type ShareLinksCreateFormdataRequestBody = ShareLinkRequest

// ShareLinksCreateMultipartRequestBody defines body for ShareLinksCreate for multipart/form-data ContentType.
type ShareLinksCreateMultipartRequestBody = ShareLinkRequest

// ShareLinksPartialUpdateJSONRequestBody defines body for ShareLinksPartialUpdate for application/json ContentType.
type ShareLinksPartialUpdateJSONRequestBody = PatchedShareLinkRequest

// ShareLinksPartialUpdateFormdataRequestBody defines body for ShareLinksPartialUpdate for application/x-www-form-urlencoded ContentType.
type ShareLinksPartialUpdateFormdataRequestBody = PatchedShareLinkRequest

// ShareLinksPartialUpdateMultipartRequestBody defines body for ShareLinksPartialUpdate for multipart/form-data ContentType.
type ShareLinksPartialUpdateMultipartRequestBody = PatchedShareLinkRequest

// ShareLinksUpdateJSONRequestBody defines body for ShareLinksUpdate for application/json ContentType.
type ShareLinksUpdateJSONRequestBody = ShareLinkRequest

// ShareLinksUpdateFormdataRequestBody defines body for ShareLinksUpdate for application/x-www-form-urlencoded ContentType.
type ShareLinksUpdateFormdataRequestBody = ShareLinkRequest

// ShareLinksUpdateMultipartRequestBody defines body for ShareLinksUpdate for multipart/form-data ContentType.
type ShareLinksUpdateMultipartRequestBody = ShareLinkRequest

// StoragePathsCreateJSONRequestBody defines body for StoragePathsCreate for application/json ContentType.
type StoragePathsCreateJSONRequestBody = StoragePathRequest

// StoragePathsCreateFormdataRequestBody defines body for StoragePathsCreate for application/x-www-form-urlencoded ContentType.
type StoragePathsCreateFormdataRequestBody = StoragePathRequest

// StoragePathsCreateMultipartRequestBody defines body for StoragePathsCreate for multipart/form-data ContentType.
type StoragePathsCreateMultipartRequestBody = StoragePathRequest

// StoragePathsTestCreateJSONRequestBody defines body for StoragePathsTestCreate for application/json ContentType.
type StoragePathsTestCreateJSONRequestBody = StoragePathRequest

// StoragePathsTestCreateFormdataRequestBody defines body for StoragePathsTestCreate for application/x-www-form-urlencoded ContentType.
type StoragePathsTestCreateFormdataRequestBody = StoragePathRequest

// StoragePathsTestCreateMultipartRequestBody defines body for StoragePathsTestCreate for multipart/form-data ContentType.
type StoragePathsTestCreateMultipartRequestBody = StoragePathRequest

// StoragePathsPartialUpdateJSONRequestBody defines body for StoragePathsPartialUpdate for application/json ContentType.
type StoragePathsPartialUpdateJSONRequestBody = PatchedStoragePathRequest

// StoragePathsPartialUpdateFormdataRequestBody defines body for StoragePathsPartialUpdate for application/x-www-form-urlencoded ContentType.
type StoragePathsPartialUpdateFormdataRequestBody = PatchedStoragePathRequest

// StoragePathsPartialUpdateMultipartRequestBody defines body for StoragePathsPartialUpdate for multipart/form-data ContentType.
type StoragePathsPartialUpdateMultipartRequestBody = PatchedStoragePathRequest

// StoragePathsUpdateJSONRequestBody defines body for StoragePathsUpdate for application/json ContentType.
type StoragePathsUpdateJSONRequestBody = StoragePathRequest

// StoragePathsUpdateFormdataRequestBody defines body for StoragePathsUpdate for application/x-www-form-urlencoded ContentType.
type StoragePathsUpdateFormdataRequestBody = StoragePathRequest

// StoragePathsUpdateMultipartRequestBody defines body for StoragePathsUpdate for multipart/form-data ContentType.
type StoragePathsUpdateMultipartRequestBody = StoragePathRequest

// TagsCreateJSONRequestBody defines body for TagsCreate for application/json ContentType.
type TagsCreateJSONRequestBody = TagRequest

// TagsCreateFormdataRequestBody defines body for TagsCreate for application/x-www-form-urlencoded ContentType.
type TagsCreateFormdataRequestBody = TagRequest

// TagsCreateMultipartRequestBody defines body for TagsCreate for multipart/form-data ContentType.
type TagsCreateMultipartRequestBody = TagRequest

// TagsPartialUpdateJSONRequestBody defines body for TagsPartialUpdate for application/json ContentType.
type TagsPartialUpdateJSONRequestBody = PatchedTagRequest

// TagsPartialUpdateFormdataRequestBody defines body for TagsPartialUpdate for application/x-www-form-urlencoded ContentType.
type TagsPartialUpdateFormdataRequestBody = PatchedTagRequest

// TagsPartialUpdateMultipartRequestBody defines body for TagsPartialUpdate for multipart/form-data ContentType.
type TagsPartialUpdateMultipartRequestBody = PatchedTagRequest

// TagsUpdateJSONRequestBody defines body for TagsUpdate for application/json ContentType.
type TagsUpdateJSONRequestBody = TagRequest

// TagsUpdateFormdataRequestBody defines body for TagsUpdate for application/x-www-form-urlencoded ContentType.
type TagsUpdateFormdataRequestBody = TagRequest

// TagsUpdateMultipartRequestBody defines body for TagsUpdate for multipart/form-data ContentType.
type TagsUpdateMultipartRequestBody = TagRequest

// AcknowledgeTasksJSONRequestBody defines body for AcknowledgeTasks for application/json ContentType.
type AcknowledgeTasksJSONRequestBody AcknowledgeTasksJSONBody

// TasksRunCreateJSONRequestBody defines body for TasksRunCreate for application/json ContentType.
type TasksRunCreateJSONRequestBody = TasksViewRequest

// TasksRunCreateFormdataRequestBody defines body for TasksRunCreate for application/x-www-form-urlencoded ContentType.
type TasksRunCreateFormdataRequestBody = TasksViewRequest

// TasksRunCreateMultipartRequestBody defines body for TasksRunCreate for multipart/form-data ContentType.
type TasksRunCreateMultipartRequestBody = TasksViewRequest

// TokenCreateJSONRequestBody defines body for TokenCreate for application/json ContentType.
type TokenCreateJSONRequestBody = PaperlessAuthTokenRequest

// TokenCreateFormdataRequestBody defines body for TokenCreate for application/x-www-form-urlencoded ContentType.
type TokenCreateFormdataRequestBody = PaperlessAuthTokenRequest

// TokenCreateMultipartRequestBody defines body for TokenCreate for multipart/form-data ContentType.
type TokenCreateMultipartRequestBody = PaperlessAuthTokenRequest

// TrashCreateJSONRequestBody defines body for TrashCreate for application/json ContentType.
type TrashCreateJSONRequestBody = TrashRequest

// TrashCreateFormdataRequestBody defines body for TrashCreate for application/x-www-form-urlencoded ContentType.
type TrashCreateFormdataRequestBody = TrashRequest

// TrashCreateMultipartRequestBody defines body for TrashCreate for multipart/form-data ContentType.
type TrashCreateMultipartRequestBody = TrashRequest

// UiSettingsCreateJSONRequestBody defines body for UiSettingsCreate for application/json ContentType.
type UiSettingsCreateJSONRequestBody = UiSettingsViewRequest

// UiSettingsCreateFormdataRequestBody defines body for UiSettingsCreate for application/x-www-form-urlencoded ContentType.
type UiSettingsCreateFormdataRequestBody = UiSettingsViewRequest

// UiSettingsCreateMultipartRequestBody defines body for UiSettingsCreate for multipart/form-data ContentType.
type UiSettingsCreateMultipartRequestBody = UiSettingsViewRequest

// UsersCreateJSONRequestBody defines body for UsersCreate for application/json ContentType.
type UsersCreateJSONRequestBody = UserRequest

// UsersCreateFormdataRequestBody defines body for UsersCreate for application/x-www-form-urlencoded ContentType.
type UsersCreateFormdataRequestBody = UserRequest

// UsersCreateMultipartRequestBody defines body for UsersCreate for multipart/form-data ContentType.
type UsersCreateMultipartRequestBody = UserRequest

// UsersPartialUpdateJSONRequestBody defines body for UsersPartialUpdate for application/json ContentType.
type UsersPartialUpdateJSONRequestBody = PatchedUserRequest

// UsersPartialUpdateFormdataRequestBody defines body for UsersPartialUpdate for application/x-www-form-urlencoded ContentType.
type UsersPartialUpdateFormdataRequestBody = PatchedUserRequest

// UsersPartialUpdateMultipartRequestBody defines body for UsersPartialUpdate for multipart/form-data ContentType.
type UsersPartialUpdateMultipartRequestBody = PatchedUserRequest

// UsersUpdateJSONRequestBody defines body for UsersUpdate for application/json ContentType.
type UsersUpdateJSONRequestBody = UserRequest

// UsersUpdateFormdataRequestBody defines body for UsersUpdate for application/x-www-form-urlencoded ContentType.
type UsersUpdateFormdataRequestBody = UserRequest

// UsersUpdateMultipartRequestBody defines body for UsersUpdate for multipart/form-data ContentType.
type UsersUpdateMultipartRequestBody = UserRequest

// WorkflowActionsCreateJSONRequestBody defines body for WorkflowActionsCreate for application/json ContentType.
type WorkflowActionsCreateJSONRequestBody = WorkflowActionRequest

// WorkflowActionsCreateFormdataRequestBody defines body for WorkflowActionsCreate for application/x-www-form-urlencoded ContentType.
type WorkflowActionsCreateFormdataRequestBody = WorkflowActionRequest

// WorkflowActionsCreateMultipartRequestBody defines body for WorkflowActionsCreate for multipart/form-data ContentType.
type WorkflowActionsCreateMultipartRequestBody = WorkflowActionRequest

// WorkflowActionsPartialUpdateJSONRequestBody defines body for WorkflowActionsPartialUpdate for application/json ContentType.
type WorkflowActionsPartialUpdateJSONRequestBody = PatchedWorkflowActionRequest

// WorkflowActionsPartialUpdateFormdataRequestBody defines body for WorkflowActionsPartialUpdate for application/x-www-form-urlencoded ContentType.
type WorkflowActionsPartialUpdateFormdataRequestBody = PatchedWorkflowActionRequest

// WorkflowActionsPartialUpdateMultipartRequestBody defines body for WorkflowActionsPartialUpdate for multipart/form-data ContentType.
type WorkflowActionsPartialUpdateMultipartRequestBody = PatchedWorkflowActionRequest

// WorkflowActionsUpdateJSONRequestBody defines body for WorkflowActionsUpdate for application/json ContentType.
type WorkflowActionsUpdateJSONRequestBody = WorkflowActionRequest

// WorkflowActionsUpdateFormdataRequestBody defines body for WorkflowActionsUpdate for application/x-www-form-urlencoded ContentType.
type WorkflowActionsUpdateFormdataRequestBody = WorkflowActionRequest

// WorkflowActionsUpdateMultipartRequestBody defines body for WorkflowActionsUpdate for multipart/form-data ContentType.
type WorkflowActionsUpdateMultipartRequestBody = WorkflowActionRequest

// WorkflowTriggersCreateJSONRequestBody defines body for WorkflowTriggersCreate for application/json ContentType.
type WorkflowTriggersCreateJSONRequestBody = WorkflowTriggerRequest

// WorkflowTriggersCreateFormdataRequestBody defines body for WorkflowTriggersCreate for application/x-www-form-urlencoded ContentType.
type WorkflowTriggersCreateFormdataRequestBody = WorkflowTriggerRequest

// WorkflowTriggersCreateMultipartRequestBody defines body for WorkflowTriggersCreate for multipart/form-data ContentType.
type WorkflowTriggersCreateMultipartRequestBody = WorkflowTriggerRequest

// WorkflowTriggersPartialUpdateJSONRequestBody defines body for WorkflowTriggersPartialUpdate for application/json ContentType.
type WorkflowTriggersPartialUpdateJSONRequestBody = PatchedWorkflowTriggerRequest

// WorkflowTriggersPartialUpdateFormdataRequestBody defines body for WorkflowTriggersPartialUpdate for application/x-www-form-urlencoded ContentType.
type WorkflowTriggersPartialUpdateFormdataRequestBody = PatchedWorkflowTriggerRequest

// WorkflowTriggersPartialUpdateMultipartRequestBody defines body for WorkflowTriggersPartialUpdate for multipart/form-data ContentType.
type WorkflowTriggersPartialUpdateMultipartRequestBody = PatchedWorkflowTriggerRequest

// WorkflowTriggersUpdateJSONRequestBody defines body for WorkflowTriggersUpdate for application/json ContentType.
type WorkflowTriggersUpdateJSONRequestBody = WorkflowTriggerRequest

// WorkflowTriggersUpdateFormdataRequestBody defines body for WorkflowTriggersUpdate for application/x-www-form-urlencoded ContentType.
type WorkflowTriggersUpdateFormdataRequestBody = WorkflowTriggerRequest

// WorkflowTriggersUpdateMultipartRequestBody defines body for WorkflowTriggersUpdate for multipart/form-data ContentType.
type WorkflowTriggersUpdateMultipartRequestBody = WorkflowTriggerRequest

// WorkflowsCreateJSONRequestBody defines body for WorkflowsCreate for application/json ContentType.
type WorkflowsCreateJSONRequestBody = WorkflowRequest

// WorkflowsCreateFormdataRequestBody defines body for WorkflowsCreate for application/x-www-form-urlencoded ContentType.
type WorkflowsCreateFormdataRequestBody = WorkflowRequest

// WorkflowsCreateMultipartRequestBody defines body for WorkflowsCreate for multipart/form-data ContentType.
type WorkflowsCreateMultipartRequestBody = WorkflowRequest

// WorkflowsPartialUpdateJSONRequestBody defines body for WorkflowsPartialUpdate for application/json ContentType.
type WorkflowsPartialUpdateJSONRequestBody = PatchedWorkflowRequest

// WorkflowsPartialUpdateFormdataRequestBody defines body for WorkflowsPartialUpdate for application/x-www-form-urlencoded ContentType.
type WorkflowsPartialUpdateFormdataRequestBody = PatchedWorkflowRequest

// WorkflowsPartialUpdateMultipartRequestBody defines body for WorkflowsPartialUpdate for multipart/form-data ContentType.
type WorkflowsPartialUpdateMultipartRequestBody = PatchedWorkflowRequest

// WorkflowsUpdateJSONRequestBody defines body for WorkflowsUpdate for application/json ContentType.
type WorkflowsUpdateJSONRequestBody = WorkflowRequest

// WorkflowsUpdateFormdataRequestBody defines body for WorkflowsUpdate for application/x-www-form-urlencoded ContentType.
type WorkflowsUpdateFormdataRequestBody = WorkflowRequest

// WorkflowsUpdateMultipartRequestBody defines body for WorkflowsUpdate for multipart/form-data ContentType.
type WorkflowsUpdateMultipartRequestBody = WorkflowRequest

// AsColorConversionStrategyEnum returns the union data inside the ApplicationConfiguration_ColorConversionStrategy as a ColorConversionStrategyEnum
func (t ApplicationConfiguration_ColorConversionStrategy) AsColorConversionStrategyEnum() (ColorConversionStrategyEnum, error) {
	var body ColorConversionStrategyEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromColorConversionStrategyEnum overwrites any union data inside the ApplicationConfiguration_ColorConversionStrategy as the provided ColorConversionStrategyEnum
func (t *ApplicationConfiguration_ColorConversionStrategy) FromColorConversionStrategyEnum(v ColorConversionStrategyEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeColorConversionStrategyEnum performs a merge with any union data inside the ApplicationConfiguration_ColorConversionStrategy, using the provided ColorConversionStrategyEnum
func (t *ApplicationConfiguration_ColorConversionStrategy) MergeColorConversionStrategyEnum(v ColorConversionStrategyEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfiguration_ColorConversionStrategy as a BlankEnum
func (t ApplicationConfiguration_ColorConversionStrategy) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfiguration_ColorConversionStrategy as the provided BlankEnum
func (t *ApplicationConfiguration_ColorConversionStrategy) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfiguration_ColorConversionStrategy, using the provided BlankEnum
func (t *ApplicationConfiguration_ColorConversionStrategy) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfiguration_ColorConversionStrategy as a NullEnum
func (t ApplicationConfiguration_ColorConversionStrategy) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfiguration_ColorConversionStrategy as the provided NullEnum
func (t *ApplicationConfiguration_ColorConversionStrategy) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfiguration_ColorConversionStrategy, using the provided NullEnum
func (t *ApplicationConfiguration_ColorConversionStrategy) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfiguration_ColorConversionStrategy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfiguration_ColorConversionStrategy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsModeEnum returns the union data inside the ApplicationConfiguration_Mode as a ModeEnum
func (t ApplicationConfiguration_Mode) AsModeEnum() (ModeEnum, error) {
	var body ModeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModeEnum overwrites any union data inside the ApplicationConfiguration_Mode as the provided ModeEnum
func (t *ApplicationConfiguration_Mode) FromModeEnum(v ModeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModeEnum performs a merge with any union data inside the ApplicationConfiguration_Mode, using the provided ModeEnum
func (t *ApplicationConfiguration_Mode) MergeModeEnum(v ModeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfiguration_Mode as a BlankEnum
func (t ApplicationConfiguration_Mode) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfiguration_Mode as the provided BlankEnum
func (t *ApplicationConfiguration_Mode) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfiguration_Mode, using the provided BlankEnum
func (t *ApplicationConfiguration_Mode) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfiguration_Mode as a NullEnum
func (t ApplicationConfiguration_Mode) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfiguration_Mode as the provided NullEnum
func (t *ApplicationConfiguration_Mode) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfiguration_Mode, using the provided NullEnum
func (t *ApplicationConfiguration_Mode) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfiguration_Mode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfiguration_Mode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOutputTypeEnum returns the union data inside the ApplicationConfiguration_OutputType as a OutputTypeEnum
func (t ApplicationConfiguration_OutputType) AsOutputTypeEnum() (OutputTypeEnum, error) {
	var body OutputTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutputTypeEnum overwrites any union data inside the ApplicationConfiguration_OutputType as the provided OutputTypeEnum
func (t *ApplicationConfiguration_OutputType) FromOutputTypeEnum(v OutputTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutputTypeEnum performs a merge with any union data inside the ApplicationConfiguration_OutputType, using the provided OutputTypeEnum
func (t *ApplicationConfiguration_OutputType) MergeOutputTypeEnum(v OutputTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfiguration_OutputType as a BlankEnum
func (t ApplicationConfiguration_OutputType) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfiguration_OutputType as the provided BlankEnum
func (t *ApplicationConfiguration_OutputType) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfiguration_OutputType, using the provided BlankEnum
func (t *ApplicationConfiguration_OutputType) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfiguration_OutputType as a NullEnum
func (t ApplicationConfiguration_OutputType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfiguration_OutputType as the provided NullEnum
func (t *ApplicationConfiguration_OutputType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfiguration_OutputType, using the provided NullEnum
func (t *ApplicationConfiguration_OutputType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfiguration_OutputType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfiguration_OutputType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSkipArchiveFileEnum returns the union data inside the ApplicationConfiguration_SkipArchiveFile as a SkipArchiveFileEnum
func (t ApplicationConfiguration_SkipArchiveFile) AsSkipArchiveFileEnum() (SkipArchiveFileEnum, error) {
	var body SkipArchiveFileEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSkipArchiveFileEnum overwrites any union data inside the ApplicationConfiguration_SkipArchiveFile as the provided SkipArchiveFileEnum
func (t *ApplicationConfiguration_SkipArchiveFile) FromSkipArchiveFileEnum(v SkipArchiveFileEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSkipArchiveFileEnum performs a merge with any union data inside the ApplicationConfiguration_SkipArchiveFile, using the provided SkipArchiveFileEnum
func (t *ApplicationConfiguration_SkipArchiveFile) MergeSkipArchiveFileEnum(v SkipArchiveFileEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfiguration_SkipArchiveFile as a BlankEnum
func (t ApplicationConfiguration_SkipArchiveFile) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfiguration_SkipArchiveFile as the provided BlankEnum
func (t *ApplicationConfiguration_SkipArchiveFile) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfiguration_SkipArchiveFile, using the provided BlankEnum
func (t *ApplicationConfiguration_SkipArchiveFile) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfiguration_SkipArchiveFile as a NullEnum
func (t ApplicationConfiguration_SkipArchiveFile) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfiguration_SkipArchiveFile as the provided NullEnum
func (t *ApplicationConfiguration_SkipArchiveFile) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfiguration_SkipArchiveFile, using the provided NullEnum
func (t *ApplicationConfiguration_SkipArchiveFile) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfiguration_SkipArchiveFile) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfiguration_SkipArchiveFile) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUnpaperCleanEnum returns the union data inside the ApplicationConfiguration_UnpaperClean as a UnpaperCleanEnum
func (t ApplicationConfiguration_UnpaperClean) AsUnpaperCleanEnum() (UnpaperCleanEnum, error) {
	var body UnpaperCleanEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnpaperCleanEnum overwrites any union data inside the ApplicationConfiguration_UnpaperClean as the provided UnpaperCleanEnum
func (t *ApplicationConfiguration_UnpaperClean) FromUnpaperCleanEnum(v UnpaperCleanEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnpaperCleanEnum performs a merge with any union data inside the ApplicationConfiguration_UnpaperClean, using the provided UnpaperCleanEnum
func (t *ApplicationConfiguration_UnpaperClean) MergeUnpaperCleanEnum(v UnpaperCleanEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfiguration_UnpaperClean as a BlankEnum
func (t ApplicationConfiguration_UnpaperClean) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfiguration_UnpaperClean as the provided BlankEnum
func (t *ApplicationConfiguration_UnpaperClean) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfiguration_UnpaperClean, using the provided BlankEnum
func (t *ApplicationConfiguration_UnpaperClean) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfiguration_UnpaperClean as a NullEnum
func (t ApplicationConfiguration_UnpaperClean) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfiguration_UnpaperClean as the provided NullEnum
func (t *ApplicationConfiguration_UnpaperClean) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfiguration_UnpaperClean, using the provided NullEnum
func (t *ApplicationConfiguration_UnpaperClean) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfiguration_UnpaperClean) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfiguration_UnpaperClean) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsColorConversionStrategyEnum returns the union data inside the ApplicationConfigurationRequest_ColorConversionStrategy as a ColorConversionStrategyEnum
func (t ApplicationConfigurationRequest_ColorConversionStrategy) AsColorConversionStrategyEnum() (ColorConversionStrategyEnum, error) {
	var body ColorConversionStrategyEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromColorConversionStrategyEnum overwrites any union data inside the ApplicationConfigurationRequest_ColorConversionStrategy as the provided ColorConversionStrategyEnum
func (t *ApplicationConfigurationRequest_ColorConversionStrategy) FromColorConversionStrategyEnum(v ColorConversionStrategyEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeColorConversionStrategyEnum performs a merge with any union data inside the ApplicationConfigurationRequest_ColorConversionStrategy, using the provided ColorConversionStrategyEnum
func (t *ApplicationConfigurationRequest_ColorConversionStrategy) MergeColorConversionStrategyEnum(v ColorConversionStrategyEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfigurationRequest_ColorConversionStrategy as a BlankEnum
func (t ApplicationConfigurationRequest_ColorConversionStrategy) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfigurationRequest_ColorConversionStrategy as the provided BlankEnum
func (t *ApplicationConfigurationRequest_ColorConversionStrategy) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfigurationRequest_ColorConversionStrategy, using the provided BlankEnum
func (t *ApplicationConfigurationRequest_ColorConversionStrategy) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfigurationRequest_ColorConversionStrategy as a NullEnum
func (t ApplicationConfigurationRequest_ColorConversionStrategy) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfigurationRequest_ColorConversionStrategy as the provided NullEnum
func (t *ApplicationConfigurationRequest_ColorConversionStrategy) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfigurationRequest_ColorConversionStrategy, using the provided NullEnum
func (t *ApplicationConfigurationRequest_ColorConversionStrategy) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfigurationRequest_ColorConversionStrategy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfigurationRequest_ColorConversionStrategy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsModeEnum returns the union data inside the ApplicationConfigurationRequest_Mode as a ModeEnum
func (t ApplicationConfigurationRequest_Mode) AsModeEnum() (ModeEnum, error) {
	var body ModeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModeEnum overwrites any union data inside the ApplicationConfigurationRequest_Mode as the provided ModeEnum
func (t *ApplicationConfigurationRequest_Mode) FromModeEnum(v ModeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModeEnum performs a merge with any union data inside the ApplicationConfigurationRequest_Mode, using the provided ModeEnum
func (t *ApplicationConfigurationRequest_Mode) MergeModeEnum(v ModeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfigurationRequest_Mode as a BlankEnum
func (t ApplicationConfigurationRequest_Mode) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfigurationRequest_Mode as the provided BlankEnum
func (t *ApplicationConfigurationRequest_Mode) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfigurationRequest_Mode, using the provided BlankEnum
func (t *ApplicationConfigurationRequest_Mode) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfigurationRequest_Mode as a NullEnum
func (t ApplicationConfigurationRequest_Mode) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfigurationRequest_Mode as the provided NullEnum
func (t *ApplicationConfigurationRequest_Mode) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfigurationRequest_Mode, using the provided NullEnum
func (t *ApplicationConfigurationRequest_Mode) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfigurationRequest_Mode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfigurationRequest_Mode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOutputTypeEnum returns the union data inside the ApplicationConfigurationRequest_OutputType as a OutputTypeEnum
func (t ApplicationConfigurationRequest_OutputType) AsOutputTypeEnum() (OutputTypeEnum, error) {
	var body OutputTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutputTypeEnum overwrites any union data inside the ApplicationConfigurationRequest_OutputType as the provided OutputTypeEnum
func (t *ApplicationConfigurationRequest_OutputType) FromOutputTypeEnum(v OutputTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutputTypeEnum performs a merge with any union data inside the ApplicationConfigurationRequest_OutputType, using the provided OutputTypeEnum
func (t *ApplicationConfigurationRequest_OutputType) MergeOutputTypeEnum(v OutputTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfigurationRequest_OutputType as a BlankEnum
func (t ApplicationConfigurationRequest_OutputType) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfigurationRequest_OutputType as the provided BlankEnum
func (t *ApplicationConfigurationRequest_OutputType) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfigurationRequest_OutputType, using the provided BlankEnum
func (t *ApplicationConfigurationRequest_OutputType) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfigurationRequest_OutputType as a NullEnum
func (t ApplicationConfigurationRequest_OutputType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfigurationRequest_OutputType as the provided NullEnum
func (t *ApplicationConfigurationRequest_OutputType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfigurationRequest_OutputType, using the provided NullEnum
func (t *ApplicationConfigurationRequest_OutputType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfigurationRequest_OutputType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfigurationRequest_OutputType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSkipArchiveFileEnum returns the union data inside the ApplicationConfigurationRequest_SkipArchiveFile as a SkipArchiveFileEnum
func (t ApplicationConfigurationRequest_SkipArchiveFile) AsSkipArchiveFileEnum() (SkipArchiveFileEnum, error) {
	var body SkipArchiveFileEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSkipArchiveFileEnum overwrites any union data inside the ApplicationConfigurationRequest_SkipArchiveFile as the provided SkipArchiveFileEnum
func (t *ApplicationConfigurationRequest_SkipArchiveFile) FromSkipArchiveFileEnum(v SkipArchiveFileEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSkipArchiveFileEnum performs a merge with any union data inside the ApplicationConfigurationRequest_SkipArchiveFile, using the provided SkipArchiveFileEnum
func (t *ApplicationConfigurationRequest_SkipArchiveFile) MergeSkipArchiveFileEnum(v SkipArchiveFileEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfigurationRequest_SkipArchiveFile as a BlankEnum
func (t ApplicationConfigurationRequest_SkipArchiveFile) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfigurationRequest_SkipArchiveFile as the provided BlankEnum
func (t *ApplicationConfigurationRequest_SkipArchiveFile) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfigurationRequest_SkipArchiveFile, using the provided BlankEnum
func (t *ApplicationConfigurationRequest_SkipArchiveFile) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfigurationRequest_SkipArchiveFile as a NullEnum
func (t ApplicationConfigurationRequest_SkipArchiveFile) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfigurationRequest_SkipArchiveFile as the provided NullEnum
func (t *ApplicationConfigurationRequest_SkipArchiveFile) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfigurationRequest_SkipArchiveFile, using the provided NullEnum
func (t *ApplicationConfigurationRequest_SkipArchiveFile) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfigurationRequest_SkipArchiveFile) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfigurationRequest_SkipArchiveFile) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUnpaperCleanEnum returns the union data inside the ApplicationConfigurationRequest_UnpaperClean as a UnpaperCleanEnum
func (t ApplicationConfigurationRequest_UnpaperClean) AsUnpaperCleanEnum() (UnpaperCleanEnum, error) {
	var body UnpaperCleanEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnpaperCleanEnum overwrites any union data inside the ApplicationConfigurationRequest_UnpaperClean as the provided UnpaperCleanEnum
func (t *ApplicationConfigurationRequest_UnpaperClean) FromUnpaperCleanEnum(v UnpaperCleanEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnpaperCleanEnum performs a merge with any union data inside the ApplicationConfigurationRequest_UnpaperClean, using the provided UnpaperCleanEnum
func (t *ApplicationConfigurationRequest_UnpaperClean) MergeUnpaperCleanEnum(v UnpaperCleanEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the ApplicationConfigurationRequest_UnpaperClean as a BlankEnum
func (t ApplicationConfigurationRequest_UnpaperClean) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the ApplicationConfigurationRequest_UnpaperClean as the provided BlankEnum
func (t *ApplicationConfigurationRequest_UnpaperClean) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the ApplicationConfigurationRequest_UnpaperClean, using the provided BlankEnum
func (t *ApplicationConfigurationRequest_UnpaperClean) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the ApplicationConfigurationRequest_UnpaperClean as a NullEnum
func (t ApplicationConfigurationRequest_UnpaperClean) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the ApplicationConfigurationRequest_UnpaperClean as the provided NullEnum
func (t *ApplicationConfigurationRequest_UnpaperClean) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the ApplicationConfigurationRequest_UnpaperClean, using the provided NullEnum
func (t *ApplicationConfigurationRequest_UnpaperClean) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationConfigurationRequest_UnpaperClean) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplicationConfigurationRequest_UnpaperClean) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomFieldInstanceValue0 returns the union data inside the CustomFieldInstance_Value as a CustomFieldInstanceValue0
func (t CustomFieldInstance_Value) AsCustomFieldInstanceValue0() (CustomFieldInstanceValue0, error) {
	var body CustomFieldInstanceValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomFieldInstanceValue0 overwrites any union data inside the CustomFieldInstance_Value as the provided CustomFieldInstanceValue0
func (t *CustomFieldInstance_Value) FromCustomFieldInstanceValue0(v CustomFieldInstanceValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomFieldInstanceValue0 performs a merge with any union data inside the CustomFieldInstance_Value, using the provided CustomFieldInstanceValue0
func (t *CustomFieldInstance_Value) MergeCustomFieldInstanceValue0(v CustomFieldInstanceValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomFieldInstanceValue1 returns the union data inside the CustomFieldInstance_Value as a CustomFieldInstanceValue1
func (t CustomFieldInstance_Value) AsCustomFieldInstanceValue1() (CustomFieldInstanceValue1, error) {
	var body CustomFieldInstanceValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomFieldInstanceValue1 overwrites any union data inside the CustomFieldInstance_Value as the provided CustomFieldInstanceValue1
func (t *CustomFieldInstance_Value) FromCustomFieldInstanceValue1(v CustomFieldInstanceValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomFieldInstanceValue1 performs a merge with any union data inside the CustomFieldInstance_Value, using the provided CustomFieldInstanceValue1
func (t *CustomFieldInstance_Value) MergeCustomFieldInstanceValue1(v CustomFieldInstanceValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomFieldInstanceValue2 returns the union data inside the CustomFieldInstance_Value as a CustomFieldInstanceValue2
func (t CustomFieldInstance_Value) AsCustomFieldInstanceValue2() (CustomFieldInstanceValue2, error) {
	var body CustomFieldInstanceValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomFieldInstanceValue2 overwrites any union data inside the CustomFieldInstance_Value as the provided CustomFieldInstanceValue2
func (t *CustomFieldInstance_Value) FromCustomFieldInstanceValue2(v CustomFieldInstanceValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomFieldInstanceValue2 performs a merge with any union data inside the CustomFieldInstance_Value, using the provided CustomFieldInstanceValue2
func (t *CustomFieldInstance_Value) MergeCustomFieldInstanceValue2(v CustomFieldInstanceValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomFieldInstanceValue3 returns the union data inside the CustomFieldInstance_Value as a CustomFieldInstanceValue3
func (t CustomFieldInstance_Value) AsCustomFieldInstanceValue3() (CustomFieldInstanceValue3, error) {
	var body CustomFieldInstanceValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomFieldInstanceValue3 overwrites any union data inside the CustomFieldInstance_Value as the provided CustomFieldInstanceValue3
func (t *CustomFieldInstance_Value) FromCustomFieldInstanceValue3(v CustomFieldInstanceValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomFieldInstanceValue3 performs a merge with any union data inside the CustomFieldInstance_Value, using the provided CustomFieldInstanceValue3
func (t *CustomFieldInstance_Value) MergeCustomFieldInstanceValue3(v CustomFieldInstanceValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CustomFieldInstance_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CustomFieldInstance_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomFieldInstanceRequestValue0 returns the union data inside the CustomFieldInstanceRequest_Value as a CustomFieldInstanceRequestValue0
func (t CustomFieldInstanceRequest_Value) AsCustomFieldInstanceRequestValue0() (CustomFieldInstanceRequestValue0, error) {
	var body CustomFieldInstanceRequestValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomFieldInstanceRequestValue0 overwrites any union data inside the CustomFieldInstanceRequest_Value as the provided CustomFieldInstanceRequestValue0
func (t *CustomFieldInstanceRequest_Value) FromCustomFieldInstanceRequestValue0(v CustomFieldInstanceRequestValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomFieldInstanceRequestValue0 performs a merge with any union data inside the CustomFieldInstanceRequest_Value, using the provided CustomFieldInstanceRequestValue0
func (t *CustomFieldInstanceRequest_Value) MergeCustomFieldInstanceRequestValue0(v CustomFieldInstanceRequestValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomFieldInstanceRequestValue1 returns the union data inside the CustomFieldInstanceRequest_Value as a CustomFieldInstanceRequestValue1
func (t CustomFieldInstanceRequest_Value) AsCustomFieldInstanceRequestValue1() (CustomFieldInstanceRequestValue1, error) {
	var body CustomFieldInstanceRequestValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomFieldInstanceRequestValue1 overwrites any union data inside the CustomFieldInstanceRequest_Value as the provided CustomFieldInstanceRequestValue1
func (t *CustomFieldInstanceRequest_Value) FromCustomFieldInstanceRequestValue1(v CustomFieldInstanceRequestValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomFieldInstanceRequestValue1 performs a merge with any union data inside the CustomFieldInstanceRequest_Value, using the provided CustomFieldInstanceRequestValue1
func (t *CustomFieldInstanceRequest_Value) MergeCustomFieldInstanceRequestValue1(v CustomFieldInstanceRequestValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomFieldInstanceRequestValue2 returns the union data inside the CustomFieldInstanceRequest_Value as a CustomFieldInstanceRequestValue2
func (t CustomFieldInstanceRequest_Value) AsCustomFieldInstanceRequestValue2() (CustomFieldInstanceRequestValue2, error) {
	var body CustomFieldInstanceRequestValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomFieldInstanceRequestValue2 overwrites any union data inside the CustomFieldInstanceRequest_Value as the provided CustomFieldInstanceRequestValue2
func (t *CustomFieldInstanceRequest_Value) FromCustomFieldInstanceRequestValue2(v CustomFieldInstanceRequestValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomFieldInstanceRequestValue2 performs a merge with any union data inside the CustomFieldInstanceRequest_Value, using the provided CustomFieldInstanceRequestValue2
func (t *CustomFieldInstanceRequest_Value) MergeCustomFieldInstanceRequestValue2(v CustomFieldInstanceRequestValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomFieldInstanceRequestValue3 returns the union data inside the CustomFieldInstanceRequest_Value as a CustomFieldInstanceRequestValue3
func (t CustomFieldInstanceRequest_Value) AsCustomFieldInstanceRequestValue3() (CustomFieldInstanceRequestValue3, error) {
	var body CustomFieldInstanceRequestValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomFieldInstanceRequestValue3 overwrites any union data inside the CustomFieldInstanceRequest_Value as the provided CustomFieldInstanceRequestValue3
func (t *CustomFieldInstanceRequest_Value) FromCustomFieldInstanceRequestValue3(v CustomFieldInstanceRequestValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomFieldInstanceRequestValue3 performs a merge with any union data inside the CustomFieldInstanceRequest_Value, using the provided CustomFieldInstanceRequestValue3
func (t *CustomFieldInstanceRequest_Value) MergeCustomFieldInstanceRequestValue3(v CustomFieldInstanceRequestValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CustomFieldInstanceRequest_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CustomFieldInstanceRequest_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsColorConversionStrategyEnum returns the union data inside the PatchedApplicationConfigurationRequest_ColorConversionStrategy as a ColorConversionStrategyEnum
func (t PatchedApplicationConfigurationRequest_ColorConversionStrategy) AsColorConversionStrategyEnum() (ColorConversionStrategyEnum, error) {
	var body ColorConversionStrategyEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromColorConversionStrategyEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_ColorConversionStrategy as the provided ColorConversionStrategyEnum
func (t *PatchedApplicationConfigurationRequest_ColorConversionStrategy) FromColorConversionStrategyEnum(v ColorConversionStrategyEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeColorConversionStrategyEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_ColorConversionStrategy, using the provided ColorConversionStrategyEnum
func (t *PatchedApplicationConfigurationRequest_ColorConversionStrategy) MergeColorConversionStrategyEnum(v ColorConversionStrategyEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PatchedApplicationConfigurationRequest_ColorConversionStrategy as a BlankEnum
func (t PatchedApplicationConfigurationRequest_ColorConversionStrategy) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_ColorConversionStrategy as the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_ColorConversionStrategy) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_ColorConversionStrategy, using the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_ColorConversionStrategy) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedApplicationConfigurationRequest_ColorConversionStrategy as a NullEnum
func (t PatchedApplicationConfigurationRequest_ColorConversionStrategy) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_ColorConversionStrategy as the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_ColorConversionStrategy) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_ColorConversionStrategy, using the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_ColorConversionStrategy) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedApplicationConfigurationRequest_ColorConversionStrategy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedApplicationConfigurationRequest_ColorConversionStrategy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsModeEnum returns the union data inside the PatchedApplicationConfigurationRequest_Mode as a ModeEnum
func (t PatchedApplicationConfigurationRequest_Mode) AsModeEnum() (ModeEnum, error) {
	var body ModeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromModeEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_Mode as the provided ModeEnum
func (t *PatchedApplicationConfigurationRequest_Mode) FromModeEnum(v ModeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeModeEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_Mode, using the provided ModeEnum
func (t *PatchedApplicationConfigurationRequest_Mode) MergeModeEnum(v ModeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PatchedApplicationConfigurationRequest_Mode as a BlankEnum
func (t PatchedApplicationConfigurationRequest_Mode) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_Mode as the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_Mode) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_Mode, using the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_Mode) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedApplicationConfigurationRequest_Mode as a NullEnum
func (t PatchedApplicationConfigurationRequest_Mode) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_Mode as the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_Mode) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_Mode, using the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_Mode) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedApplicationConfigurationRequest_Mode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedApplicationConfigurationRequest_Mode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOutputTypeEnum returns the union data inside the PatchedApplicationConfigurationRequest_OutputType as a OutputTypeEnum
func (t PatchedApplicationConfigurationRequest_OutputType) AsOutputTypeEnum() (OutputTypeEnum, error) {
	var body OutputTypeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOutputTypeEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_OutputType as the provided OutputTypeEnum
func (t *PatchedApplicationConfigurationRequest_OutputType) FromOutputTypeEnum(v OutputTypeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOutputTypeEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_OutputType, using the provided OutputTypeEnum
func (t *PatchedApplicationConfigurationRequest_OutputType) MergeOutputTypeEnum(v OutputTypeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PatchedApplicationConfigurationRequest_OutputType as a BlankEnum
func (t PatchedApplicationConfigurationRequest_OutputType) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_OutputType as the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_OutputType) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_OutputType, using the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_OutputType) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedApplicationConfigurationRequest_OutputType as a NullEnum
func (t PatchedApplicationConfigurationRequest_OutputType) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_OutputType as the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_OutputType) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_OutputType, using the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_OutputType) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedApplicationConfigurationRequest_OutputType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedApplicationConfigurationRequest_OutputType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSkipArchiveFileEnum returns the union data inside the PatchedApplicationConfigurationRequest_SkipArchiveFile as a SkipArchiveFileEnum
func (t PatchedApplicationConfigurationRequest_SkipArchiveFile) AsSkipArchiveFileEnum() (SkipArchiveFileEnum, error) {
	var body SkipArchiveFileEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSkipArchiveFileEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_SkipArchiveFile as the provided SkipArchiveFileEnum
func (t *PatchedApplicationConfigurationRequest_SkipArchiveFile) FromSkipArchiveFileEnum(v SkipArchiveFileEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSkipArchiveFileEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_SkipArchiveFile, using the provided SkipArchiveFileEnum
func (t *PatchedApplicationConfigurationRequest_SkipArchiveFile) MergeSkipArchiveFileEnum(v SkipArchiveFileEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PatchedApplicationConfigurationRequest_SkipArchiveFile as a BlankEnum
func (t PatchedApplicationConfigurationRequest_SkipArchiveFile) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_SkipArchiveFile as the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_SkipArchiveFile) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_SkipArchiveFile, using the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_SkipArchiveFile) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedApplicationConfigurationRequest_SkipArchiveFile as a NullEnum
func (t PatchedApplicationConfigurationRequest_SkipArchiveFile) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_SkipArchiveFile as the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_SkipArchiveFile) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_SkipArchiveFile, using the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_SkipArchiveFile) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedApplicationConfigurationRequest_SkipArchiveFile) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedApplicationConfigurationRequest_SkipArchiveFile) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUnpaperCleanEnum returns the union data inside the PatchedApplicationConfigurationRequest_UnpaperClean as a UnpaperCleanEnum
func (t PatchedApplicationConfigurationRequest_UnpaperClean) AsUnpaperCleanEnum() (UnpaperCleanEnum, error) {
	var body UnpaperCleanEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnpaperCleanEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_UnpaperClean as the provided UnpaperCleanEnum
func (t *PatchedApplicationConfigurationRequest_UnpaperClean) FromUnpaperCleanEnum(v UnpaperCleanEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnpaperCleanEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_UnpaperClean, using the provided UnpaperCleanEnum
func (t *PatchedApplicationConfigurationRequest_UnpaperClean) MergeUnpaperCleanEnum(v UnpaperCleanEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PatchedApplicationConfigurationRequest_UnpaperClean as a BlankEnum
func (t PatchedApplicationConfigurationRequest_UnpaperClean) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_UnpaperClean as the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_UnpaperClean) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_UnpaperClean, using the provided BlankEnum
func (t *PatchedApplicationConfigurationRequest_UnpaperClean) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedApplicationConfigurationRequest_UnpaperClean as a NullEnum
func (t PatchedApplicationConfigurationRequest_UnpaperClean) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedApplicationConfigurationRequest_UnpaperClean as the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_UnpaperClean) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedApplicationConfigurationRequest_UnpaperClean, using the provided NullEnum
func (t *PatchedApplicationConfigurationRequest_UnpaperClean) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedApplicationConfigurationRequest_UnpaperClean) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedApplicationConfigurationRequest_UnpaperClean) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDisplayModeEnum returns the union data inside the PatchedSavedViewRequest_DisplayMode as a DisplayModeEnum
func (t PatchedSavedViewRequest_DisplayMode) AsDisplayModeEnum() (DisplayModeEnum, error) {
	var body DisplayModeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDisplayModeEnum overwrites any union data inside the PatchedSavedViewRequest_DisplayMode as the provided DisplayModeEnum
func (t *PatchedSavedViewRequest_DisplayMode) FromDisplayModeEnum(v DisplayModeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDisplayModeEnum performs a merge with any union data inside the PatchedSavedViewRequest_DisplayMode, using the provided DisplayModeEnum
func (t *PatchedSavedViewRequest_DisplayMode) MergeDisplayModeEnum(v DisplayModeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the PatchedSavedViewRequest_DisplayMode as a BlankEnum
func (t PatchedSavedViewRequest_DisplayMode) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the PatchedSavedViewRequest_DisplayMode as the provided BlankEnum
func (t *PatchedSavedViewRequest_DisplayMode) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the PatchedSavedViewRequest_DisplayMode, using the provided BlankEnum
func (t *PatchedSavedViewRequest_DisplayMode) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedSavedViewRequest_DisplayMode as a NullEnum
func (t PatchedSavedViewRequest_DisplayMode) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedSavedViewRequest_DisplayMode as the provided NullEnum
func (t *PatchedSavedViewRequest_DisplayMode) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedSavedViewRequest_DisplayMode, using the provided NullEnum
func (t *PatchedSavedViewRequest_DisplayMode) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedSavedViewRequest_DisplayMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedSavedViewRequest_DisplayMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDisplayModeEnum returns the union data inside the SavedView_DisplayMode as a DisplayModeEnum
func (t SavedView_DisplayMode) AsDisplayModeEnum() (DisplayModeEnum, error) {
	var body DisplayModeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDisplayModeEnum overwrites any union data inside the SavedView_DisplayMode as the provided DisplayModeEnum
func (t *SavedView_DisplayMode) FromDisplayModeEnum(v DisplayModeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDisplayModeEnum performs a merge with any union data inside the SavedView_DisplayMode, using the provided DisplayModeEnum
func (t *SavedView_DisplayMode) MergeDisplayModeEnum(v DisplayModeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the SavedView_DisplayMode as a BlankEnum
func (t SavedView_DisplayMode) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the SavedView_DisplayMode as the provided BlankEnum
func (t *SavedView_DisplayMode) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the SavedView_DisplayMode, using the provided BlankEnum
func (t *SavedView_DisplayMode) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the SavedView_DisplayMode as a NullEnum
func (t SavedView_DisplayMode) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the SavedView_DisplayMode as the provided NullEnum
func (t *SavedView_DisplayMode) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the SavedView_DisplayMode, using the provided NullEnum
func (t *SavedView_DisplayMode) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SavedView_DisplayMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SavedView_DisplayMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDisplayModeEnum returns the union data inside the SavedViewRequest_DisplayMode as a DisplayModeEnum
func (t SavedViewRequest_DisplayMode) AsDisplayModeEnum() (DisplayModeEnum, error) {
	var body DisplayModeEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDisplayModeEnum overwrites any union data inside the SavedViewRequest_DisplayMode as the provided DisplayModeEnum
func (t *SavedViewRequest_DisplayMode) FromDisplayModeEnum(v DisplayModeEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDisplayModeEnum performs a merge with any union data inside the SavedViewRequest_DisplayMode, using the provided DisplayModeEnum
func (t *SavedViewRequest_DisplayMode) MergeDisplayModeEnum(v DisplayModeEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlankEnum returns the union data inside the SavedViewRequest_DisplayMode as a BlankEnum
func (t SavedViewRequest_DisplayMode) AsBlankEnum() (BlankEnum, error) {
	var body BlankEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlankEnum overwrites any union data inside the SavedViewRequest_DisplayMode as the provided BlankEnum
func (t *SavedViewRequest_DisplayMode) FromBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlankEnum performs a merge with any union data inside the SavedViewRequest_DisplayMode, using the provided BlankEnum
func (t *SavedViewRequest_DisplayMode) MergeBlankEnum(v BlankEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the SavedViewRequest_DisplayMode as a NullEnum
func (t SavedViewRequest_DisplayMode) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the SavedViewRequest_DisplayMode as the provided NullEnum
func (t *SavedViewRequest_DisplayMode) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the SavedViewRequest_DisplayMode, using the provided NullEnum
func (t *SavedViewRequest_DisplayMode) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SavedViewRequest_DisplayMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SavedViewRequest_DisplayMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskNameEnum returns the union data inside the TasksView_TaskName as a TaskNameEnum
func (t TasksView_TaskName) AsTaskNameEnum() (TaskNameEnum, error) {
	var body TaskNameEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskNameEnum overwrites any union data inside the TasksView_TaskName as the provided TaskNameEnum
func (t *TasksView_TaskName) FromTaskNameEnum(v TaskNameEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskNameEnum performs a merge with any union data inside the TasksView_TaskName, using the provided TaskNameEnum
func (t *TasksView_TaskName) MergeTaskNameEnum(v TaskNameEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the TasksView_TaskName as a NullEnum
func (t TasksView_TaskName) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the TasksView_TaskName as the provided NullEnum
func (t *TasksView_TaskName) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the TasksView_TaskName, using the provided NullEnum
func (t *TasksView_TaskName) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TasksView_TaskName) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TasksView_TaskName) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskNameEnum returns the union data inside the TasksViewRequest_TaskName as a TaskNameEnum
func (t TasksViewRequest_TaskName) AsTaskNameEnum() (TaskNameEnum, error) {
	var body TaskNameEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskNameEnum overwrites any union data inside the TasksViewRequest_TaskName as the provided TaskNameEnum
func (t *TasksViewRequest_TaskName) FromTaskNameEnum(v TaskNameEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskNameEnum performs a merge with any union data inside the TasksViewRequest_TaskName, using the provided TaskNameEnum
func (t *TasksViewRequest_TaskName) MergeTaskNameEnum(v TaskNameEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the TasksViewRequest_TaskName as a NullEnum
func (t TasksViewRequest_TaskName) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the TasksViewRequest_TaskName as the provided NullEnum
func (t *TasksViewRequest_TaskName) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the TasksViewRequest_TaskName, using the provided NullEnum
func (t *TasksViewRequest_TaskName) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TasksViewRequest_TaskName) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TasksViewRequest_TaskName) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BulkEditObjectsWithBody request with any body
	BulkEditObjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkEditObjects(ctx context.Context, body BulkEditObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigList request
	ConfigList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigDestroy request
	ConfigDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigRetrieve request
	ConfigRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigPartialUpdateWithBody request with any body
	ConfigPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfigPartialUpdate(ctx context.Context, id int, body ConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfigPartialUpdateWithFormdataBody(ctx context.Context, id int, body ConfigPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigUpdateWithBody request with any body
	ConfigUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfigUpdate(ctx context.Context, id int, body ConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfigUpdateWithFormdataBody(ctx context.Context, id int, body ConfigUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CorrespondentsList request
	CorrespondentsList(ctx context.Context, params *CorrespondentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CorrespondentsCreateWithBody request with any body
	CorrespondentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CorrespondentsCreate(ctx context.Context, body CorrespondentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CorrespondentsCreateWithFormdataBody(ctx context.Context, body CorrespondentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CorrespondentsDestroy request
	CorrespondentsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CorrespondentsRetrieve request
	CorrespondentsRetrieve(ctx context.Context, id int, params *CorrespondentsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CorrespondentsPartialUpdateWithBody request with any body
	CorrespondentsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CorrespondentsPartialUpdate(ctx context.Context, id int, body CorrespondentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CorrespondentsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CorrespondentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CorrespondentsUpdateWithBody request with any body
	CorrespondentsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CorrespondentsUpdate(ctx context.Context, id int, body CorrespondentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CorrespondentsUpdateWithFormdataBody(ctx context.Context, id int, body CorrespondentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsList request
	CustomFieldsList(ctx context.Context, params *CustomFieldsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsCreateWithBody request with any body
	CustomFieldsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsCreate(ctx context.Context, body CustomFieldsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsCreateWithFormdataBody(ctx context.Context, body CustomFieldsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsDestroy request
	CustomFieldsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsRetrieve request
	CustomFieldsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsPartialUpdateWithBody request with any body
	CustomFieldsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsPartialUpdate(ctx context.Context, id int, body CustomFieldsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CustomFieldsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsUpdateWithBody request with any body
	CustomFieldsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsUpdate(ctx context.Context, id int, body CustomFieldsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsUpdateWithFormdataBody(ctx context.Context, id int, body CustomFieldsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentTypesList request
	DocumentTypesList(ctx context.Context, params *DocumentTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentTypesCreateWithBody request with any body
	DocumentTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentTypesCreate(ctx context.Context, body DocumentTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentTypesCreateWithFormdataBody(ctx context.Context, body DocumentTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentTypesDestroy request
	DocumentTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentTypesRetrieve request
	DocumentTypesRetrieve(ctx context.Context, id int, params *DocumentTypesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentTypesPartialUpdateWithBody request with any body
	DocumentTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentTypesPartialUpdate(ctx context.Context, id int, body DocumentTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body DocumentTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentTypesUpdateWithBody request with any body
	DocumentTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentTypesUpdate(ctx context.Context, id int, body DocumentTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentTypesUpdateWithFormdataBody(ctx context.Context, id int, body DocumentTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsList request
	DocumentsList(ctx context.Context, params *DocumentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsBulkDownloadCreateWithBody request with any body
	DocumentsBulkDownloadCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsBulkDownloadCreate(ctx context.Context, body DocumentsBulkDownloadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkEditWithBody request with any body
	BulkEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkEdit(ctx context.Context, body BulkEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsNextAsnRetrieve request
	DocumentsNextAsnRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsPostDocumentCreateWithBody request with any body
	DocumentsPostDocumentCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsSelectionDataCreateWithBody request with any body
	DocumentsSelectionDataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsSelectionDataCreate(ctx context.Context, body DocumentsSelectionDataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsDestroy request
	DocumentsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsRetrieve request
	DocumentsRetrieve(ctx context.Context, id int, params *DocumentsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsPartialUpdateWithBody request with any body
	DocumentsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsPartialUpdate(ctx context.Context, id int, body DocumentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DocumentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsUpdateWithBody request with any body
	DocumentsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsUpdate(ctx context.Context, id int, body DocumentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsUpdateWithFormdataBody(ctx context.Context, id int, body DocumentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsDownloadRetrieve request
	DocumentsDownloadRetrieve(ctx context.Context, id int, params *DocumentsDownloadRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsEmailCreateWithBody request with any body
	DocumentsEmailCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsEmailCreate(ctx context.Context, id int, body DocumentsEmailCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsEmailCreateWithFormdataBody(ctx context.Context, id int, body DocumentsEmailCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsHistoryList request
	DocumentsHistoryList(ctx context.Context, id int, params *DocumentsHistoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsMetadataRetrieve request
	DocumentsMetadataRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsNotesDestroy request
	DocumentsNotesDestroy(ctx context.Context, id int, params *DocumentsNotesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsNotesList request
	DocumentsNotesList(ctx context.Context, id int, params *DocumentsNotesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsNotesCreateWithBody request with any body
	DocumentsNotesCreateWithBody(ctx context.Context, id int, params *DocumentsNotesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsNotesCreate(ctx context.Context, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentsNotesCreateWithFormdataBody(ctx context.Context, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsPreviewRetrieve request
	DocumentsPreviewRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentShareLinks request
	DocumentShareLinks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsSuggestionsRetrieve request
	DocumentsSuggestionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentsThumbRetrieve request
	DocumentsThumbRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsList request
	GroupsList(ctx context.Context, params *GroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsCreateWithBody request with any body
	GroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsCreate(ctx context.Context, body GroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsCreateWithFormdataBody(ctx context.Context, body GroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsDestroy request
	GroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsRetrieve request
	GroupsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsPartialUpdateWithBody request with any body
	GroupsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsPartialUpdate(ctx context.Context, id int, body GroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsPartialUpdateWithFormdataBody(ctx context.Context, id int, body GroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsUpdateWithBody request with any body
	GroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsUpdate(ctx context.Context, id int, body GroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsUpdateWithFormdataBody(ctx context.Context, id int, body GroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogsList request
	LogsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveLog request
	RetrieveLog(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailAccountsList request
	MailAccountsList(ctx context.Context, params *MailAccountsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailAccountsCreateWithBody request with any body
	MailAccountsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountsCreate(ctx context.Context, body MailAccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountsCreateWithFormdataBody(ctx context.Context, body MailAccountsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailAccountTestWithBody request with any body
	MailAccountTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountTest(ctx context.Context, body MailAccountTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountTestWithFormdataBody(ctx context.Context, body MailAccountTestFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailAccountsDestroy request
	MailAccountsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailAccountsRetrieve request
	MailAccountsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailAccountsPartialUpdateWithBody request with any body
	MailAccountsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountsPartialUpdate(ctx context.Context, id int, body MailAccountsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountsPartialUpdateWithFormdataBody(ctx context.Context, id int, body MailAccountsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailAccountsUpdateWithBody request with any body
	MailAccountsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountsUpdate(ctx context.Context, id int, body MailAccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountsUpdateWithFormdataBody(ctx context.Context, id int, body MailAccountsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailAccountProcessWithBody request with any body
	MailAccountProcessWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountProcess(ctx context.Context, id int, body MailAccountProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailAccountProcessWithFormdataBody(ctx context.Context, id int, body MailAccountProcessFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailRulesList request
	MailRulesList(ctx context.Context, params *MailRulesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailRulesCreateWithBody request with any body
	MailRulesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailRulesCreate(ctx context.Context, body MailRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailRulesCreateWithFormdataBody(ctx context.Context, body MailRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailRulesDestroy request
	MailRulesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailRulesRetrieve request
	MailRulesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailRulesPartialUpdateWithBody request with any body
	MailRulesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailRulesPartialUpdate(ctx context.Context, id int, body MailRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailRulesPartialUpdateWithFormdataBody(ctx context.Context, id int, body MailRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailRulesUpdateWithBody request with any body
	MailRulesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailRulesUpdate(ctx context.Context, id int, body MailRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MailRulesUpdateWithFormdataBody(ctx context.Context, id int, body MailRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OauthCallbackRetrieve request
	OauthCallbackRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileRetrieve request
	ProfileRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilePartialUpdateWithBody request with any body
	ProfilePartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProfilePartialUpdate(ctx context.Context, body ProfilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProfilePartialUpdateWithFormdataBody(ctx context.Context, body ProfilePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileDisconnectSocialAccountCreateWithBody request with any body
	ProfileDisconnectSocialAccountCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProfileDisconnectSocialAccountCreate(ctx context.Context, body ProfileDisconnectSocialAccountCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileGenerateAuthTokenCreate request
	ProfileGenerateAuthTokenCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileSocialAccountProvidersRetrieve request
	ProfileSocialAccountProvidersRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileTotpDestroy request
	ProfileTotpDestroy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileTotpRetrieve request
	ProfileTotpRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileTotpCreateWithBody request with any body
	ProfileTotpCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProfileTotpCreate(ctx context.Context, body ProfileTotpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoteVersionRetrieve request
	RemoteVersionRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SavedViewsList request
	SavedViewsList(ctx context.Context, params *SavedViewsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SavedViewsCreateWithBody request with any body
	SavedViewsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SavedViewsCreate(ctx context.Context, body SavedViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SavedViewsCreateWithFormdataBody(ctx context.Context, body SavedViewsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SavedViewsDestroy request
	SavedViewsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SavedViewsRetrieve request
	SavedViewsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SavedViewsPartialUpdateWithBody request with any body
	SavedViewsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SavedViewsPartialUpdate(ctx context.Context, id int, body SavedViewsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SavedViewsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SavedViewsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SavedViewsUpdateWithBody request with any body
	SavedViewsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SavedViewsUpdate(ctx context.Context, id int, body SavedViewsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SavedViewsUpdateWithFormdataBody(ctx context.Context, id int, body SavedViewsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchRetrieve request
	SearchRetrieve(ctx context.Context, params *SearchRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchAutocompleteList request
	SearchAutocompleteList(ctx context.Context, params *SearchAutocompleteListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareLinksList request
	ShareLinksList(ctx context.Context, params *ShareLinksListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareLinksCreateWithBody request with any body
	ShareLinksCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShareLinksCreate(ctx context.Context, body ShareLinksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShareLinksCreateWithFormdataBody(ctx context.Context, body ShareLinksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareLinksDestroy request
	ShareLinksDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareLinksRetrieve request
	ShareLinksRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareLinksPartialUpdateWithBody request with any body
	ShareLinksPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShareLinksPartialUpdate(ctx context.Context, id int, body ShareLinksPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShareLinksPartialUpdateWithFormdataBody(ctx context.Context, id int, body ShareLinksPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareLinksUpdateWithBody request with any body
	ShareLinksUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShareLinksUpdate(ctx context.Context, id int, body ShareLinksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShareLinksUpdateWithFormdataBody(ctx context.Context, id int, body ShareLinksUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatisticsRetrieve request
	StatisticsRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatusRetrieve request
	StatusRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StoragePathsList request
	StoragePathsList(ctx context.Context, params *StoragePathsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StoragePathsCreateWithBody request with any body
	StoragePathsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoragePathsCreate(ctx context.Context, body StoragePathsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoragePathsCreateWithFormdataBody(ctx context.Context, body StoragePathsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StoragePathsTestCreateWithBody request with any body
	StoragePathsTestCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoragePathsTestCreate(ctx context.Context, body StoragePathsTestCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoragePathsTestCreateWithFormdataBody(ctx context.Context, body StoragePathsTestCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StoragePathsDestroy request
	StoragePathsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StoragePathsRetrieve request
	StoragePathsRetrieve(ctx context.Context, id int, params *StoragePathsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StoragePathsPartialUpdateWithBody request with any body
	StoragePathsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoragePathsPartialUpdate(ctx context.Context, id int, body StoragePathsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoragePathsPartialUpdateWithFormdataBody(ctx context.Context, id int, body StoragePathsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StoragePathsUpdateWithBody request with any body
	StoragePathsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoragePathsUpdate(ctx context.Context, id int, body StoragePathsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoragePathsUpdateWithFormdataBody(ctx context.Context, id int, body StoragePathsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagsList request
	TagsList(ctx context.Context, params *TagsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagsCreateWithBody request with any body
	TagsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TagsCreate(ctx context.Context, body TagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TagsCreateWithFormdataBody(ctx context.Context, body TagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagsDestroy request
	TagsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagsRetrieve request
	TagsRetrieve(ctx context.Context, id int, params *TagsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagsPartialUpdateWithBody request with any body
	TagsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TagsPartialUpdate(ctx context.Context, id int, body TagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TagsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagsUpdateWithBody request with any body
	TagsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TagsUpdate(ctx context.Context, id int, body TagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TagsUpdateWithFormdataBody(ctx context.Context, id int, body TagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksList request
	TasksList(ctx context.Context, params *TasksListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcknowledgeTasksWithBody request with any body
	AcknowledgeTasksWithBody(ctx context.Context, params *AcknowledgeTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AcknowledgeTasks(ctx context.Context, params *AcknowledgeTasksParams, body AcknowledgeTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksRunCreateWithBody request with any body
	TasksRunCreateWithBody(ctx context.Context, params *TasksRunCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksRunCreate(ctx context.Context, params *TasksRunCreateParams, body TasksRunCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TasksRunCreateWithFormdataBody(ctx context.Context, params *TasksRunCreateParams, body TasksRunCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksRetrieve request
	TasksRetrieve(ctx context.Context, id int, params *TasksRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenCreateWithBody request with any body
	TokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenCreate(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenCreateWithFormdataBody(ctx context.Context, body TokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrashList request
	TrashList(ctx context.Context, params *TrashListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrashCreateWithBody request with any body
	TrashCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TrashCreate(ctx context.Context, body TrashCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TrashCreateWithFormdataBody(ctx context.Context, body TrashCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UiSettingsRetrieve request
	UiSettingsRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UiSettingsCreateWithBody request with any body
	UiSettingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UiSettingsCreate(ctx context.Context, body UiSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UiSettingsCreateWithFormdataBody(ctx context.Context, body UiSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersList request
	UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersCreateWithBody request with any body
	UsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreate(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreateWithFormdataBody(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDestroy request
	UsersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersRetrieve request
	UsersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersPartialUpdateWithBody request with any body
	UsersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPartialUpdate(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPartialUpdateWithFormdataBody(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUpdateWithBody request with any body
	UsersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdate(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdateWithFormdataBody(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeactivateTotpCreate request
	UsersDeactivateTotpCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowActionsList request
	WorkflowActionsList(ctx context.Context, params *WorkflowActionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowActionsCreateWithBody request with any body
	WorkflowActionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowActionsCreate(ctx context.Context, body WorkflowActionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowActionsCreateWithFormdataBody(ctx context.Context, body WorkflowActionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowActionsDestroy request
	WorkflowActionsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowActionsRetrieve request
	WorkflowActionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowActionsPartialUpdateWithBody request with any body
	WorkflowActionsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowActionsPartialUpdate(ctx context.Context, id int, body WorkflowActionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowActionsPartialUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowActionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowActionsUpdateWithBody request with any body
	WorkflowActionsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowActionsUpdate(ctx context.Context, id int, body WorkflowActionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowActionsUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowActionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowTriggersList request
	WorkflowTriggersList(ctx context.Context, params *WorkflowTriggersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowTriggersCreateWithBody request with any body
	WorkflowTriggersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowTriggersCreate(ctx context.Context, body WorkflowTriggersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowTriggersCreateWithFormdataBody(ctx context.Context, body WorkflowTriggersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowTriggersDestroy request
	WorkflowTriggersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowTriggersRetrieve request
	WorkflowTriggersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowTriggersPartialUpdateWithBody request with any body
	WorkflowTriggersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowTriggersPartialUpdate(ctx context.Context, id int, body WorkflowTriggersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowTriggersPartialUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowTriggersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowTriggersUpdateWithBody request with any body
	WorkflowTriggersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowTriggersUpdate(ctx context.Context, id int, body WorkflowTriggersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowTriggersUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowTriggersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsList request
	WorkflowsList(ctx context.Context, params *WorkflowsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsCreateWithBody request with any body
	WorkflowsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsCreate(ctx context.Context, body WorkflowsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsCreateWithFormdataBody(ctx context.Context, body WorkflowsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsDestroy request
	WorkflowsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsRetrieve request
	WorkflowsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsPartialUpdateWithBody request with any body
	WorkflowsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsPartialUpdate(ctx context.Context, id int, body WorkflowsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsPartialUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsUpdateWithBody request with any body
	WorkflowsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsUpdate(ctx context.Context, id int, body WorkflowsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BulkEditObjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkEditObjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkEditObjects(ctx context.Context, body BulkEditObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkEditObjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigPartialUpdate(ctx context.Context, id int, body ConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigPartialUpdateWithFormdataBody(ctx context.Context, id int, body ConfigPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigUpdate(ctx context.Context, id int, body ConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigUpdateWithFormdataBody(ctx context.Context, id int, body ConfigUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsList(ctx context.Context, params *CorrespondentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsCreate(ctx context.Context, body CorrespondentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsCreateWithFormdataBody(ctx context.Context, body CorrespondentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsRetrieve(ctx context.Context, id int, params *CorrespondentsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsPartialUpdate(ctx context.Context, id int, body CorrespondentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CorrespondentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsUpdate(ctx context.Context, id int, body CorrespondentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrespondentsUpdateWithFormdataBody(ctx context.Context, id int, body CorrespondentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrespondentsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsList(ctx context.Context, params *CustomFieldsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsCreate(ctx context.Context, body CustomFieldsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsCreateWithFormdataBody(ctx context.Context, body CustomFieldsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsPartialUpdate(ctx context.Context, id int, body CustomFieldsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CustomFieldsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsUpdate(ctx context.Context, id int, body CustomFieldsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsUpdateWithFormdataBody(ctx context.Context, id int, body CustomFieldsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesList(ctx context.Context, params *DocumentTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesCreate(ctx context.Context, body DocumentTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesCreateWithFormdataBody(ctx context.Context, body DocumentTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesRetrieve(ctx context.Context, id int, params *DocumentTypesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesPartialUpdate(ctx context.Context, id int, body DocumentTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body DocumentTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesUpdate(ctx context.Context, id int, body DocumentTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentTypesUpdateWithFormdataBody(ctx context.Context, id int, body DocumentTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentTypesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsList(ctx context.Context, params *DocumentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsBulkDownloadCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsBulkDownloadCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsBulkDownloadCreate(ctx context.Context, body DocumentsBulkDownloadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsBulkDownloadCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkEditRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkEdit(ctx context.Context, body BulkEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkEditRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsNextAsnRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsNextAsnRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsPostDocumentCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsPostDocumentCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsSelectionDataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsSelectionDataCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsSelectionDataCreate(ctx context.Context, body DocumentsSelectionDataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsSelectionDataCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsRetrieve(ctx context.Context, id int, params *DocumentsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsPartialUpdate(ctx context.Context, id int, body DocumentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DocumentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsUpdate(ctx context.Context, id int, body DocumentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsUpdateWithFormdataBody(ctx context.Context, id int, body DocumentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsDownloadRetrieve(ctx context.Context, id int, params *DocumentsDownloadRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsDownloadRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsEmailCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsEmailCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsEmailCreate(ctx context.Context, id int, body DocumentsEmailCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsEmailCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsEmailCreateWithFormdataBody(ctx context.Context, id int, body DocumentsEmailCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsEmailCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsHistoryList(ctx context.Context, id int, params *DocumentsHistoryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsHistoryListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsMetadataRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsMetadataRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsNotesDestroy(ctx context.Context, id int, params *DocumentsNotesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsNotesDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsNotesList(ctx context.Context, id int, params *DocumentsNotesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsNotesListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsNotesCreateWithBody(ctx context.Context, id int, params *DocumentsNotesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsNotesCreateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsNotesCreate(ctx context.Context, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsNotesCreateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsNotesCreateWithFormdataBody(ctx context.Context, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsNotesCreateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsPreviewRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsPreviewRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentShareLinks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentShareLinksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsSuggestionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsSuggestionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentsThumbRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentsThumbRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsList(ctx context.Context, params *GroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsCreate(ctx context.Context, body GroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsCreateWithFormdataBody(ctx context.Context, body GroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsPartialUpdate(ctx context.Context, id int, body GroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsPartialUpdateWithFormdataBody(ctx context.Context, id int, body GroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsUpdate(ctx context.Context, id int, body GroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsUpdateWithFormdataBody(ctx context.Context, id int, body GroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveLog(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveLogRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsList(ctx context.Context, params *MailAccountsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsCreate(ctx context.Context, body MailAccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsCreateWithFormdataBody(ctx context.Context, body MailAccountsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountTest(ctx context.Context, body MailAccountTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountTestWithFormdataBody(ctx context.Context, body MailAccountTestFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountTestRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsPartialUpdate(ctx context.Context, id int, body MailAccountsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsPartialUpdateWithFormdataBody(ctx context.Context, id int, body MailAccountsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsUpdate(ctx context.Context, id int, body MailAccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountsUpdateWithFormdataBody(ctx context.Context, id int, body MailAccountsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountProcessWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountProcessRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountProcess(ctx context.Context, id int, body MailAccountProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountProcessRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailAccountProcessWithFormdataBody(ctx context.Context, id int, body MailAccountProcessFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailAccountProcessRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesList(ctx context.Context, params *MailRulesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesCreate(ctx context.Context, body MailRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesCreateWithFormdataBody(ctx context.Context, body MailRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesPartialUpdate(ctx context.Context, id int, body MailRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesPartialUpdateWithFormdataBody(ctx context.Context, id int, body MailRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesUpdate(ctx context.Context, id int, body MailRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailRulesUpdateWithFormdataBody(ctx context.Context, id int, body MailRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailRulesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OauthCallbackRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOauthCallbackRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilePartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilePartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilePartialUpdate(ctx context.Context, body ProfilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilePartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilePartialUpdateWithFormdataBody(ctx context.Context, body ProfilePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilePartialUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileDisconnectSocialAccountCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileDisconnectSocialAccountCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileDisconnectSocialAccountCreate(ctx context.Context, body ProfileDisconnectSocialAccountCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileDisconnectSocialAccountCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileGenerateAuthTokenCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileGenerateAuthTokenCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileSocialAccountProvidersRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileSocialAccountProvidersRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileTotpDestroy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileTotpDestroyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileTotpRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileTotpRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileTotpCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileTotpCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileTotpCreate(ctx context.Context, body ProfileTotpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileTotpCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoteVersionRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoteVersionRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsList(ctx context.Context, params *SavedViewsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsCreate(ctx context.Context, body SavedViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsCreateWithFormdataBody(ctx context.Context, body SavedViewsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsPartialUpdate(ctx context.Context, id int, body SavedViewsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SavedViewsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsUpdate(ctx context.Context, id int, body SavedViewsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavedViewsUpdateWithFormdataBody(ctx context.Context, id int, body SavedViewsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavedViewsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchRetrieve(ctx context.Context, params *SearchRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchAutocompleteList(ctx context.Context, params *SearchAutocompleteListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchAutocompleteListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksList(ctx context.Context, params *ShareLinksListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksCreate(ctx context.Context, body ShareLinksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksCreateWithFormdataBody(ctx context.Context, body ShareLinksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksPartialUpdate(ctx context.Context, id int, body ShareLinksPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksPartialUpdateWithFormdataBody(ctx context.Context, id int, body ShareLinksPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksUpdate(ctx context.Context, id int, body ShareLinksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareLinksUpdateWithFormdataBody(ctx context.Context, id int, body ShareLinksUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareLinksUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatisticsRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatisticsRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatusRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatusRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsList(ctx context.Context, params *StoragePathsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsCreate(ctx context.Context, body StoragePathsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsCreateWithFormdataBody(ctx context.Context, body StoragePathsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsTestCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsTestCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsTestCreate(ctx context.Context, body StoragePathsTestCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsTestCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsTestCreateWithFormdataBody(ctx context.Context, body StoragePathsTestCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsTestCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsRetrieve(ctx context.Context, id int, params *StoragePathsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsPartialUpdate(ctx context.Context, id int, body StoragePathsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsPartialUpdateWithFormdataBody(ctx context.Context, id int, body StoragePathsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsUpdate(ctx context.Context, id int, body StoragePathsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoragePathsUpdateWithFormdataBody(ctx context.Context, id int, body StoragePathsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoragePathsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsList(ctx context.Context, params *TagsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsCreate(ctx context.Context, body TagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsCreateWithFormdataBody(ctx context.Context, body TagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsRetrieve(ctx context.Context, id int, params *TagsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsPartialUpdate(ctx context.Context, id int, body TagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsUpdate(ctx context.Context, id int, body TagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagsUpdateWithFormdataBody(ctx context.Context, id int, body TagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksList(ctx context.Context, params *TasksListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcknowledgeTasksWithBody(ctx context.Context, params *AcknowledgeTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcknowledgeTasksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcknowledgeTasks(ctx context.Context, params *AcknowledgeTasksParams, body AcknowledgeTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcknowledgeTasksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksRunCreateWithBody(ctx context.Context, params *TasksRunCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksRunCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksRunCreate(ctx context.Context, params *TasksRunCreateParams, body TasksRunCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksRunCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksRunCreateWithFormdataBody(ctx context.Context, params *TasksRunCreateParams, body TasksRunCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksRunCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksRetrieve(ctx context.Context, id int, params *TasksRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenCreate(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenCreateWithFormdataBody(ctx context.Context, body TokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrashList(ctx context.Context, params *TrashListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrashListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrashCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrashCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrashCreate(ctx context.Context, body TrashCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrashCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrashCreateWithFormdataBody(ctx context.Context, body TrashCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrashCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UiSettingsRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUiSettingsRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UiSettingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUiSettingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UiSettingsCreate(ctx context.Context, body UiSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUiSettingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UiSettingsCreateWithFormdataBody(ctx context.Context, body UiSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUiSettingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreate(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateWithFormdataBody(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdate(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdateWithFormdataBody(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdate(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateWithFormdataBody(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeactivateTotpCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeactivateTotpCreateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsList(ctx context.Context, params *WorkflowActionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsCreate(ctx context.Context, body WorkflowActionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsCreateWithFormdataBody(ctx context.Context, body WorkflowActionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsPartialUpdate(ctx context.Context, id int, body WorkflowActionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsPartialUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowActionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsUpdate(ctx context.Context, id int, body WorkflowActionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowActionsUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowActionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowActionsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersList(ctx context.Context, params *WorkflowTriggersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersCreate(ctx context.Context, body WorkflowTriggersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersCreateWithFormdataBody(ctx context.Context, body WorkflowTriggersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersPartialUpdate(ctx context.Context, id int, body WorkflowTriggersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersPartialUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowTriggersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersUpdate(ctx context.Context, id int, body WorkflowTriggersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowTriggersUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowTriggersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowTriggersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsList(ctx context.Context, params *WorkflowsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsCreate(ctx context.Context, body WorkflowsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsCreateWithFormdataBody(ctx context.Context, body WorkflowsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsPartialUpdate(ctx context.Context, id int, body WorkflowsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsPartialUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsUpdate(ctx context.Context, id int, body WorkflowsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsUpdateWithFormdataBody(ctx context.Context, id int, body WorkflowsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBulkEditObjectsRequest calls the generic BulkEditObjects builder with application/json body
func NewBulkEditObjectsRequest(server string, body BulkEditObjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkEditObjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewBulkEditObjectsRequestWithBody generates requests for BulkEditObjects with any type of body
func NewBulkEditObjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bulk_edit_objects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfigListRequest generates requests for ConfigList
func NewConfigListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/config/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigDestroyRequest generates requests for ConfigDestroy
func NewConfigDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigRetrieveRequest generates requests for ConfigRetrieve
func NewConfigRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigPartialUpdateRequest calls the generic ConfigPartialUpdate builder with application/json body
func NewConfigPartialUpdateRequest(server string, id int, body ConfigPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfigPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewConfigPartialUpdateRequestWithFormdataBody calls the generic ConfigPartialUpdate builder with application/x-www-form-urlencoded body
func NewConfigPartialUpdateRequestWithFormdataBody(server string, id int, body ConfigPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewConfigPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewConfigPartialUpdateRequestWithBody generates requests for ConfigPartialUpdate with any type of body
func NewConfigPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfigUpdateRequest calls the generic ConfigUpdate builder with application/json body
func NewConfigUpdateRequest(server string, id int, body ConfigUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfigUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewConfigUpdateRequestWithFormdataBody calls the generic ConfigUpdate builder with application/x-www-form-urlencoded body
func NewConfigUpdateRequestWithFormdataBody(server string, id int, body ConfigUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewConfigUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewConfigUpdateRequestWithBody generates requests for ConfigUpdate with any type of body
func NewConfigUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCorrespondentsListRequest generates requests for CorrespondentsList
func NewCorrespondentsListRequest(server string, params *CorrespondentsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/correspondents/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iendswith", runtime.ParamLocationQuery, *params.NameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCorrespondentsCreateRequest calls the generic CorrespondentsCreate builder with application/json body
func NewCorrespondentsCreateRequest(server string, body CorrespondentsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCorrespondentsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCorrespondentsCreateRequestWithFormdataBody calls the generic CorrespondentsCreate builder with application/x-www-form-urlencoded body
func NewCorrespondentsCreateRequestWithFormdataBody(server string, body CorrespondentsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCorrespondentsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCorrespondentsCreateRequestWithBody generates requests for CorrespondentsCreate with any type of body
func NewCorrespondentsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/correspondents/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCorrespondentsDestroyRequest generates requests for CorrespondentsDestroy
func NewCorrespondentsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/correspondents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCorrespondentsRetrieveRequest generates requests for CorrespondentsRetrieve
func NewCorrespondentsRetrieveRequest(server string, id int, params *CorrespondentsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/correspondents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCorrespondentsPartialUpdateRequest calls the generic CorrespondentsPartialUpdate builder with application/json body
func NewCorrespondentsPartialUpdateRequest(server string, id int, body CorrespondentsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCorrespondentsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCorrespondentsPartialUpdateRequestWithFormdataBody calls the generic CorrespondentsPartialUpdate builder with application/x-www-form-urlencoded body
func NewCorrespondentsPartialUpdateRequestWithFormdataBody(server string, id int, body CorrespondentsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCorrespondentsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCorrespondentsPartialUpdateRequestWithBody generates requests for CorrespondentsPartialUpdate with any type of body
func NewCorrespondentsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/correspondents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCorrespondentsUpdateRequest calls the generic CorrespondentsUpdate builder with application/json body
func NewCorrespondentsUpdateRequest(server string, id int, body CorrespondentsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCorrespondentsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCorrespondentsUpdateRequestWithFormdataBody calls the generic CorrespondentsUpdate builder with application/x-www-form-urlencoded body
func NewCorrespondentsUpdateRequestWithFormdataBody(server string, id int, body CorrespondentsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCorrespondentsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCorrespondentsUpdateRequestWithBody generates requests for CorrespondentsUpdate with any type of body
func NewCorrespondentsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/correspondents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldsListRequest generates requests for CustomFieldsList
func NewCustomFieldsListRequest(server string, params *CustomFieldsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom_fields/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iendswith", runtime.ParamLocationQuery, *params.NameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsCreateRequest calls the generic CustomFieldsCreate builder with application/json body
func NewCustomFieldsCreateRequest(server string, body CustomFieldsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomFieldsCreateRequestWithFormdataBody calls the generic CustomFieldsCreate builder with application/x-www-form-urlencoded body
func NewCustomFieldsCreateRequestWithFormdataBody(server string, body CustomFieldsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCustomFieldsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCustomFieldsCreateRequestWithBody generates requests for CustomFieldsCreate with any type of body
func NewCustomFieldsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom_fields/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldsDestroyRequest generates requests for CustomFieldsDestroy
func NewCustomFieldsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom_fields/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsRetrieveRequest generates requests for CustomFieldsRetrieve
func NewCustomFieldsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom_fields/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsPartialUpdateRequest calls the generic CustomFieldsPartialUpdate builder with application/json body
func NewCustomFieldsPartialUpdateRequest(server string, id int, body CustomFieldsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCustomFieldsPartialUpdateRequestWithFormdataBody calls the generic CustomFieldsPartialUpdate builder with application/x-www-form-urlencoded body
func NewCustomFieldsPartialUpdateRequestWithFormdataBody(server string, id int, body CustomFieldsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCustomFieldsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCustomFieldsPartialUpdateRequestWithBody generates requests for CustomFieldsPartialUpdate with any type of body
func NewCustomFieldsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom_fields/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldsUpdateRequest calls the generic CustomFieldsUpdate builder with application/json body
func NewCustomFieldsUpdateRequest(server string, id int, body CustomFieldsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCustomFieldsUpdateRequestWithFormdataBody calls the generic CustomFieldsUpdate builder with application/x-www-form-urlencoded body
func NewCustomFieldsUpdateRequestWithFormdataBody(server string, id int, body CustomFieldsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCustomFieldsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCustomFieldsUpdateRequestWithBody generates requests for CustomFieldsUpdate with any type of body
func NewCustomFieldsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom_fields/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentTypesListRequest generates requests for DocumentTypesList
func NewDocumentTypesListRequest(server string, params *DocumentTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/document_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iendswith", runtime.ParamLocationQuery, *params.NameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentTypesCreateRequest calls the generic DocumentTypesCreate builder with application/json body
func NewDocumentTypesCreateRequest(server string, body DocumentTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentTypesCreateRequestWithFormdataBody calls the generic DocumentTypesCreate builder with application/x-www-form-urlencoded body
func NewDocumentTypesCreateRequestWithFormdataBody(server string, body DocumentTypesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDocumentTypesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewDocumentTypesCreateRequestWithBody generates requests for DocumentTypesCreate with any type of body
func NewDocumentTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/document_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentTypesDestroyRequest generates requests for DocumentTypesDestroy
func NewDocumentTypesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/document_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentTypesRetrieveRequest generates requests for DocumentTypesRetrieve
func NewDocumentTypesRetrieveRequest(server string, id int, params *DocumentTypesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/document_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentTypesPartialUpdateRequest calls the generic DocumentTypesPartialUpdate builder with application/json body
func NewDocumentTypesPartialUpdateRequest(server string, id int, body DocumentTypesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentTypesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDocumentTypesPartialUpdateRequestWithFormdataBody calls the generic DocumentTypesPartialUpdate builder with application/x-www-form-urlencoded body
func NewDocumentTypesPartialUpdateRequestWithFormdataBody(server string, id int, body DocumentTypesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDocumentTypesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDocumentTypesPartialUpdateRequestWithBody generates requests for DocumentTypesPartialUpdate with any type of body
func NewDocumentTypesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/document_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentTypesUpdateRequest calls the generic DocumentTypesUpdate builder with application/json body
func NewDocumentTypesUpdateRequest(server string, id int, body DocumentTypesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentTypesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDocumentTypesUpdateRequestWithFormdataBody calls the generic DocumentTypesUpdate builder with application/x-www-form-urlencoded body
func NewDocumentTypesUpdateRequestWithFormdataBody(server string, id int, body DocumentTypesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDocumentTypesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDocumentTypesUpdateRequestWithBody generates requests for DocumentTypesUpdate with any type of body
func NewDocumentTypesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/document_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentsListRequest generates requests for DocumentsList
func NewDocumentsListRequest(server string, params *DocumentsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AddedDateGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__date__gt", runtime.ParamLocationQuery, *params.AddedDateGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedDateGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__date__gte", runtime.ParamLocationQuery, *params.AddedDateGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedDateLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__date__lt", runtime.ParamLocationQuery, *params.AddedDateLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedDateLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__date__lte", runtime.ParamLocationQuery, *params.AddedDateLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__day", runtime.ParamLocationQuery, *params.AddedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__gt", runtime.ParamLocationQuery, *params.AddedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__gte", runtime.ParamLocationQuery, *params.AddedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__lt", runtime.ParamLocationQuery, *params.AddedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__lte", runtime.ParamLocationQuery, *params.AddedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__month", runtime.ParamLocationQuery, *params.AddedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "added__year", runtime.ParamLocationQuery, *params.AddedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveSerialNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archive_serial_number", runtime.ParamLocationQuery, *params.ArchiveSerialNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveSerialNumberGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archive_serial_number__gt", runtime.ParamLocationQuery, *params.ArchiveSerialNumberGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveSerialNumberGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archive_serial_number__gte", runtime.ParamLocationQuery, *params.ArchiveSerialNumberGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveSerialNumberIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archive_serial_number__isnull", runtime.ParamLocationQuery, *params.ArchiveSerialNumberIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveSerialNumberLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archive_serial_number__lt", runtime.ParamLocationQuery, *params.ArchiveSerialNumberLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveSerialNumberLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archive_serial_number__lte", runtime.ParamLocationQuery, *params.ArchiveSerialNumberLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChecksumIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "checksum__icontains", runtime.ParamLocationQuery, *params.ChecksumIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChecksumIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "checksum__iendswith", runtime.ParamLocationQuery, *params.ChecksumIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChecksumIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "checksum__iexact", runtime.ParamLocationQuery, *params.ChecksumIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChecksumIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "checksum__istartswith", runtime.ParamLocationQuery, *params.ChecksumIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content__icontains", runtime.ParamLocationQuery, *params.ContentIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content__iendswith", runtime.ParamLocationQuery, *params.ContentIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content__iexact", runtime.ParamLocationQuery, *params.ContentIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content__istartswith", runtime.ParamLocationQuery, *params.ContentIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrespondentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "correspondent__id", runtime.ParamLocationQuery, *params.CorrespondentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrespondentIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "correspondent__id__in", runtime.ParamLocationQuery, *params.CorrespondentIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrespondentIdNone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "correspondent__id__none", runtime.ParamLocationQuery, *params.CorrespondentIdNone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrespondentIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "correspondent__isnull", runtime.ParamLocationQuery, *params.CorrespondentIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrespondentNameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "correspondent__name__icontains", runtime.ParamLocationQuery, *params.CorrespondentNameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrespondentNameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "correspondent__name__iendswith", runtime.ParamLocationQuery, *params.CorrespondentNameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrespondentNameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "correspondent__name__iexact", runtime.ParamLocationQuery, *params.CorrespondentNameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrespondentNameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "correspondent__name__istartswith", runtime.ParamLocationQuery, *params.CorrespondentNameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDateGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__date__gt", runtime.ParamLocationQuery, *params.CreatedDateGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDateGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__date__gte", runtime.ParamLocationQuery, *params.CreatedDateGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDateLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__date__lt", runtime.ParamLocationQuery, *params.CreatedDateLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDateLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__date__lte", runtime.ParamLocationQuery, *params.CreatedDateLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomFieldQuery != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_field_query", runtime.ParamLocationQuery, *params.CustomFieldQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomFieldsIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_fields__icontains", runtime.ParamLocationQuery, *params.CustomFieldsIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomFieldsIdAll != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_fields__id__all", runtime.ParamLocationQuery, *params.CustomFieldsIdAll); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomFieldsIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_fields__id__in", runtime.ParamLocationQuery, *params.CustomFieldsIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomFieldsIdNone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_fields__id__none", runtime.ParamLocationQuery, *params.CustomFieldsIdNone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DocumentTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "document_type__id", runtime.ParamLocationQuery, *params.DocumentTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DocumentTypeIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "document_type__id__in", runtime.ParamLocationQuery, *params.DocumentTypeIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DocumentTypeIdNone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "document_type__id__none", runtime.ParamLocationQuery, *params.DocumentTypeIdNone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DocumentTypeIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "document_type__isnull", runtime.ParamLocationQuery, *params.DocumentTypeIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DocumentTypeNameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "document_type__name__icontains", runtime.ParamLocationQuery, *params.DocumentTypeNameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DocumentTypeNameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "document_type__name__iendswith", runtime.ParamLocationQuery, *params.DocumentTypeNameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DocumentTypeNameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "document_type__name__iexact", runtime.ParamLocationQuery, *params.DocumentTypeNameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DocumentTypeNameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "document_type__name__istartswith", runtime.ParamLocationQuery, *params.DocumentTypeNameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HasCustomFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_custom_fields", runtime.ParamLocationQuery, *params.HasCustomFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsInInbox != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_in_inbox", runtime.ParamLocationQuery, *params.IsInInbox); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTagged != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_tagged", runtime.ParamLocationQuery, *params.IsTagged); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MimeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mime_type", runtime.ParamLocationQuery, *params.MimeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedDateGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__date__gt", runtime.ParamLocationQuery, *params.ModifiedDateGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedDateGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__date__gte", runtime.ParamLocationQuery, *params.ModifiedDateGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedDateLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__date__lt", runtime.ParamLocationQuery, *params.ModifiedDateLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedDateLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__date__lte", runtime.ParamLocationQuery, *params.ModifiedDateLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__day", runtime.ParamLocationQuery, *params.ModifiedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__gt", runtime.ParamLocationQuery, *params.ModifiedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__gte", runtime.ParamLocationQuery, *params.ModifiedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__lt", runtime.ParamLocationQuery, *params.ModifiedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__lte", runtime.ParamLocationQuery, *params.ModifiedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__month", runtime.ParamLocationQuery, *params.ModifiedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified__year", runtime.ParamLocationQuery, *params.ModifiedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OriginalFilenameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "original_filename__icontains", runtime.ParamLocationQuery, *params.OriginalFilenameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OriginalFilenameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "original_filename__iendswith", runtime.ParamLocationQuery, *params.OriginalFilenameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OriginalFilenameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "original_filename__iexact", runtime.ParamLocationQuery, *params.OriginalFilenameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OriginalFilenameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "original_filename__istartswith", runtime.ParamLocationQuery, *params.OriginalFilenameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner__id", runtime.ParamLocationQuery, *params.OwnerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "owner__id__in", runtime.ParamLocationQuery, *params.OwnerIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerIdNone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner__id__none", runtime.ParamLocationQuery, *params.OwnerIdNone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner__isnull", runtime.ParamLocationQuery, *params.OwnerIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SharedById != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shared_by__id", runtime.ParamLocationQuery, *params.SharedById); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StoragePathId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storage_path__id", runtime.ParamLocationQuery, *params.StoragePathId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StoragePathIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "storage_path__id__in", runtime.ParamLocationQuery, *params.StoragePathIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StoragePathIdNone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storage_path__id__none", runtime.ParamLocationQuery, *params.StoragePathIdNone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StoragePathIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storage_path__isnull", runtime.ParamLocationQuery, *params.StoragePathIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StoragePathNameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storage_path__name__icontains", runtime.ParamLocationQuery, *params.StoragePathNameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StoragePathNameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storage_path__name__iendswith", runtime.ParamLocationQuery, *params.StoragePathNameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StoragePathNameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storage_path__name__iexact", runtime.ParamLocationQuery, *params.StoragePathNameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StoragePathNameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storage_path__name__istartswith", runtime.ParamLocationQuery, *params.StoragePathNameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagsId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags__id", runtime.ParamLocationQuery, *params.TagsId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagsIdAll != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags__id__all", runtime.ParamLocationQuery, *params.TagsIdAll); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagsIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags__id__in", runtime.ParamLocationQuery, *params.TagsIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagsIdNone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags__id__none", runtime.ParamLocationQuery, *params.TagsIdNone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagsNameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags__name__icontains", runtime.ParamLocationQuery, *params.TagsNameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagsNameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags__name__iendswith", runtime.ParamLocationQuery, *params.TagsNameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagsNameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags__name__iexact", runtime.ParamLocationQuery, *params.TagsNameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagsNameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags__name__istartswith", runtime.ParamLocationQuery, *params.TagsNameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TitleIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title__icontains", runtime.ParamLocationQuery, *params.TitleIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TitleIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title__iendswith", runtime.ParamLocationQuery, *params.TitleIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TitleIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title__iexact", runtime.ParamLocationQuery, *params.TitleIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TitleIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title__istartswith", runtime.ParamLocationQuery, *params.TitleIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TitleContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title_content", runtime.ParamLocationQuery, *params.TitleContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsBulkDownloadCreateRequest calls the generic DocumentsBulkDownloadCreate builder with application/json body
func NewDocumentsBulkDownloadCreateRequest(server string, body DocumentsBulkDownloadCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentsBulkDownloadCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentsBulkDownloadCreateRequestWithBody generates requests for DocumentsBulkDownloadCreate with any type of body
func NewDocumentsBulkDownloadCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/bulk_download/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkEditRequest calls the generic BulkEdit builder with application/json body
func NewBulkEditRequest(server string, body BulkEditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkEditRequestWithBody(server, "application/json", bodyReader)
}

// NewBulkEditRequestWithBody generates requests for BulkEdit with any type of body
func NewBulkEditRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/bulk_edit/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentsNextAsnRetrieveRequest generates requests for DocumentsNextAsnRetrieve
func NewDocumentsNextAsnRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/next_asn/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsPostDocumentCreateRequestWithBody generates requests for DocumentsPostDocumentCreate with any type of body
func NewDocumentsPostDocumentCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/post_document/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentsSelectionDataCreateRequest calls the generic DocumentsSelectionDataCreate builder with application/json body
func NewDocumentsSelectionDataCreateRequest(server string, body DocumentsSelectionDataCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentsSelectionDataCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentsSelectionDataCreateRequestWithBody generates requests for DocumentsSelectionDataCreate with any type of body
func NewDocumentsSelectionDataCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/selection_data/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentsDestroyRequest generates requests for DocumentsDestroy
func NewDocumentsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsRetrieveRequest generates requests for DocumentsRetrieve
func NewDocumentsRetrieveRequest(server string, id int, params *DocumentsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsPartialUpdateRequest calls the generic DocumentsPartialUpdate builder with application/json body
func NewDocumentsPartialUpdateRequest(server string, id int, body DocumentsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDocumentsPartialUpdateRequestWithFormdataBody calls the generic DocumentsPartialUpdate builder with application/x-www-form-urlencoded body
func NewDocumentsPartialUpdateRequestWithFormdataBody(server string, id int, body DocumentsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDocumentsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDocumentsPartialUpdateRequestWithBody generates requests for DocumentsPartialUpdate with any type of body
func NewDocumentsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentsUpdateRequest calls the generic DocumentsUpdate builder with application/json body
func NewDocumentsUpdateRequest(server string, id int, body DocumentsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDocumentsUpdateRequestWithFormdataBody calls the generic DocumentsUpdate builder with application/x-www-form-urlencoded body
func NewDocumentsUpdateRequestWithFormdataBody(server string, id int, body DocumentsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDocumentsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDocumentsUpdateRequestWithBody generates requests for DocumentsUpdate with any type of body
func NewDocumentsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentsDownloadRetrieveRequest generates requests for DocumentsDownloadRetrieve
func NewDocumentsDownloadRetrieveRequest(server string, id int, params *DocumentsDownloadRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/download/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Original != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "original", runtime.ParamLocationQuery, *params.Original); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsEmailCreateRequest calls the generic DocumentsEmailCreate builder with application/json body
func NewDocumentsEmailCreateRequest(server string, id int, body DocumentsEmailCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentsEmailCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDocumentsEmailCreateRequestWithFormdataBody calls the generic DocumentsEmailCreate builder with application/x-www-form-urlencoded body
func NewDocumentsEmailCreateRequestWithFormdataBody(server string, id int, body DocumentsEmailCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDocumentsEmailCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDocumentsEmailCreateRequestWithBody generates requests for DocumentsEmailCreate with any type of body
func NewDocumentsEmailCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/email/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentsHistoryListRequest generates requests for DocumentsHistoryList
func NewDocumentsHistoryListRequest(server string, id int, params *DocumentsHistoryListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/history/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsMetadataRetrieveRequest generates requests for DocumentsMetadataRetrieve
func NewDocumentsMetadataRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsNotesDestroyRequest generates requests for DocumentsNotesDestroy
func NewDocumentsNotesDestroyRequest(server string, id int, params *DocumentsNotesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsNotesListRequest generates requests for DocumentsNotesList
func NewDocumentsNotesListRequest(server string, id int, params *DocumentsNotesListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsNotesCreateRequest calls the generic DocumentsNotesCreate builder with application/json body
func NewDocumentsNotesCreateRequest(server string, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentsNotesCreateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDocumentsNotesCreateRequestWithFormdataBody calls the generic DocumentsNotesCreate builder with application/x-www-form-urlencoded body
func NewDocumentsNotesCreateRequestWithFormdataBody(server string, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDocumentsNotesCreateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDocumentsNotesCreateRequestWithBody generates requests for DocumentsNotesCreate with any type of body
func NewDocumentsNotesCreateRequestWithBody(server string, id int, params *DocumentsNotesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentsPreviewRetrieveRequest generates requests for DocumentsPreviewRetrieve
func NewDocumentsPreviewRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentShareLinksRequest generates requests for DocumentShareLinks
func NewDocumentShareLinksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/share_links/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsSuggestionsRetrieveRequest generates requests for DocumentsSuggestionsRetrieve
func NewDocumentsSuggestionsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/suggestions/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentsThumbRetrieveRequest generates requests for DocumentsThumbRetrieve
func NewDocumentsThumbRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/documents/%s/thumb/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsListRequest generates requests for GroupsList
func NewGroupsListRequest(server string, params *GroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iendswith", runtime.ParamLocationQuery, *params.NameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsCreateRequest calls the generic GroupsCreate builder with application/json body
func NewGroupsCreateRequest(server string, body GroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewGroupsCreateRequestWithFormdataBody calls the generic GroupsCreate builder with application/x-www-form-urlencoded body
func NewGroupsCreateRequestWithFormdataBody(server string, body GroupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGroupsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGroupsCreateRequestWithBody generates requests for GroupsCreate with any type of body
func NewGroupsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGroupsDestroyRequest generates requests for GroupsDestroy
func NewGroupsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsRetrieveRequest generates requests for GroupsRetrieve
func NewGroupsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsPartialUpdateRequest calls the generic GroupsPartialUpdate builder with application/json body
func NewGroupsPartialUpdateRequest(server string, id int, body GroupsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGroupsPartialUpdateRequestWithFormdataBody calls the generic GroupsPartialUpdate builder with application/x-www-form-urlencoded body
func NewGroupsPartialUpdateRequestWithFormdataBody(server string, id int, body GroupsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGroupsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewGroupsPartialUpdateRequestWithBody generates requests for GroupsPartialUpdate with any type of body
func NewGroupsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGroupsUpdateRequest calls the generic GroupsUpdate builder with application/json body
func NewGroupsUpdateRequest(server string, id int, body GroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGroupsUpdateRequestWithFormdataBody calls the generic GroupsUpdate builder with application/x-www-form-urlencoded body
func NewGroupsUpdateRequestWithFormdataBody(server string, id int, body GroupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGroupsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewGroupsUpdateRequestWithBody generates requests for GroupsUpdate with any type of body
func NewGroupsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogsListRequest generates requests for LogsList
func NewLogsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/logs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveLogRequest generates requests for RetrieveLog
func NewRetrieveLogRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/logs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMailAccountsListRequest generates requests for MailAccountsList
func NewMailAccountsListRequest(server string, params *MailAccountsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMailAccountsCreateRequest calls the generic MailAccountsCreate builder with application/json body
func NewMailAccountsCreateRequest(server string, body MailAccountsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMailAccountsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewMailAccountsCreateRequestWithFormdataBody calls the generic MailAccountsCreate builder with application/x-www-form-urlencoded body
func NewMailAccountsCreateRequestWithFormdataBody(server string, body MailAccountsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMailAccountsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMailAccountsCreateRequestWithBody generates requests for MailAccountsCreate with any type of body
func NewMailAccountsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMailAccountTestRequest calls the generic MailAccountTest builder with application/json body
func NewMailAccountTestRequest(server string, body MailAccountTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMailAccountTestRequestWithBody(server, "application/json", bodyReader)
}

// NewMailAccountTestRequestWithFormdataBody calls the generic MailAccountTest builder with application/x-www-form-urlencoded body
func NewMailAccountTestRequestWithFormdataBody(server string, body MailAccountTestFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMailAccountTestRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMailAccountTestRequestWithBody generates requests for MailAccountTest with any type of body
func NewMailAccountTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_accounts/test/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMailAccountsDestroyRequest generates requests for MailAccountsDestroy
func NewMailAccountsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_accounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMailAccountsRetrieveRequest generates requests for MailAccountsRetrieve
func NewMailAccountsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_accounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMailAccountsPartialUpdateRequest calls the generic MailAccountsPartialUpdate builder with application/json body
func NewMailAccountsPartialUpdateRequest(server string, id int, body MailAccountsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMailAccountsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMailAccountsPartialUpdateRequestWithFormdataBody calls the generic MailAccountsPartialUpdate builder with application/x-www-form-urlencoded body
func NewMailAccountsPartialUpdateRequestWithFormdataBody(server string, id int, body MailAccountsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMailAccountsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMailAccountsPartialUpdateRequestWithBody generates requests for MailAccountsPartialUpdate with any type of body
func NewMailAccountsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_accounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMailAccountsUpdateRequest calls the generic MailAccountsUpdate builder with application/json body
func NewMailAccountsUpdateRequest(server string, id int, body MailAccountsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMailAccountsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMailAccountsUpdateRequestWithFormdataBody calls the generic MailAccountsUpdate builder with application/x-www-form-urlencoded body
func NewMailAccountsUpdateRequestWithFormdataBody(server string, id int, body MailAccountsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMailAccountsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMailAccountsUpdateRequestWithBody generates requests for MailAccountsUpdate with any type of body
func NewMailAccountsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_accounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMailAccountProcessRequest calls the generic MailAccountProcess builder with application/json body
func NewMailAccountProcessRequest(server string, id int, body MailAccountProcessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMailAccountProcessRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMailAccountProcessRequestWithFormdataBody calls the generic MailAccountProcess builder with application/x-www-form-urlencoded body
func NewMailAccountProcessRequestWithFormdataBody(server string, id int, body MailAccountProcessFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMailAccountProcessRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMailAccountProcessRequestWithBody generates requests for MailAccountProcess with any type of body
func NewMailAccountProcessRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_accounts/%s/process/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMailRulesListRequest generates requests for MailRulesList
func NewMailRulesListRequest(server string, params *MailRulesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_rules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMailRulesCreateRequest calls the generic MailRulesCreate builder with application/json body
func NewMailRulesCreateRequest(server string, body MailRulesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMailRulesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewMailRulesCreateRequestWithFormdataBody calls the generic MailRulesCreate builder with application/x-www-form-urlencoded body
func NewMailRulesCreateRequestWithFormdataBody(server string, body MailRulesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMailRulesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMailRulesCreateRequestWithBody generates requests for MailRulesCreate with any type of body
func NewMailRulesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_rules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMailRulesDestroyRequest generates requests for MailRulesDestroy
func NewMailRulesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMailRulesRetrieveRequest generates requests for MailRulesRetrieve
func NewMailRulesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMailRulesPartialUpdateRequest calls the generic MailRulesPartialUpdate builder with application/json body
func NewMailRulesPartialUpdateRequest(server string, id int, body MailRulesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMailRulesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMailRulesPartialUpdateRequestWithFormdataBody calls the generic MailRulesPartialUpdate builder with application/x-www-form-urlencoded body
func NewMailRulesPartialUpdateRequestWithFormdataBody(server string, id int, body MailRulesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMailRulesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMailRulesPartialUpdateRequestWithBody generates requests for MailRulesPartialUpdate with any type of body
func NewMailRulesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMailRulesUpdateRequest calls the generic MailRulesUpdate builder with application/json body
func NewMailRulesUpdateRequest(server string, id int, body MailRulesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMailRulesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMailRulesUpdateRequestWithFormdataBody calls the generic MailRulesUpdate builder with application/x-www-form-urlencoded body
func NewMailRulesUpdateRequestWithFormdataBody(server string, id int, body MailRulesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMailRulesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMailRulesUpdateRequestWithBody generates requests for MailRulesUpdate with any type of body
func NewMailRulesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mail_rules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOauthCallbackRetrieveRequest generates requests for OauthCallbackRetrieve
func NewOauthCallbackRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/oauth/callback/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileRetrieveRequest generates requests for ProfileRetrieve
func NewProfileRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilePartialUpdateRequest calls the generic ProfilePartialUpdate builder with application/json body
func NewProfilePartialUpdateRequest(server string, body ProfilePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProfilePartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewProfilePartialUpdateRequestWithFormdataBody calls the generic ProfilePartialUpdate builder with application/x-www-form-urlencoded body
func NewProfilePartialUpdateRequestWithFormdataBody(server string, body ProfilePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProfilePartialUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProfilePartialUpdateRequestWithBody generates requests for ProfilePartialUpdate with any type of body
func NewProfilePartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProfileDisconnectSocialAccountCreateRequest calls the generic ProfileDisconnectSocialAccountCreate builder with application/json body
func NewProfileDisconnectSocialAccountCreateRequest(server string, body ProfileDisconnectSocialAccountCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProfileDisconnectSocialAccountCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProfileDisconnectSocialAccountCreateRequestWithBody generates requests for ProfileDisconnectSocialAccountCreate with any type of body
func NewProfileDisconnectSocialAccountCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile/disconnect_social_account/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProfileGenerateAuthTokenCreateRequest generates requests for ProfileGenerateAuthTokenCreate
func NewProfileGenerateAuthTokenCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile/generate_auth_token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileSocialAccountProvidersRetrieveRequest generates requests for ProfileSocialAccountProvidersRetrieve
func NewProfileSocialAccountProvidersRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile/social_account_providers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileTotpDestroyRequest generates requests for ProfileTotpDestroy
func NewProfileTotpDestroyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile/totp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileTotpRetrieveRequest generates requests for ProfileTotpRetrieve
func NewProfileTotpRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile/totp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileTotpCreateRequest calls the generic ProfileTotpCreate builder with application/json body
func NewProfileTotpCreateRequest(server string, body ProfileTotpCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProfileTotpCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProfileTotpCreateRequestWithBody generates requests for ProfileTotpCreate with any type of body
func NewProfileTotpCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile/totp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoteVersionRetrieveRequest generates requests for RemoteVersionRetrieve
func NewRemoteVersionRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/remote_version/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSavedViewsListRequest generates requests for SavedViewsList
func NewSavedViewsListRequest(server string, params *SavedViewsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saved_views/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSavedViewsCreateRequest calls the generic SavedViewsCreate builder with application/json body
func NewSavedViewsCreateRequest(server string, body SavedViewsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSavedViewsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSavedViewsCreateRequestWithFormdataBody calls the generic SavedViewsCreate builder with application/x-www-form-urlencoded body
func NewSavedViewsCreateRequestWithFormdataBody(server string, body SavedViewsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSavedViewsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSavedViewsCreateRequestWithBody generates requests for SavedViewsCreate with any type of body
func NewSavedViewsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saved_views/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSavedViewsDestroyRequest generates requests for SavedViewsDestroy
func NewSavedViewsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saved_views/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSavedViewsRetrieveRequest generates requests for SavedViewsRetrieve
func NewSavedViewsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saved_views/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSavedViewsPartialUpdateRequest calls the generic SavedViewsPartialUpdate builder with application/json body
func NewSavedViewsPartialUpdateRequest(server string, id int, body SavedViewsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSavedViewsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSavedViewsPartialUpdateRequestWithFormdataBody calls the generic SavedViewsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSavedViewsPartialUpdateRequestWithFormdataBody(server string, id int, body SavedViewsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSavedViewsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSavedViewsPartialUpdateRequestWithBody generates requests for SavedViewsPartialUpdate with any type of body
func NewSavedViewsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saved_views/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSavedViewsUpdateRequest calls the generic SavedViewsUpdate builder with application/json body
func NewSavedViewsUpdateRequest(server string, id int, body SavedViewsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSavedViewsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSavedViewsUpdateRequestWithFormdataBody calls the generic SavedViewsUpdate builder with application/x-www-form-urlencoded body
func NewSavedViewsUpdateRequestWithFormdataBody(server string, id int, body SavedViewsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSavedViewsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSavedViewsUpdateRequestWithBody generates requests for SavedViewsUpdate with any type of body
func NewSavedViewsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saved_views/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchRetrieveRequest generates requests for SearchRetrieve
func NewSearchRetrieveRequest(server string, params *SearchRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/search/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DbOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db_only", runtime.ParamLocationQuery, *params.DbOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchAutocompleteListRequest generates requests for SearchAutocompleteList
func NewSearchAutocompleteListRequest(server string, params *SearchAutocompleteListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/search/autocomplete/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Term != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "term", runtime.ParamLocationQuery, *params.Term); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShareLinksListRequest generates requests for ShareLinksList
func NewShareLinksListRequest(server string, params *ShareLinksListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/share_links/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatedDateGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__date__gt", runtime.ParamLocationQuery, *params.CreatedDateGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDateGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__date__gte", runtime.ParamLocationQuery, *params.CreatedDateGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDateLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__date__lt", runtime.ParamLocationQuery, *params.CreatedDateLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDateLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__date__lte", runtime.ParamLocationQuery, *params.CreatedDateLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDateGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__date__gt", runtime.ParamLocationQuery, *params.ExpirationDateGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDateGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__date__gte", runtime.ParamLocationQuery, *params.ExpirationDateGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDateLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__date__lt", runtime.ParamLocationQuery, *params.ExpirationDateLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDateLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__date__lte", runtime.ParamLocationQuery, *params.ExpirationDateLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__day", runtime.ParamLocationQuery, *params.ExpirationDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__gt", runtime.ParamLocationQuery, *params.ExpirationGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__gte", runtime.ParamLocationQuery, *params.ExpirationGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__lt", runtime.ParamLocationQuery, *params.ExpirationLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__lte", runtime.ParamLocationQuery, *params.ExpirationLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__month", runtime.ParamLocationQuery, *params.ExpirationMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration__year", runtime.ParamLocationQuery, *params.ExpirationYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShareLinksCreateRequest calls the generic ShareLinksCreate builder with application/json body
func NewShareLinksCreateRequest(server string, body ShareLinksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShareLinksCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewShareLinksCreateRequestWithFormdataBody calls the generic ShareLinksCreate builder with application/x-www-form-urlencoded body
func NewShareLinksCreateRequestWithFormdataBody(server string, body ShareLinksCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewShareLinksCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewShareLinksCreateRequestWithBody generates requests for ShareLinksCreate with any type of body
func NewShareLinksCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/share_links/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShareLinksDestroyRequest generates requests for ShareLinksDestroy
func NewShareLinksDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/share_links/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShareLinksRetrieveRequest generates requests for ShareLinksRetrieve
func NewShareLinksRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/share_links/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShareLinksPartialUpdateRequest calls the generic ShareLinksPartialUpdate builder with application/json body
func NewShareLinksPartialUpdateRequest(server string, id int, body ShareLinksPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShareLinksPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewShareLinksPartialUpdateRequestWithFormdataBody calls the generic ShareLinksPartialUpdate builder with application/x-www-form-urlencoded body
func NewShareLinksPartialUpdateRequestWithFormdataBody(server string, id int, body ShareLinksPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewShareLinksPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewShareLinksPartialUpdateRequestWithBody generates requests for ShareLinksPartialUpdate with any type of body
func NewShareLinksPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/share_links/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShareLinksUpdateRequest calls the generic ShareLinksUpdate builder with application/json body
func NewShareLinksUpdateRequest(server string, id int, body ShareLinksUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShareLinksUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewShareLinksUpdateRequestWithFormdataBody calls the generic ShareLinksUpdate builder with application/x-www-form-urlencoded body
func NewShareLinksUpdateRequestWithFormdataBody(server string, id int, body ShareLinksUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewShareLinksUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewShareLinksUpdateRequestWithBody generates requests for ShareLinksUpdate with any type of body
func NewShareLinksUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/share_links/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStatisticsRetrieveRequest generates requests for StatisticsRetrieve
func NewStatisticsRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/statistics/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatusRetrieveRequest generates requests for StatusRetrieve
func NewStatusRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStoragePathsListRequest generates requests for StoragePathsList
func NewStoragePathsListRequest(server string, params *StoragePathsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/storage_paths/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iendswith", runtime.ParamLocationQuery, *params.NameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PathIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path__icontains", runtime.ParamLocationQuery, *params.PathIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PathIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path__iendswith", runtime.ParamLocationQuery, *params.PathIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PathIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path__iexact", runtime.ParamLocationQuery, *params.PathIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PathIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path__istartswith", runtime.ParamLocationQuery, *params.PathIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStoragePathsCreateRequest calls the generic StoragePathsCreate builder with application/json body
func NewStoragePathsCreateRequest(server string, body StoragePathsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStoragePathsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewStoragePathsCreateRequestWithFormdataBody calls the generic StoragePathsCreate builder with application/x-www-form-urlencoded body
func NewStoragePathsCreateRequestWithFormdataBody(server string, body StoragePathsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStoragePathsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewStoragePathsCreateRequestWithBody generates requests for StoragePathsCreate with any type of body
func NewStoragePathsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/storage_paths/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStoragePathsTestCreateRequest calls the generic StoragePathsTestCreate builder with application/json body
func NewStoragePathsTestCreateRequest(server string, body StoragePathsTestCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStoragePathsTestCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewStoragePathsTestCreateRequestWithFormdataBody calls the generic StoragePathsTestCreate builder with application/x-www-form-urlencoded body
func NewStoragePathsTestCreateRequestWithFormdataBody(server string, body StoragePathsTestCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStoragePathsTestCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewStoragePathsTestCreateRequestWithBody generates requests for StoragePathsTestCreate with any type of body
func NewStoragePathsTestCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/storage_paths/test/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStoragePathsDestroyRequest generates requests for StoragePathsDestroy
func NewStoragePathsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/storage_paths/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStoragePathsRetrieveRequest generates requests for StoragePathsRetrieve
func NewStoragePathsRetrieveRequest(server string, id int, params *StoragePathsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/storage_paths/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStoragePathsPartialUpdateRequest calls the generic StoragePathsPartialUpdate builder with application/json body
func NewStoragePathsPartialUpdateRequest(server string, id int, body StoragePathsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStoragePathsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewStoragePathsPartialUpdateRequestWithFormdataBody calls the generic StoragePathsPartialUpdate builder with application/x-www-form-urlencoded body
func NewStoragePathsPartialUpdateRequestWithFormdataBody(server string, id int, body StoragePathsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStoragePathsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewStoragePathsPartialUpdateRequestWithBody generates requests for StoragePathsPartialUpdate with any type of body
func NewStoragePathsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/storage_paths/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStoragePathsUpdateRequest calls the generic StoragePathsUpdate builder with application/json body
func NewStoragePathsUpdateRequest(server string, id int, body StoragePathsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStoragePathsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewStoragePathsUpdateRequestWithFormdataBody calls the generic StoragePathsUpdate builder with application/x-www-form-urlencoded body
func NewStoragePathsUpdateRequestWithFormdataBody(server string, id int, body StoragePathsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStoragePathsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewStoragePathsUpdateRequestWithBody generates requests for StoragePathsUpdate with any type of body
func NewStoragePathsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/storage_paths/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTagsListRequest generates requests for TagsList
func NewTagsListRequest(server string, params *TagsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iendswith", runtime.ParamLocationQuery, *params.NameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iexact", runtime.ParamLocationQuery, *params.NameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__istartswith", runtime.ParamLocationQuery, *params.NameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTagsCreateRequest calls the generic TagsCreate builder with application/json body
func NewTagsCreateRequest(server string, body TagsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTagsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTagsCreateRequestWithFormdataBody calls the generic TagsCreate builder with application/x-www-form-urlencoded body
func NewTagsCreateRequestWithFormdataBody(server string, body TagsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTagsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTagsCreateRequestWithBody generates requests for TagsCreate with any type of body
func NewTagsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTagsDestroyRequest generates requests for TagsDestroy
func NewTagsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTagsRetrieveRequest generates requests for TagsRetrieve
func NewTagsRetrieveRequest(server string, id int, params *TagsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FullPerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full_perms", runtime.ParamLocationQuery, *params.FullPerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTagsPartialUpdateRequest calls the generic TagsPartialUpdate builder with application/json body
func NewTagsPartialUpdateRequest(server string, id int, body TagsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTagsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTagsPartialUpdateRequestWithFormdataBody calls the generic TagsPartialUpdate builder with application/x-www-form-urlencoded body
func NewTagsPartialUpdateRequestWithFormdataBody(server string, id int, body TagsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTagsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTagsPartialUpdateRequestWithBody generates requests for TagsPartialUpdate with any type of body
func NewTagsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTagsUpdateRequest calls the generic TagsUpdate builder with application/json body
func NewTagsUpdateRequest(server string, id int, body TagsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTagsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTagsUpdateRequestWithFormdataBody calls the generic TagsUpdate builder with application/x-www-form-urlencoded body
func NewTagsUpdateRequestWithFormdataBody(server string, id int, body TagsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTagsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTagsUpdateRequestWithBody generates requests for TagsUpdate with any type of body
func NewTagsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTasksListRequest generates requests for TasksList
func NewTasksListRequest(server string, params *TasksListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tasks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Acknowledged != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acknowledged", runtime.ParamLocationQuery, *params.Acknowledged); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "task_id", runtime.ParamLocationQuery, *params.TaskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaskName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "task_name", runtime.ParamLocationQuery, *params.TaskName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcknowledgeTasksRequest calls the generic AcknowledgeTasks builder with application/json body
func NewAcknowledgeTasksRequest(server string, params *AcknowledgeTasksParams, body AcknowledgeTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAcknowledgeTasksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAcknowledgeTasksRequestWithBody generates requests for AcknowledgeTasks with any type of body
func NewAcknowledgeTasksRequestWithBody(server string, params *AcknowledgeTasksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tasks/acknowledge/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TaskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "task_id", runtime.ParamLocationQuery, *params.TaskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTasksRunCreateRequest calls the generic TasksRunCreate builder with application/json body
func NewTasksRunCreateRequest(server string, params *TasksRunCreateParams, body TasksRunCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTasksRunCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewTasksRunCreateRequestWithFormdataBody calls the generic TasksRunCreate builder with application/x-www-form-urlencoded body
func NewTasksRunCreateRequestWithFormdataBody(server string, params *TasksRunCreateParams, body TasksRunCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTasksRunCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewTasksRunCreateRequestWithBody generates requests for TasksRunCreate with any type of body
func NewTasksRunCreateRequestWithBody(server string, params *TasksRunCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tasks/run/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TaskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "task_id", runtime.ParamLocationQuery, *params.TaskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTasksRetrieveRequest generates requests for TasksRetrieve
func NewTasksRetrieveRequest(server string, id int, params *TasksRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tasks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TaskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "task_id", runtime.ParamLocationQuery, *params.TaskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTokenCreateRequest calls the generic TokenCreate builder with application/json body
func NewTokenCreateRequest(server string, body TokenCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTokenCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenCreateRequestWithFormdataBody calls the generic TokenCreate builder with application/x-www-form-urlencoded body
func NewTokenCreateRequestWithFormdataBody(server string, body TokenCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTokenCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTokenCreateRequestWithBody generates requests for TokenCreate with any type of body
func NewTokenCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTrashListRequest generates requests for TrashList
func NewTrashListRequest(server string, params *TrashListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trash/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrashCreateRequest calls the generic TrashCreate builder with application/json body
func NewTrashCreateRequest(server string, body TrashCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTrashCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTrashCreateRequestWithFormdataBody calls the generic TrashCreate builder with application/x-www-form-urlencoded body
func NewTrashCreateRequestWithFormdataBody(server string, body TrashCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTrashCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTrashCreateRequestWithBody generates requests for TrashCreate with any type of body
func NewTrashCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trash/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUiSettingsRetrieveRequest generates requests for UiSettingsRetrieve
func NewUiSettingsRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ui_settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUiSettingsCreateRequest calls the generic UiSettingsCreate builder with application/json body
func NewUiSettingsCreateRequest(server string, body UiSettingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUiSettingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUiSettingsCreateRequestWithFormdataBody calls the generic UiSettingsCreate builder with application/x-www-form-urlencoded body
func NewUiSettingsCreateRequestWithFormdataBody(server string, body UiSettingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUiSettingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUiSettingsCreateRequestWithBody generates requests for UiSettingsCreate with any type of body
func NewUiSettingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ui_settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersListRequest generates requests for UsersList
func NewUsersListRequest(server string, params *UsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsernameIcontains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__icontains", runtime.ParamLocationQuery, *params.UsernameIcontains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsernameIendswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__iendswith", runtime.ParamLocationQuery, *params.UsernameIendswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsernameIexact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__iexact", runtime.ParamLocationQuery, *params.UsernameIexact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsernameIstartswith != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__istartswith", runtime.ParamLocationQuery, *params.UsernameIstartswith); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersCreateRequest calls the generic UsersCreate builder with application/json body
func NewUsersCreateRequest(server string, body UsersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersCreateRequestWithFormdataBody calls the generic UsersCreate builder with application/x-www-form-urlencoded body
func NewUsersCreateRequestWithFormdataBody(server string, body UsersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersCreateRequestWithBody generates requests for UsersCreate with any type of body
func NewUsersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersDestroyRequest generates requests for UsersDestroy
func NewUsersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersRetrieveRequest generates requests for UsersRetrieve
func NewUsersRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersPartialUpdateRequest calls the generic UsersPartialUpdate builder with application/json body
func NewUsersPartialUpdateRequest(server string, id int, body UsersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersPartialUpdateRequestWithFormdataBody calls the generic UsersPartialUpdate builder with application/x-www-form-urlencoded body
func NewUsersPartialUpdateRequestWithFormdataBody(server string, id int, body UsersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersPartialUpdateRequestWithBody generates requests for UsersPartialUpdate with any type of body
func NewUsersPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUpdateRequest calls the generic UsersUpdate builder with application/json body
func NewUsersUpdateRequest(server string, id int, body UsersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersUpdateRequestWithFormdataBody calls the generic UsersUpdate builder with application/x-www-form-urlencoded body
func NewUsersUpdateRequestWithFormdataBody(server string, id int, body UsersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersUpdateRequestWithBody generates requests for UsersUpdate with any type of body
func NewUsersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersDeactivateTotpCreateRequest generates requests for UsersDeactivateTotpCreate
func NewUsersDeactivateTotpCreateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/deactivate_totp/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowActionsListRequest generates requests for WorkflowActionsList
func NewWorkflowActionsListRequest(server string, params *WorkflowActionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_actions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowActionsCreateRequest calls the generic WorkflowActionsCreate builder with application/json body
func NewWorkflowActionsCreateRequest(server string, body WorkflowActionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowActionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewWorkflowActionsCreateRequestWithFormdataBody calls the generic WorkflowActionsCreate builder with application/x-www-form-urlencoded body
func NewWorkflowActionsCreateRequestWithFormdataBody(server string, body WorkflowActionsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWorkflowActionsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewWorkflowActionsCreateRequestWithBody generates requests for WorkflowActionsCreate with any type of body
func NewWorkflowActionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_actions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowActionsDestroyRequest generates requests for WorkflowActionsDestroy
func NewWorkflowActionsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_actions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowActionsRetrieveRequest generates requests for WorkflowActionsRetrieve
func NewWorkflowActionsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_actions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowActionsPartialUpdateRequest calls the generic WorkflowActionsPartialUpdate builder with application/json body
func NewWorkflowActionsPartialUpdateRequest(server string, id int, body WorkflowActionsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowActionsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewWorkflowActionsPartialUpdateRequestWithFormdataBody calls the generic WorkflowActionsPartialUpdate builder with application/x-www-form-urlencoded body
func NewWorkflowActionsPartialUpdateRequestWithFormdataBody(server string, id int, body WorkflowActionsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWorkflowActionsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewWorkflowActionsPartialUpdateRequestWithBody generates requests for WorkflowActionsPartialUpdate with any type of body
func NewWorkflowActionsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_actions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowActionsUpdateRequest calls the generic WorkflowActionsUpdate builder with application/json body
func NewWorkflowActionsUpdateRequest(server string, id int, body WorkflowActionsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowActionsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewWorkflowActionsUpdateRequestWithFormdataBody calls the generic WorkflowActionsUpdate builder with application/x-www-form-urlencoded body
func NewWorkflowActionsUpdateRequestWithFormdataBody(server string, id int, body WorkflowActionsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWorkflowActionsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewWorkflowActionsUpdateRequestWithBody generates requests for WorkflowActionsUpdate with any type of body
func NewWorkflowActionsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_actions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowTriggersListRequest generates requests for WorkflowTriggersList
func NewWorkflowTriggersListRequest(server string, params *WorkflowTriggersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_triggers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowTriggersCreateRequest calls the generic WorkflowTriggersCreate builder with application/json body
func NewWorkflowTriggersCreateRequest(server string, body WorkflowTriggersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowTriggersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewWorkflowTriggersCreateRequestWithFormdataBody calls the generic WorkflowTriggersCreate builder with application/x-www-form-urlencoded body
func NewWorkflowTriggersCreateRequestWithFormdataBody(server string, body WorkflowTriggersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWorkflowTriggersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewWorkflowTriggersCreateRequestWithBody generates requests for WorkflowTriggersCreate with any type of body
func NewWorkflowTriggersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_triggers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowTriggersDestroyRequest generates requests for WorkflowTriggersDestroy
func NewWorkflowTriggersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_triggers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowTriggersRetrieveRequest generates requests for WorkflowTriggersRetrieve
func NewWorkflowTriggersRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_triggers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowTriggersPartialUpdateRequest calls the generic WorkflowTriggersPartialUpdate builder with application/json body
func NewWorkflowTriggersPartialUpdateRequest(server string, id int, body WorkflowTriggersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowTriggersPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewWorkflowTriggersPartialUpdateRequestWithFormdataBody calls the generic WorkflowTriggersPartialUpdate builder with application/x-www-form-urlencoded body
func NewWorkflowTriggersPartialUpdateRequestWithFormdataBody(server string, id int, body WorkflowTriggersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWorkflowTriggersPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewWorkflowTriggersPartialUpdateRequestWithBody generates requests for WorkflowTriggersPartialUpdate with any type of body
func NewWorkflowTriggersPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_triggers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowTriggersUpdateRequest calls the generic WorkflowTriggersUpdate builder with application/json body
func NewWorkflowTriggersUpdateRequest(server string, id int, body WorkflowTriggersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowTriggersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewWorkflowTriggersUpdateRequestWithFormdataBody calls the generic WorkflowTriggersUpdate builder with application/x-www-form-urlencoded body
func NewWorkflowTriggersUpdateRequestWithFormdataBody(server string, id int, body WorkflowTriggersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWorkflowTriggersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewWorkflowTriggersUpdateRequestWithBody generates requests for WorkflowTriggersUpdate with any type of body
func NewWorkflowTriggersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflow_triggers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowsListRequest generates requests for WorkflowsList
func NewWorkflowsListRequest(server string, params *WorkflowsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflows/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsCreateRequest calls the generic WorkflowsCreate builder with application/json body
func NewWorkflowsCreateRequest(server string, body WorkflowsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewWorkflowsCreateRequestWithFormdataBody calls the generic WorkflowsCreate builder with application/x-www-form-urlencoded body
func NewWorkflowsCreateRequestWithFormdataBody(server string, body WorkflowsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWorkflowsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewWorkflowsCreateRequestWithBody generates requests for WorkflowsCreate with any type of body
func NewWorkflowsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflows/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowsDestroyRequest generates requests for WorkflowsDestroy
func NewWorkflowsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflows/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsRetrieveRequest generates requests for WorkflowsRetrieve
func NewWorkflowsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflows/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsPartialUpdateRequest calls the generic WorkflowsPartialUpdate builder with application/json body
func NewWorkflowsPartialUpdateRequest(server string, id int, body WorkflowsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewWorkflowsPartialUpdateRequestWithFormdataBody calls the generic WorkflowsPartialUpdate builder with application/x-www-form-urlencoded body
func NewWorkflowsPartialUpdateRequestWithFormdataBody(server string, id int, body WorkflowsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWorkflowsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewWorkflowsPartialUpdateRequestWithBody generates requests for WorkflowsPartialUpdate with any type of body
func NewWorkflowsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflows/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowsUpdateRequest calls the generic WorkflowsUpdate builder with application/json body
func NewWorkflowsUpdateRequest(server string, id int, body WorkflowsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewWorkflowsUpdateRequestWithFormdataBody calls the generic WorkflowsUpdate builder with application/x-www-form-urlencoded body
func NewWorkflowsUpdateRequestWithFormdataBody(server string, id int, body WorkflowsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewWorkflowsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewWorkflowsUpdateRequestWithBody generates requests for WorkflowsUpdate with any type of body
func NewWorkflowsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/workflows/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BulkEditObjectsWithBodyWithResponse request with any body
	BulkEditObjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkEditObjectsResp, error)

	BulkEditObjectsWithResponse(ctx context.Context, body BulkEditObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkEditObjectsResp, error)

	// ConfigListWithResponse request
	ConfigListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigListResp, error)

	// ConfigDestroyWithResponse request
	ConfigDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ConfigDestroyResp, error)

	// ConfigRetrieveWithResponse request
	ConfigRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ConfigRetrieveResp, error)

	// ConfigPartialUpdateWithBodyWithResponse request with any body
	ConfigPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfigPartialUpdateResp, error)

	ConfigPartialUpdateWithResponse(ctx context.Context, id int, body ConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfigPartialUpdateResp, error)

	ConfigPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ConfigPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ConfigPartialUpdateResp, error)

	// ConfigUpdateWithBodyWithResponse request with any body
	ConfigUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfigUpdateResp, error)

	ConfigUpdateWithResponse(ctx context.Context, id int, body ConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfigUpdateResp, error)

	ConfigUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ConfigUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ConfigUpdateResp, error)

	// CorrespondentsListWithResponse request
	CorrespondentsListWithResponse(ctx context.Context, params *CorrespondentsListParams, reqEditors ...RequestEditorFn) (*CorrespondentsListResp, error)

	// CorrespondentsCreateWithBodyWithResponse request with any body
	CorrespondentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrespondentsCreateResp, error)

	CorrespondentsCreateWithResponse(ctx context.Context, body CorrespondentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsCreateResp, error)

	CorrespondentsCreateWithFormdataBodyWithResponse(ctx context.Context, body CorrespondentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsCreateResp, error)

	// CorrespondentsDestroyWithResponse request
	CorrespondentsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CorrespondentsDestroyResp, error)

	// CorrespondentsRetrieveWithResponse request
	CorrespondentsRetrieveWithResponse(ctx context.Context, id int, params *CorrespondentsRetrieveParams, reqEditors ...RequestEditorFn) (*CorrespondentsRetrieveResp, error)

	// CorrespondentsPartialUpdateWithBodyWithResponse request with any body
	CorrespondentsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrespondentsPartialUpdateResp, error)

	CorrespondentsPartialUpdateWithResponse(ctx context.Context, id int, body CorrespondentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsPartialUpdateResp, error)

	CorrespondentsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CorrespondentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsPartialUpdateResp, error)

	// CorrespondentsUpdateWithBodyWithResponse request with any body
	CorrespondentsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrespondentsUpdateResp, error)

	CorrespondentsUpdateWithResponse(ctx context.Context, id int, body CorrespondentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsUpdateResp, error)

	CorrespondentsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CorrespondentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsUpdateResp, error)

	// CustomFieldsListWithResponse request
	CustomFieldsListWithResponse(ctx context.Context, params *CustomFieldsListParams, reqEditors ...RequestEditorFn) (*CustomFieldsListResp, error)

	// CustomFieldsCreateWithBodyWithResponse request with any body
	CustomFieldsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsCreateResp, error)

	CustomFieldsCreateWithResponse(ctx context.Context, body CustomFieldsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsCreateResp, error)

	CustomFieldsCreateWithFormdataBodyWithResponse(ctx context.Context, body CustomFieldsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsCreateResp, error)

	// CustomFieldsDestroyWithResponse request
	CustomFieldsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CustomFieldsDestroyResp, error)

	// CustomFieldsRetrieveWithResponse request
	CustomFieldsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CustomFieldsRetrieveResp, error)

	// CustomFieldsPartialUpdateWithBodyWithResponse request with any body
	CustomFieldsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsPartialUpdateResp, error)

	CustomFieldsPartialUpdateWithResponse(ctx context.Context, id int, body CustomFieldsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsPartialUpdateResp, error)

	CustomFieldsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CustomFieldsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsPartialUpdateResp, error)

	// CustomFieldsUpdateWithBodyWithResponse request with any body
	CustomFieldsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsUpdateResp, error)

	CustomFieldsUpdateWithResponse(ctx context.Context, id int, body CustomFieldsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsUpdateResp, error)

	CustomFieldsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CustomFieldsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsUpdateResp, error)

	// DocumentTypesListWithResponse request
	DocumentTypesListWithResponse(ctx context.Context, params *DocumentTypesListParams, reqEditors ...RequestEditorFn) (*DocumentTypesListResp, error)

	// DocumentTypesCreateWithBodyWithResponse request with any body
	DocumentTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentTypesCreateResp, error)

	DocumentTypesCreateWithResponse(ctx context.Context, body DocumentTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesCreateResp, error)

	DocumentTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body DocumentTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesCreateResp, error)

	// DocumentTypesDestroyWithResponse request
	DocumentTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentTypesDestroyResp, error)

	// DocumentTypesRetrieveWithResponse request
	DocumentTypesRetrieveWithResponse(ctx context.Context, id int, params *DocumentTypesRetrieveParams, reqEditors ...RequestEditorFn) (*DocumentTypesRetrieveResp, error)

	// DocumentTypesPartialUpdateWithBodyWithResponse request with any body
	DocumentTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentTypesPartialUpdateResp, error)

	DocumentTypesPartialUpdateWithResponse(ctx context.Context, id int, body DocumentTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesPartialUpdateResp, error)

	DocumentTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesPartialUpdateResp, error)

	// DocumentTypesUpdateWithBodyWithResponse request with any body
	DocumentTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentTypesUpdateResp, error)

	DocumentTypesUpdateWithResponse(ctx context.Context, id int, body DocumentTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesUpdateResp, error)

	DocumentTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesUpdateResp, error)

	// DocumentsListWithResponse request
	DocumentsListWithResponse(ctx context.Context, params *DocumentsListParams, reqEditors ...RequestEditorFn) (*DocumentsListResp, error)

	// DocumentsBulkDownloadCreateWithBodyWithResponse request with any body
	DocumentsBulkDownloadCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsBulkDownloadCreateResp, error)

	DocumentsBulkDownloadCreateWithResponse(ctx context.Context, body DocumentsBulkDownloadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsBulkDownloadCreateResp, error)

	// BulkEditWithBodyWithResponse request with any body
	BulkEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkEditResp, error)

	BulkEditWithResponse(ctx context.Context, body BulkEditJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkEditResp, error)

	// DocumentsNextAsnRetrieveWithResponse request
	DocumentsNextAsnRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DocumentsNextAsnRetrieveResp, error)

	// DocumentsPostDocumentCreateWithBodyWithResponse request with any body
	DocumentsPostDocumentCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsPostDocumentCreateResp, error)

	// DocumentsSelectionDataCreateWithBodyWithResponse request with any body
	DocumentsSelectionDataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsSelectionDataCreateResp, error)

	DocumentsSelectionDataCreateWithResponse(ctx context.Context, body DocumentsSelectionDataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsSelectionDataCreateResp, error)

	// DocumentsDestroyWithResponse request
	DocumentsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsDestroyResp, error)

	// DocumentsRetrieveWithResponse request
	DocumentsRetrieveWithResponse(ctx context.Context, id int, params *DocumentsRetrieveParams, reqEditors ...RequestEditorFn) (*DocumentsRetrieveResp, error)

	// DocumentsPartialUpdateWithBodyWithResponse request with any body
	DocumentsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsPartialUpdateResp, error)

	DocumentsPartialUpdateWithResponse(ctx context.Context, id int, body DocumentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsPartialUpdateResp, error)

	DocumentsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentsPartialUpdateResp, error)

	// DocumentsUpdateWithBodyWithResponse request with any body
	DocumentsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsUpdateResp, error)

	DocumentsUpdateWithResponse(ctx context.Context, id int, body DocumentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsUpdateResp, error)

	DocumentsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentsUpdateResp, error)

	// DocumentsDownloadRetrieveWithResponse request
	DocumentsDownloadRetrieveWithResponse(ctx context.Context, id int, params *DocumentsDownloadRetrieveParams, reqEditors ...RequestEditorFn) (*DocumentsDownloadRetrieveResp, error)

	// DocumentsEmailCreateWithBodyWithResponse request with any body
	DocumentsEmailCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsEmailCreateResp, error)

	DocumentsEmailCreateWithResponse(ctx context.Context, id int, body DocumentsEmailCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsEmailCreateResp, error)

	DocumentsEmailCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentsEmailCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentsEmailCreateResp, error)

	// DocumentsHistoryListWithResponse request
	DocumentsHistoryListWithResponse(ctx context.Context, id int, params *DocumentsHistoryListParams, reqEditors ...RequestEditorFn) (*DocumentsHistoryListResp, error)

	// DocumentsMetadataRetrieveWithResponse request
	DocumentsMetadataRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsMetadataRetrieveResp, error)

	// DocumentsNotesDestroyWithResponse request
	DocumentsNotesDestroyWithResponse(ctx context.Context, id int, params *DocumentsNotesDestroyParams, reqEditors ...RequestEditorFn) (*DocumentsNotesDestroyResp, error)

	// DocumentsNotesListWithResponse request
	DocumentsNotesListWithResponse(ctx context.Context, id int, params *DocumentsNotesListParams, reqEditors ...RequestEditorFn) (*DocumentsNotesListResp, error)

	// DocumentsNotesCreateWithBodyWithResponse request with any body
	DocumentsNotesCreateWithBodyWithResponse(ctx context.Context, id int, params *DocumentsNotesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsNotesCreateResp, error)

	DocumentsNotesCreateWithResponse(ctx context.Context, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsNotesCreateResp, error)

	DocumentsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentsNotesCreateResp, error)

	// DocumentsPreviewRetrieveWithResponse request
	DocumentsPreviewRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsPreviewRetrieveResp, error)

	// DocumentShareLinksWithResponse request
	DocumentShareLinksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DocumentShareLinksResp, error)

	// DocumentsSuggestionsRetrieveWithResponse request
	DocumentsSuggestionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsSuggestionsRetrieveResp, error)

	// DocumentsThumbRetrieveWithResponse request
	DocumentsThumbRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsThumbRetrieveResp, error)

	// GroupsListWithResponse request
	GroupsListWithResponse(ctx context.Context, params *GroupsListParams, reqEditors ...RequestEditorFn) (*GroupsListResp, error)

	// GroupsCreateWithBodyWithResponse request with any body
	GroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsCreateResp, error)

	GroupsCreateWithResponse(ctx context.Context, body GroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsCreateResp, error)

	GroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body GroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GroupsCreateResp, error)

	// GroupsDestroyWithResponse request
	GroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GroupsDestroyResp, error)

	// GroupsRetrieveWithResponse request
	GroupsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GroupsRetrieveResp, error)

	// GroupsPartialUpdateWithBodyWithResponse request with any body
	GroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsPartialUpdateResp, error)

	GroupsPartialUpdateWithResponse(ctx context.Context, id int, body GroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsPartialUpdateResp, error)

	GroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GroupsPartialUpdateResp, error)

	// GroupsUpdateWithBodyWithResponse request with any body
	GroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsUpdateResp, error)

	GroupsUpdateWithResponse(ctx context.Context, id int, body GroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsUpdateResp, error)

	GroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GroupsUpdateResp, error)

	// LogsListWithResponse request
	LogsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogsListResp, error)

	// RetrieveLogWithResponse request
	RetrieveLogWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RetrieveLogResp, error)

	// MailAccountsListWithResponse request
	MailAccountsListWithResponse(ctx context.Context, params *MailAccountsListParams, reqEditors ...RequestEditorFn) (*MailAccountsListResp, error)

	// MailAccountsCreateWithBodyWithResponse request with any body
	MailAccountsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountsCreateResp, error)

	MailAccountsCreateWithResponse(ctx context.Context, body MailAccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsCreateResp, error)

	MailAccountsCreateWithFormdataBodyWithResponse(ctx context.Context, body MailAccountsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsCreateResp, error)

	// MailAccountTestWithBodyWithResponse request with any body
	MailAccountTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountTestResp, error)

	MailAccountTestWithResponse(ctx context.Context, body MailAccountTestJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountTestResp, error)

	MailAccountTestWithFormdataBodyWithResponse(ctx context.Context, body MailAccountTestFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountTestResp, error)

	// MailAccountsDestroyWithResponse request
	MailAccountsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailAccountsDestroyResp, error)

	// MailAccountsRetrieveWithResponse request
	MailAccountsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailAccountsRetrieveResp, error)

	// MailAccountsPartialUpdateWithBodyWithResponse request with any body
	MailAccountsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountsPartialUpdateResp, error)

	MailAccountsPartialUpdateWithResponse(ctx context.Context, id int, body MailAccountsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsPartialUpdateResp, error)

	MailAccountsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MailAccountsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsPartialUpdateResp, error)

	// MailAccountsUpdateWithBodyWithResponse request with any body
	MailAccountsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountsUpdateResp, error)

	MailAccountsUpdateWithResponse(ctx context.Context, id int, body MailAccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsUpdateResp, error)

	MailAccountsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MailAccountsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsUpdateResp, error)

	// MailAccountProcessWithBodyWithResponse request with any body
	MailAccountProcessWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountProcessResp, error)

	MailAccountProcessWithResponse(ctx context.Context, id int, body MailAccountProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountProcessResp, error)

	MailAccountProcessWithFormdataBodyWithResponse(ctx context.Context, id int, body MailAccountProcessFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountProcessResp, error)

	// MailRulesListWithResponse request
	MailRulesListWithResponse(ctx context.Context, params *MailRulesListParams, reqEditors ...RequestEditorFn) (*MailRulesListResp, error)

	// MailRulesCreateWithBodyWithResponse request with any body
	MailRulesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailRulesCreateResp, error)

	MailRulesCreateWithResponse(ctx context.Context, body MailRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailRulesCreateResp, error)

	MailRulesCreateWithFormdataBodyWithResponse(ctx context.Context, body MailRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailRulesCreateResp, error)

	// MailRulesDestroyWithResponse request
	MailRulesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailRulesDestroyResp, error)

	// MailRulesRetrieveWithResponse request
	MailRulesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailRulesRetrieveResp, error)

	// MailRulesPartialUpdateWithBodyWithResponse request with any body
	MailRulesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailRulesPartialUpdateResp, error)

	MailRulesPartialUpdateWithResponse(ctx context.Context, id int, body MailRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailRulesPartialUpdateResp, error)

	MailRulesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MailRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailRulesPartialUpdateResp, error)

	// MailRulesUpdateWithBodyWithResponse request with any body
	MailRulesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailRulesUpdateResp, error)

	MailRulesUpdateWithResponse(ctx context.Context, id int, body MailRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailRulesUpdateResp, error)

	MailRulesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MailRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailRulesUpdateResp, error)

	// OauthCallbackRetrieveWithResponse request
	OauthCallbackRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OauthCallbackRetrieveResp, error)

	// ProfileRetrieveWithResponse request
	ProfileRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileRetrieveResp, error)

	// ProfilePartialUpdateWithBodyWithResponse request with any body
	ProfilePartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfilePartialUpdateResp, error)

	ProfilePartialUpdateWithResponse(ctx context.Context, body ProfilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfilePartialUpdateResp, error)

	ProfilePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, body ProfilePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProfilePartialUpdateResp, error)

	// ProfileDisconnectSocialAccountCreateWithBodyWithResponse request with any body
	ProfileDisconnectSocialAccountCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfileDisconnectSocialAccountCreateResp, error)

	ProfileDisconnectSocialAccountCreateWithResponse(ctx context.Context, body ProfileDisconnectSocialAccountCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfileDisconnectSocialAccountCreateResp, error)

	// ProfileGenerateAuthTokenCreateWithResponse request
	ProfileGenerateAuthTokenCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileGenerateAuthTokenCreateResp, error)

	// ProfileSocialAccountProvidersRetrieveWithResponse request
	ProfileSocialAccountProvidersRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileSocialAccountProvidersRetrieveResp, error)

	// ProfileTotpDestroyWithResponse request
	ProfileTotpDestroyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileTotpDestroyResp, error)

	// ProfileTotpRetrieveWithResponse request
	ProfileTotpRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileTotpRetrieveResp, error)

	// ProfileTotpCreateWithBodyWithResponse request with any body
	ProfileTotpCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfileTotpCreateResp, error)

	ProfileTotpCreateWithResponse(ctx context.Context, body ProfileTotpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfileTotpCreateResp, error)

	// RemoteVersionRetrieveWithResponse request
	RemoteVersionRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RemoteVersionRetrieveResp, error)

	// SavedViewsListWithResponse request
	SavedViewsListWithResponse(ctx context.Context, params *SavedViewsListParams, reqEditors ...RequestEditorFn) (*SavedViewsListResp, error)

	// SavedViewsCreateWithBodyWithResponse request with any body
	SavedViewsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavedViewsCreateResp, error)

	SavedViewsCreateWithResponse(ctx context.Context, body SavedViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsCreateResp, error)

	SavedViewsCreateWithFormdataBodyWithResponse(ctx context.Context, body SavedViewsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsCreateResp, error)

	// SavedViewsDestroyWithResponse request
	SavedViewsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SavedViewsDestroyResp, error)

	// SavedViewsRetrieveWithResponse request
	SavedViewsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SavedViewsRetrieveResp, error)

	// SavedViewsPartialUpdateWithBodyWithResponse request with any body
	SavedViewsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavedViewsPartialUpdateResp, error)

	SavedViewsPartialUpdateWithResponse(ctx context.Context, id int, body SavedViewsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsPartialUpdateResp, error)

	SavedViewsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SavedViewsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsPartialUpdateResp, error)

	// SavedViewsUpdateWithBodyWithResponse request with any body
	SavedViewsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavedViewsUpdateResp, error)

	SavedViewsUpdateWithResponse(ctx context.Context, id int, body SavedViewsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsUpdateResp, error)

	SavedViewsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SavedViewsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsUpdateResp, error)

	// SearchRetrieveWithResponse request
	SearchRetrieveWithResponse(ctx context.Context, params *SearchRetrieveParams, reqEditors ...RequestEditorFn) (*SearchRetrieveResp, error)

	// SearchAutocompleteListWithResponse request
	SearchAutocompleteListWithResponse(ctx context.Context, params *SearchAutocompleteListParams, reqEditors ...RequestEditorFn) (*SearchAutocompleteListResp, error)

	// ShareLinksListWithResponse request
	ShareLinksListWithResponse(ctx context.Context, params *ShareLinksListParams, reqEditors ...RequestEditorFn) (*ShareLinksListResp, error)

	// ShareLinksCreateWithBodyWithResponse request with any body
	ShareLinksCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareLinksCreateResp, error)

	ShareLinksCreateWithResponse(ctx context.Context, body ShareLinksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksCreateResp, error)

	ShareLinksCreateWithFormdataBodyWithResponse(ctx context.Context, body ShareLinksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksCreateResp, error)

	// ShareLinksDestroyWithResponse request
	ShareLinksDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ShareLinksDestroyResp, error)

	// ShareLinksRetrieveWithResponse request
	ShareLinksRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ShareLinksRetrieveResp, error)

	// ShareLinksPartialUpdateWithBodyWithResponse request with any body
	ShareLinksPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareLinksPartialUpdateResp, error)

	ShareLinksPartialUpdateWithResponse(ctx context.Context, id int, body ShareLinksPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksPartialUpdateResp, error)

	ShareLinksPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ShareLinksPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksPartialUpdateResp, error)

	// ShareLinksUpdateWithBodyWithResponse request with any body
	ShareLinksUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareLinksUpdateResp, error)

	ShareLinksUpdateWithResponse(ctx context.Context, id int, body ShareLinksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksUpdateResp, error)

	ShareLinksUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ShareLinksUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksUpdateResp, error)

	// StatisticsRetrieveWithResponse request
	StatisticsRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatisticsRetrieveResp, error)

	// StatusRetrieveWithResponse request
	StatusRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatusRetrieveResp, error)

	// StoragePathsListWithResponse request
	StoragePathsListWithResponse(ctx context.Context, params *StoragePathsListParams, reqEditors ...RequestEditorFn) (*StoragePathsListResp, error)

	// StoragePathsCreateWithBodyWithResponse request with any body
	StoragePathsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoragePathsCreateResp, error)

	StoragePathsCreateWithResponse(ctx context.Context, body StoragePathsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsCreateResp, error)

	StoragePathsCreateWithFormdataBodyWithResponse(ctx context.Context, body StoragePathsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsCreateResp, error)

	// StoragePathsTestCreateWithBodyWithResponse request with any body
	StoragePathsTestCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoragePathsTestCreateResp, error)

	StoragePathsTestCreateWithResponse(ctx context.Context, body StoragePathsTestCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsTestCreateResp, error)

	StoragePathsTestCreateWithFormdataBodyWithResponse(ctx context.Context, body StoragePathsTestCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsTestCreateResp, error)

	// StoragePathsDestroyWithResponse request
	StoragePathsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StoragePathsDestroyResp, error)

	// StoragePathsRetrieveWithResponse request
	StoragePathsRetrieveWithResponse(ctx context.Context, id int, params *StoragePathsRetrieveParams, reqEditors ...RequestEditorFn) (*StoragePathsRetrieveResp, error)

	// StoragePathsPartialUpdateWithBodyWithResponse request with any body
	StoragePathsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoragePathsPartialUpdateResp, error)

	StoragePathsPartialUpdateWithResponse(ctx context.Context, id int, body StoragePathsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsPartialUpdateResp, error)

	StoragePathsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StoragePathsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsPartialUpdateResp, error)

	// StoragePathsUpdateWithBodyWithResponse request with any body
	StoragePathsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoragePathsUpdateResp, error)

	StoragePathsUpdateWithResponse(ctx context.Context, id int, body StoragePathsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsUpdateResp, error)

	StoragePathsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StoragePathsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsUpdateResp, error)

	// TagsListWithResponse request
	TagsListWithResponse(ctx context.Context, params *TagsListParams, reqEditors ...RequestEditorFn) (*TagsListResp, error)

	// TagsCreateWithBodyWithResponse request with any body
	TagsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagsCreateResp, error)

	TagsCreateWithResponse(ctx context.Context, body TagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TagsCreateResp, error)

	TagsCreateWithFormdataBodyWithResponse(ctx context.Context, body TagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TagsCreateResp, error)

	// TagsDestroyWithResponse request
	TagsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TagsDestroyResp, error)

	// TagsRetrieveWithResponse request
	TagsRetrieveWithResponse(ctx context.Context, id int, params *TagsRetrieveParams, reqEditors ...RequestEditorFn) (*TagsRetrieveResp, error)

	// TagsPartialUpdateWithBodyWithResponse request with any body
	TagsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagsPartialUpdateResp, error)

	TagsPartialUpdateWithResponse(ctx context.Context, id int, body TagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TagsPartialUpdateResp, error)

	TagsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TagsPartialUpdateResp, error)

	// TagsUpdateWithBodyWithResponse request with any body
	TagsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagsUpdateResp, error)

	TagsUpdateWithResponse(ctx context.Context, id int, body TagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TagsUpdateResp, error)

	TagsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TagsUpdateResp, error)

	// TasksListWithResponse request
	TasksListWithResponse(ctx context.Context, params *TasksListParams, reqEditors ...RequestEditorFn) (*TasksListResp, error)

	// AcknowledgeTasksWithBodyWithResponse request with any body
	AcknowledgeTasksWithBodyWithResponse(ctx context.Context, params *AcknowledgeTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcknowledgeTasksResp, error)

	AcknowledgeTasksWithResponse(ctx context.Context, params *AcknowledgeTasksParams, body AcknowledgeTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*AcknowledgeTasksResp, error)

	// TasksRunCreateWithBodyWithResponse request with any body
	TasksRunCreateWithBodyWithResponse(ctx context.Context, params *TasksRunCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksRunCreateResp, error)

	TasksRunCreateWithResponse(ctx context.Context, params *TasksRunCreateParams, body TasksRunCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksRunCreateResp, error)

	TasksRunCreateWithFormdataBodyWithResponse(ctx context.Context, params *TasksRunCreateParams, body TasksRunCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksRunCreateResp, error)

	// TasksRetrieveWithResponse request
	TasksRetrieveWithResponse(ctx context.Context, id int, params *TasksRetrieveParams, reqEditors ...RequestEditorFn) (*TasksRetrieveResp, error)

	// TokenCreateWithBodyWithResponse request with any body
	TokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenCreateResp, error)

	TokenCreateWithResponse(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResp, error)

	TokenCreateWithFormdataBodyWithResponse(ctx context.Context, body TokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResp, error)

	// TrashListWithResponse request
	TrashListWithResponse(ctx context.Context, params *TrashListParams, reqEditors ...RequestEditorFn) (*TrashListResp, error)

	// TrashCreateWithBodyWithResponse request with any body
	TrashCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrashCreateResp, error)

	TrashCreateWithResponse(ctx context.Context, body TrashCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TrashCreateResp, error)

	TrashCreateWithFormdataBodyWithResponse(ctx context.Context, body TrashCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TrashCreateResp, error)

	// UiSettingsRetrieveWithResponse request
	UiSettingsRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UiSettingsRetrieveResp, error)

	// UiSettingsCreateWithBodyWithResponse request with any body
	UiSettingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UiSettingsCreateResp, error)

	UiSettingsCreateWithResponse(ctx context.Context, body UiSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UiSettingsCreateResp, error)

	UiSettingsCreateWithFormdataBodyWithResponse(ctx context.Context, body UiSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UiSettingsCreateResp, error)

	// UsersListWithResponse request
	UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResp, error)

	// UsersCreateWithBodyWithResponse request with any body
	UsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateResp, error)

	UsersCreateWithResponse(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResp, error)

	UsersCreateWithFormdataBodyWithResponse(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResp, error)

	// UsersDestroyWithResponse request
	UsersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersDestroyResp, error)

	// UsersRetrieveWithResponse request
	UsersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersRetrieveResp, error)

	// UsersPartialUpdateWithBodyWithResponse request with any body
	UsersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResp, error)

	UsersPartialUpdateWithResponse(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResp, error)

	UsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResp, error)

	// UsersUpdateWithBodyWithResponse request with any body
	UsersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateResp, error)

	UsersUpdateWithResponse(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResp, error)

	UsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResp, error)

	// UsersDeactivateTotpCreateWithResponse request
	UsersDeactivateTotpCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersDeactivateTotpCreateResp, error)

	// WorkflowActionsListWithResponse request
	WorkflowActionsListWithResponse(ctx context.Context, params *WorkflowActionsListParams, reqEditors ...RequestEditorFn) (*WorkflowActionsListResp, error)

	// WorkflowActionsCreateWithBodyWithResponse request with any body
	WorkflowActionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowActionsCreateResp, error)

	WorkflowActionsCreateWithResponse(ctx context.Context, body WorkflowActionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsCreateResp, error)

	WorkflowActionsCreateWithFormdataBodyWithResponse(ctx context.Context, body WorkflowActionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsCreateResp, error)

	// WorkflowActionsDestroyWithResponse request
	WorkflowActionsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowActionsDestroyResp, error)

	// WorkflowActionsRetrieveWithResponse request
	WorkflowActionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowActionsRetrieveResp, error)

	// WorkflowActionsPartialUpdateWithBodyWithResponse request with any body
	WorkflowActionsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowActionsPartialUpdateResp, error)

	WorkflowActionsPartialUpdateWithResponse(ctx context.Context, id int, body WorkflowActionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsPartialUpdateResp, error)

	WorkflowActionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowActionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsPartialUpdateResp, error)

	// WorkflowActionsUpdateWithBodyWithResponse request with any body
	WorkflowActionsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowActionsUpdateResp, error)

	WorkflowActionsUpdateWithResponse(ctx context.Context, id int, body WorkflowActionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsUpdateResp, error)

	WorkflowActionsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowActionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsUpdateResp, error)

	// WorkflowTriggersListWithResponse request
	WorkflowTriggersListWithResponse(ctx context.Context, params *WorkflowTriggersListParams, reqEditors ...RequestEditorFn) (*WorkflowTriggersListResp, error)

	// WorkflowTriggersCreateWithBodyWithResponse request with any body
	WorkflowTriggersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowTriggersCreateResp, error)

	WorkflowTriggersCreateWithResponse(ctx context.Context, body WorkflowTriggersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersCreateResp, error)

	WorkflowTriggersCreateWithFormdataBodyWithResponse(ctx context.Context, body WorkflowTriggersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersCreateResp, error)

	// WorkflowTriggersDestroyWithResponse request
	WorkflowTriggersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowTriggersDestroyResp, error)

	// WorkflowTriggersRetrieveWithResponse request
	WorkflowTriggersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowTriggersRetrieveResp, error)

	// WorkflowTriggersPartialUpdateWithBodyWithResponse request with any body
	WorkflowTriggersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowTriggersPartialUpdateResp, error)

	WorkflowTriggersPartialUpdateWithResponse(ctx context.Context, id int, body WorkflowTriggersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersPartialUpdateResp, error)

	WorkflowTriggersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowTriggersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersPartialUpdateResp, error)

	// WorkflowTriggersUpdateWithBodyWithResponse request with any body
	WorkflowTriggersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowTriggersUpdateResp, error)

	WorkflowTriggersUpdateWithResponse(ctx context.Context, id int, body WorkflowTriggersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersUpdateResp, error)

	WorkflowTriggersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowTriggersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersUpdateResp, error)

	// WorkflowsListWithResponse request
	WorkflowsListWithResponse(ctx context.Context, params *WorkflowsListParams, reqEditors ...RequestEditorFn) (*WorkflowsListResp, error)

	// WorkflowsCreateWithBodyWithResponse request with any body
	WorkflowsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsCreateResp, error)

	WorkflowsCreateWithResponse(ctx context.Context, body WorkflowsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsCreateResp, error)

	WorkflowsCreateWithFormdataBodyWithResponse(ctx context.Context, body WorkflowsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsCreateResp, error)

	// WorkflowsDestroyWithResponse request
	WorkflowsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowsDestroyResp, error)

	// WorkflowsRetrieveWithResponse request
	WorkflowsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowsRetrieveResp, error)

	// WorkflowsPartialUpdateWithBodyWithResponse request with any body
	WorkflowsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsPartialUpdateResp, error)

	WorkflowsPartialUpdateWithResponse(ctx context.Context, id int, body WorkflowsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsPartialUpdateResp, error)

	WorkflowsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsPartialUpdateResp, error)

	// WorkflowsUpdateWithBodyWithResponse request with any body
	WorkflowsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResp, error)

	WorkflowsUpdateWithResponse(ctx context.Context, id int, body WorkflowsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResp, error)

	WorkflowsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResp, error)
}

type BulkEditObjectsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkEditResult
}

// Status returns HTTPResponse.Status
func (r BulkEditObjectsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkEditObjectsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApplicationConfiguration
}

// Status returns HTTPResponse.Status
func (r ConfigListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ConfigDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationConfiguration
}

// Status returns HTTPResponse.Status
func (r ConfigRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationConfiguration
}

// Status returns HTTPResponse.Status
func (r ConfigPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationConfiguration
}

// Status returns HTTPResponse.Status
func (r ConfigUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CorrespondentsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCorrespondentList
}

// Status returns HTTPResponse.Status
func (r CorrespondentsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CorrespondentsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CorrespondentsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Correspondent
}

// Status returns HTTPResponse.Status
func (r CorrespondentsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CorrespondentsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CorrespondentsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CorrespondentsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CorrespondentsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CorrespondentsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Correspondent
}

// Status returns HTTPResponse.Status
func (r CorrespondentsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CorrespondentsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CorrespondentsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Correspondent
}

// Status returns HTTPResponse.Status
func (r CorrespondentsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CorrespondentsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CorrespondentsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Correspondent
}

// Status returns HTTPResponse.Status
func (r CorrespondentsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CorrespondentsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCustomFieldList
}

// Status returns HTTPResponse.Status
func (r CustomFieldsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CustomField
}

// Status returns HTTPResponse.Status
func (r CustomFieldsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CustomFieldsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomField
}

// Status returns HTTPResponse.Status
func (r CustomFieldsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomField
}

// Status returns HTTPResponse.Status
func (r CustomFieldsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomField
}

// Status returns HTTPResponse.Status
func (r CustomFieldsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentTypesListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDocumentTypeList
}

// Status returns HTTPResponse.Status
func (r DocumentTypesListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentTypesListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentTypesCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DocumentType
}

// Status returns HTTPResponse.Status
func (r DocumentTypesCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentTypesCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentTypesDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DocumentTypesDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentTypesDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentTypesRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentType
}

// Status returns HTTPResponse.Status
func (r DocumentTypesRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentTypesRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentTypesPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentType
}

// Status returns HTTPResponse.Status
func (r DocumentTypesPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentTypesPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentTypesUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentType
}

// Status returns HTTPResponse.Status
func (r DocumentTypesUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentTypesUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDocumentList
}

// Status returns HTTPResponse.Status
func (r DocumentsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsBulkDownloadCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkDownload
}

// Status returns HTTPResponse.Status
func (r DocumentsBulkDownloadCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsBulkDownloadCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkEditResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkEditDocumentsResult
}

// Status returns HTTPResponse.Status
func (r BulkEditResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkEditResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsNextAsnRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
}

// Status returns HTTPResponse.Status
func (r DocumentsNextAsnRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsNextAsnRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsPostDocumentCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r DocumentsPostDocumentCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsPostDocumentCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsSelectionDataCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SelectionData
}

// Status returns HTTPResponse.Status
func (r DocumentsSelectionDataCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsSelectionDataCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DocumentsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Document
}

// Status returns HTTPResponse.Status
func (r DocumentsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Document
}

// Status returns HTTPResponse.Status
func (r DocumentsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Document
}

// Status returns HTTPResponse.Status
func (r DocumentsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsDownloadRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r DocumentsDownloadRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsDownloadRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsEmailCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailResponse
}

// Status returns HTTPResponse.Status
func (r DocumentsEmailCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsEmailCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsHistoryListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedLogEntryList
}

// Status returns HTTPResponse.Status
func (r DocumentsHistoryListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsHistoryListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsMetadataRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metadata
}

// Status returns HTTPResponse.Status
func (r DocumentsMetadataRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsMetadataRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsNotesDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNotesList
}

// Status returns HTTPResponse.Status
func (r DocumentsNotesDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsNotesDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsNotesListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNotesList
}

// Status returns HTTPResponse.Status
func (r DocumentsNotesListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsNotesListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsNotesCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNotesList
}

// Status returns HTTPResponse.Status
func (r DocumentsNotesCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsNotesCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsPreviewRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r DocumentsPreviewRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsPreviewRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentShareLinksResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Created    *time.Time `json:"created,omitempty"`
		Expiration *time.Time `json:"expiration,omitempty"`
		Id         *int       `json:"id,omitempty"`
		Slug       *string    `json:"slug,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DocumentShareLinksResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentShareLinksResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsSuggestionsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Suggestions
}

// Status returns HTTPResponse.Status
func (r DocumentsSuggestionsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsSuggestionsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentsThumbRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r DocumentsThumbRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentsThumbRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedGroupList
}

// Status returns HTTPResponse.Status
func (r GroupsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Group
}

// Status returns HTTPResponse.Status
func (r GroupsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GroupsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r GroupsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r GroupsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r GroupsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r LogsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveLogResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r RetrieveLogResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveLogResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailAccountsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedMailAccountList
}

// Status returns HTTPResponse.Status
func (r MailAccountsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailAccountsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailAccountsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MailAccount
}

// Status returns HTTPResponse.Status
func (r MailAccountsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailAccountsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailAccountTestResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailAccountTestResponse
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r MailAccountTestResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailAccountTestResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailAccountsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MailAccountsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailAccountsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailAccountsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailAccount
}

// Status returns HTTPResponse.Status
func (r MailAccountsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailAccountsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailAccountsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailAccount
}

// Status returns HTTPResponse.Status
func (r MailAccountsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailAccountsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailAccountsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailAccount
}

// Status returns HTTPResponse.Status
func (r MailAccountsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailAccountsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailAccountProcessResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailAccountProcessResponse
}

// Status returns HTTPResponse.Status
func (r MailAccountProcessResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailAccountProcessResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailRulesListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedMailRuleList
}

// Status returns HTTPResponse.Status
func (r MailRulesListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailRulesListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailRulesCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MailRule
}

// Status returns HTTPResponse.Status
func (r MailRulesCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailRulesCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailRulesDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MailRulesDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailRulesDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailRulesRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailRule
}

// Status returns HTTPResponse.Status
func (r MailRulesRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailRulesRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailRulesPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailRule
}

// Status returns HTTPResponse.Status
func (r MailRulesPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailRulesPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailRulesUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailRule
}

// Status returns HTTPResponse.Status
func (r MailRulesUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailRulesUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OauthCallbackRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OauthCallbackRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OauthCallbackRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Profile
}

// Status returns HTTPResponse.Status
func (r ProfileRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilePartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Profile
}

// Status returns HTTPResponse.Status
func (r ProfilePartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilePartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileDisconnectSocialAccountCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r ProfileDisconnectSocialAccountCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileDisconnectSocialAccountCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileGenerateAuthTokenCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ProfileGenerateAuthTokenCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileGenerateAuthTokenCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileSocialAccountProvidersRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ProfileSocialAccountProvidersRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileSocialAccountProvidersRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileTotpDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r ProfileTotpDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileTotpDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileTotpRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ProfileTotpRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileTotpRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileTotpCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ProfileTotpCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileTotpCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoteVersionRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r RemoteVersionRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoteVersionRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SavedViewsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSavedViewList
}

// Status returns HTTPResponse.Status
func (r SavedViewsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SavedViewsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SavedViewsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SavedView
}

// Status returns HTTPResponse.Status
func (r SavedViewsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SavedViewsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SavedViewsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SavedViewsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SavedViewsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SavedViewsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SavedView
}

// Status returns HTTPResponse.Status
func (r SavedViewsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SavedViewsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SavedViewsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SavedView
}

// Status returns HTTPResponse.Status
func (r SavedViewsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SavedViewsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SavedViewsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SavedView
}

// Status returns HTTPResponse.Status
func (r SavedViewsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SavedViewsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResult
}

// Status returns HTTPResponse.Status
func (r SearchRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchAutocompleteListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r SearchAutocompleteListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchAutocompleteListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareLinksListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedShareLinkList
}

// Status returns HTTPResponse.Status
func (r ShareLinksListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareLinksListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareLinksCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShareLink
}

// Status returns HTTPResponse.Status
func (r ShareLinksCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareLinksCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareLinksDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ShareLinksDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareLinksDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareLinksRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShareLink
}

// Status returns HTTPResponse.Status
func (r ShareLinksRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareLinksRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareLinksPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShareLink
}

// Status returns HTTPResponse.Status
func (r ShareLinksPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareLinksPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareLinksUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShareLink
}

// Status returns HTTPResponse.Status
func (r ShareLinksUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareLinksUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatisticsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r StatisticsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatisticsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatusRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemStatus
}

// Status returns HTTPResponse.Status
func (r StatusRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatusRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StoragePathsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedStoragePathList
}

// Status returns HTTPResponse.Status
func (r StoragePathsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StoragePathsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StoragePathsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StoragePath
}

// Status returns HTTPResponse.Status
func (r StoragePathsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StoragePathsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StoragePathsTestCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoragePath
}

// Status returns HTTPResponse.Status
func (r StoragePathsTestCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StoragePathsTestCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StoragePathsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StoragePathsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StoragePathsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StoragePathsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoragePath
}

// Status returns HTTPResponse.Status
func (r StoragePathsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StoragePathsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StoragePathsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoragePath
}

// Status returns HTTPResponse.Status
func (r StoragePathsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StoragePathsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StoragePathsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoragePath
}

// Status returns HTTPResponse.Status
func (r StoragePathsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StoragePathsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTagList
}

// Status returns HTTPResponse.Status
func (r TagsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Tag
}

// Status returns HTTPResponse.Status
func (r TagsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TagsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r TagsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r TagsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r TagsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TasksView
}

// Status returns HTTPResponse.Status
func (r TasksListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcknowledgeTasksResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AcknowledgeTasks
}

// Status returns HTTPResponse.Status
func (r AcknowledgeTasksResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcknowledgeTasksResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksRunCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TasksView
}

// Status returns HTTPResponse.Status
func (r TasksRunCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksRunCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TasksView
}

// Status returns HTTPResponse.Status
func (r TasksRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaperlessAuthToken
}

// Status returns HTTPResponse.Status
func (r TokenCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrashListResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TrashListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrashListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrashCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TrashCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrashCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UiSettingsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UiSettingsView
}

// Status returns HTTPResponse.Status
func (r UiSettingsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UiSettingsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UiSettingsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UiSettingsView
}

// Status returns HTTPResponse.Status
func (r UiSettingsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UiSettingsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUserList
}

// Status returns HTTPResponse.Status
func (r UsersListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UsersCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UsersDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeactivateTotpCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r UsersDeactivateTotpCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeactivateTotpCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowActionsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWorkflowActionList
}

// Status returns HTTPResponse.Status
func (r WorkflowActionsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowActionsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowActionsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkflowAction
}

// Status returns HTTPResponse.Status
func (r WorkflowActionsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowActionsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowActionsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WorkflowActionsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowActionsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowActionsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowAction
}

// Status returns HTTPResponse.Status
func (r WorkflowActionsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowActionsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowActionsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowAction
}

// Status returns HTTPResponse.Status
func (r WorkflowActionsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowActionsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowActionsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowAction
}

// Status returns HTTPResponse.Status
func (r WorkflowActionsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowActionsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowTriggersListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWorkflowTriggerList
}

// Status returns HTTPResponse.Status
func (r WorkflowTriggersListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowTriggersListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowTriggersCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkflowTrigger
}

// Status returns HTTPResponse.Status
func (r WorkflowTriggersCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowTriggersCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowTriggersDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WorkflowTriggersDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowTriggersDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowTriggersRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowTrigger
}

// Status returns HTTPResponse.Status
func (r WorkflowTriggersRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowTriggersRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowTriggersPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowTrigger
}

// Status returns HTTPResponse.Status
func (r WorkflowTriggersPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowTriggersPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowTriggersUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowTrigger
}

// Status returns HTTPResponse.Status
func (r WorkflowTriggersUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowTriggersUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWorkflowList
}

// Status returns HTTPResponse.Status
func (r WorkflowsListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Workflow
}

// Status returns HTTPResponse.Status
func (r WorkflowsCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsDestroyResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WorkflowsDestroyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsDestroyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsRetrieveResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
}

// Status returns HTTPResponse.Status
func (r WorkflowsRetrieveResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsRetrieveResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsPartialUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
}

// Status returns HTTPResponse.Status
func (r WorkflowsPartialUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsPartialUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsUpdateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
}

// Status returns HTTPResponse.Status
func (r WorkflowsUpdateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsUpdateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BulkEditObjectsWithBodyWithResponse request with arbitrary body returning *BulkEditObjectsResp
func (c *ClientWithResponses) BulkEditObjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkEditObjectsResp, error) {
	rsp, err := c.BulkEditObjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkEditObjectsResp(rsp)
}

func (c *ClientWithResponses) BulkEditObjectsWithResponse(ctx context.Context, body BulkEditObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkEditObjectsResp, error) {
	rsp, err := c.BulkEditObjects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkEditObjectsResp(rsp)
}

// ConfigListWithResponse request returning *ConfigListResp
func (c *ClientWithResponses) ConfigListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigListResp, error) {
	rsp, err := c.ConfigList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigListResp(rsp)
}

// ConfigDestroyWithResponse request returning *ConfigDestroyResp
func (c *ClientWithResponses) ConfigDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ConfigDestroyResp, error) {
	rsp, err := c.ConfigDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigDestroyResp(rsp)
}

// ConfigRetrieveWithResponse request returning *ConfigRetrieveResp
func (c *ClientWithResponses) ConfigRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ConfigRetrieveResp, error) {
	rsp, err := c.ConfigRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigRetrieveResp(rsp)
}

// ConfigPartialUpdateWithBodyWithResponse request with arbitrary body returning *ConfigPartialUpdateResp
func (c *ClientWithResponses) ConfigPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfigPartialUpdateResp, error) {
	rsp, err := c.ConfigPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) ConfigPartialUpdateWithResponse(ctx context.Context, id int, body ConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfigPartialUpdateResp, error) {
	rsp, err := c.ConfigPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) ConfigPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ConfigPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ConfigPartialUpdateResp, error) {
	rsp, err := c.ConfigPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigPartialUpdateResp(rsp)
}

// ConfigUpdateWithBodyWithResponse request with arbitrary body returning *ConfigUpdateResp
func (c *ClientWithResponses) ConfigUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfigUpdateResp, error) {
	rsp, err := c.ConfigUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigUpdateResp(rsp)
}

func (c *ClientWithResponses) ConfigUpdateWithResponse(ctx context.Context, id int, body ConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfigUpdateResp, error) {
	rsp, err := c.ConfigUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigUpdateResp(rsp)
}

func (c *ClientWithResponses) ConfigUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ConfigUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ConfigUpdateResp, error) {
	rsp, err := c.ConfigUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigUpdateResp(rsp)
}

// CorrespondentsListWithResponse request returning *CorrespondentsListResp
func (c *ClientWithResponses) CorrespondentsListWithResponse(ctx context.Context, params *CorrespondentsListParams, reqEditors ...RequestEditorFn) (*CorrespondentsListResp, error) {
	rsp, err := c.CorrespondentsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsListResp(rsp)
}

// CorrespondentsCreateWithBodyWithResponse request with arbitrary body returning *CorrespondentsCreateResp
func (c *ClientWithResponses) CorrespondentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrespondentsCreateResp, error) {
	rsp, err := c.CorrespondentsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsCreateResp(rsp)
}

func (c *ClientWithResponses) CorrespondentsCreateWithResponse(ctx context.Context, body CorrespondentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsCreateResp, error) {
	rsp, err := c.CorrespondentsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsCreateResp(rsp)
}

func (c *ClientWithResponses) CorrespondentsCreateWithFormdataBodyWithResponse(ctx context.Context, body CorrespondentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsCreateResp, error) {
	rsp, err := c.CorrespondentsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsCreateResp(rsp)
}

// CorrespondentsDestroyWithResponse request returning *CorrespondentsDestroyResp
func (c *ClientWithResponses) CorrespondentsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CorrespondentsDestroyResp, error) {
	rsp, err := c.CorrespondentsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsDestroyResp(rsp)
}

// CorrespondentsRetrieveWithResponse request returning *CorrespondentsRetrieveResp
func (c *ClientWithResponses) CorrespondentsRetrieveWithResponse(ctx context.Context, id int, params *CorrespondentsRetrieveParams, reqEditors ...RequestEditorFn) (*CorrespondentsRetrieveResp, error) {
	rsp, err := c.CorrespondentsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsRetrieveResp(rsp)
}

// CorrespondentsPartialUpdateWithBodyWithResponse request with arbitrary body returning *CorrespondentsPartialUpdateResp
func (c *ClientWithResponses) CorrespondentsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrespondentsPartialUpdateResp, error) {
	rsp, err := c.CorrespondentsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) CorrespondentsPartialUpdateWithResponse(ctx context.Context, id int, body CorrespondentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsPartialUpdateResp, error) {
	rsp, err := c.CorrespondentsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) CorrespondentsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CorrespondentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsPartialUpdateResp, error) {
	rsp, err := c.CorrespondentsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsPartialUpdateResp(rsp)
}

// CorrespondentsUpdateWithBodyWithResponse request with arbitrary body returning *CorrespondentsUpdateResp
func (c *ClientWithResponses) CorrespondentsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrespondentsUpdateResp, error) {
	rsp, err := c.CorrespondentsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsUpdateResp(rsp)
}

func (c *ClientWithResponses) CorrespondentsUpdateWithResponse(ctx context.Context, id int, body CorrespondentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsUpdateResp, error) {
	rsp, err := c.CorrespondentsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsUpdateResp(rsp)
}

func (c *ClientWithResponses) CorrespondentsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CorrespondentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CorrespondentsUpdateResp, error) {
	rsp, err := c.CorrespondentsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrespondentsUpdateResp(rsp)
}

// CustomFieldsListWithResponse request returning *CustomFieldsListResp
func (c *ClientWithResponses) CustomFieldsListWithResponse(ctx context.Context, params *CustomFieldsListParams, reqEditors ...RequestEditorFn) (*CustomFieldsListResp, error) {
	rsp, err := c.CustomFieldsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsListResp(rsp)
}

// CustomFieldsCreateWithBodyWithResponse request with arbitrary body returning *CustomFieldsCreateResp
func (c *ClientWithResponses) CustomFieldsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsCreateResp, error) {
	rsp, err := c.CustomFieldsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsCreateResp(rsp)
}

func (c *ClientWithResponses) CustomFieldsCreateWithResponse(ctx context.Context, body CustomFieldsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsCreateResp, error) {
	rsp, err := c.CustomFieldsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsCreateResp(rsp)
}

func (c *ClientWithResponses) CustomFieldsCreateWithFormdataBodyWithResponse(ctx context.Context, body CustomFieldsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsCreateResp, error) {
	rsp, err := c.CustomFieldsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsCreateResp(rsp)
}

// CustomFieldsDestroyWithResponse request returning *CustomFieldsDestroyResp
func (c *ClientWithResponses) CustomFieldsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CustomFieldsDestroyResp, error) {
	rsp, err := c.CustomFieldsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsDestroyResp(rsp)
}

// CustomFieldsRetrieveWithResponse request returning *CustomFieldsRetrieveResp
func (c *ClientWithResponses) CustomFieldsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CustomFieldsRetrieveResp, error) {
	rsp, err := c.CustomFieldsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsRetrieveResp(rsp)
}

// CustomFieldsPartialUpdateWithBodyWithResponse request with arbitrary body returning *CustomFieldsPartialUpdateResp
func (c *ClientWithResponses) CustomFieldsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsPartialUpdateResp, error) {
	rsp, err := c.CustomFieldsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) CustomFieldsPartialUpdateWithResponse(ctx context.Context, id int, body CustomFieldsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsPartialUpdateResp, error) {
	rsp, err := c.CustomFieldsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) CustomFieldsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CustomFieldsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsPartialUpdateResp, error) {
	rsp, err := c.CustomFieldsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsPartialUpdateResp(rsp)
}

// CustomFieldsUpdateWithBodyWithResponse request with arbitrary body returning *CustomFieldsUpdateResp
func (c *ClientWithResponses) CustomFieldsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsUpdateResp, error) {
	rsp, err := c.CustomFieldsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsUpdateResp(rsp)
}

func (c *ClientWithResponses) CustomFieldsUpdateWithResponse(ctx context.Context, id int, body CustomFieldsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsUpdateResp, error) {
	rsp, err := c.CustomFieldsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsUpdateResp(rsp)
}

func (c *ClientWithResponses) CustomFieldsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CustomFieldsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsUpdateResp, error) {
	rsp, err := c.CustomFieldsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsUpdateResp(rsp)
}

// DocumentTypesListWithResponse request returning *DocumentTypesListResp
func (c *ClientWithResponses) DocumentTypesListWithResponse(ctx context.Context, params *DocumentTypesListParams, reqEditors ...RequestEditorFn) (*DocumentTypesListResp, error) {
	rsp, err := c.DocumentTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesListResp(rsp)
}

// DocumentTypesCreateWithBodyWithResponse request with arbitrary body returning *DocumentTypesCreateResp
func (c *ClientWithResponses) DocumentTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentTypesCreateResp, error) {
	rsp, err := c.DocumentTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesCreateResp(rsp)
}

func (c *ClientWithResponses) DocumentTypesCreateWithResponse(ctx context.Context, body DocumentTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesCreateResp, error) {
	rsp, err := c.DocumentTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesCreateResp(rsp)
}

func (c *ClientWithResponses) DocumentTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body DocumentTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesCreateResp, error) {
	rsp, err := c.DocumentTypesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesCreateResp(rsp)
}

// DocumentTypesDestroyWithResponse request returning *DocumentTypesDestroyResp
func (c *ClientWithResponses) DocumentTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentTypesDestroyResp, error) {
	rsp, err := c.DocumentTypesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesDestroyResp(rsp)
}

// DocumentTypesRetrieveWithResponse request returning *DocumentTypesRetrieveResp
func (c *ClientWithResponses) DocumentTypesRetrieveWithResponse(ctx context.Context, id int, params *DocumentTypesRetrieveParams, reqEditors ...RequestEditorFn) (*DocumentTypesRetrieveResp, error) {
	rsp, err := c.DocumentTypesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesRetrieveResp(rsp)
}

// DocumentTypesPartialUpdateWithBodyWithResponse request with arbitrary body returning *DocumentTypesPartialUpdateResp
func (c *ClientWithResponses) DocumentTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentTypesPartialUpdateResp, error) {
	rsp, err := c.DocumentTypesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) DocumentTypesPartialUpdateWithResponse(ctx context.Context, id int, body DocumentTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesPartialUpdateResp, error) {
	rsp, err := c.DocumentTypesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) DocumentTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesPartialUpdateResp, error) {
	rsp, err := c.DocumentTypesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesPartialUpdateResp(rsp)
}

// DocumentTypesUpdateWithBodyWithResponse request with arbitrary body returning *DocumentTypesUpdateResp
func (c *ClientWithResponses) DocumentTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentTypesUpdateResp, error) {
	rsp, err := c.DocumentTypesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesUpdateResp(rsp)
}

func (c *ClientWithResponses) DocumentTypesUpdateWithResponse(ctx context.Context, id int, body DocumentTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesUpdateResp, error) {
	rsp, err := c.DocumentTypesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesUpdateResp(rsp)
}

func (c *ClientWithResponses) DocumentTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentTypesUpdateResp, error) {
	rsp, err := c.DocumentTypesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentTypesUpdateResp(rsp)
}

// DocumentsListWithResponse request returning *DocumentsListResp
func (c *ClientWithResponses) DocumentsListWithResponse(ctx context.Context, params *DocumentsListParams, reqEditors ...RequestEditorFn) (*DocumentsListResp, error) {
	rsp, err := c.DocumentsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsListResp(rsp)
}

// DocumentsBulkDownloadCreateWithBodyWithResponse request with arbitrary body returning *DocumentsBulkDownloadCreateResp
func (c *ClientWithResponses) DocumentsBulkDownloadCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsBulkDownloadCreateResp, error) {
	rsp, err := c.DocumentsBulkDownloadCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsBulkDownloadCreateResp(rsp)
}

func (c *ClientWithResponses) DocumentsBulkDownloadCreateWithResponse(ctx context.Context, body DocumentsBulkDownloadCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsBulkDownloadCreateResp, error) {
	rsp, err := c.DocumentsBulkDownloadCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsBulkDownloadCreateResp(rsp)
}

// BulkEditWithBodyWithResponse request with arbitrary body returning *BulkEditResp
func (c *ClientWithResponses) BulkEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkEditResp, error) {
	rsp, err := c.BulkEditWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkEditResp(rsp)
}

func (c *ClientWithResponses) BulkEditWithResponse(ctx context.Context, body BulkEditJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkEditResp, error) {
	rsp, err := c.BulkEdit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkEditResp(rsp)
}

// DocumentsNextAsnRetrieveWithResponse request returning *DocumentsNextAsnRetrieveResp
func (c *ClientWithResponses) DocumentsNextAsnRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DocumentsNextAsnRetrieveResp, error) {
	rsp, err := c.DocumentsNextAsnRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsNextAsnRetrieveResp(rsp)
}

// DocumentsPostDocumentCreateWithBodyWithResponse request with arbitrary body returning *DocumentsPostDocumentCreateResp
func (c *ClientWithResponses) DocumentsPostDocumentCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsPostDocumentCreateResp, error) {
	rsp, err := c.DocumentsPostDocumentCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsPostDocumentCreateResp(rsp)
}

// DocumentsSelectionDataCreateWithBodyWithResponse request with arbitrary body returning *DocumentsSelectionDataCreateResp
func (c *ClientWithResponses) DocumentsSelectionDataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsSelectionDataCreateResp, error) {
	rsp, err := c.DocumentsSelectionDataCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsSelectionDataCreateResp(rsp)
}

func (c *ClientWithResponses) DocumentsSelectionDataCreateWithResponse(ctx context.Context, body DocumentsSelectionDataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsSelectionDataCreateResp, error) {
	rsp, err := c.DocumentsSelectionDataCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsSelectionDataCreateResp(rsp)
}

// DocumentsDestroyWithResponse request returning *DocumentsDestroyResp
func (c *ClientWithResponses) DocumentsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsDestroyResp, error) {
	rsp, err := c.DocumentsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsDestroyResp(rsp)
}

// DocumentsRetrieveWithResponse request returning *DocumentsRetrieveResp
func (c *ClientWithResponses) DocumentsRetrieveWithResponse(ctx context.Context, id int, params *DocumentsRetrieveParams, reqEditors ...RequestEditorFn) (*DocumentsRetrieveResp, error) {
	rsp, err := c.DocumentsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsRetrieveResp(rsp)
}

// DocumentsPartialUpdateWithBodyWithResponse request with arbitrary body returning *DocumentsPartialUpdateResp
func (c *ClientWithResponses) DocumentsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsPartialUpdateResp, error) {
	rsp, err := c.DocumentsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) DocumentsPartialUpdateWithResponse(ctx context.Context, id int, body DocumentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsPartialUpdateResp, error) {
	rsp, err := c.DocumentsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) DocumentsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentsPartialUpdateResp, error) {
	rsp, err := c.DocumentsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsPartialUpdateResp(rsp)
}

// DocumentsUpdateWithBodyWithResponse request with arbitrary body returning *DocumentsUpdateResp
func (c *ClientWithResponses) DocumentsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsUpdateResp, error) {
	rsp, err := c.DocumentsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsUpdateResp(rsp)
}

func (c *ClientWithResponses) DocumentsUpdateWithResponse(ctx context.Context, id int, body DocumentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsUpdateResp, error) {
	rsp, err := c.DocumentsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsUpdateResp(rsp)
}

func (c *ClientWithResponses) DocumentsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentsUpdateResp, error) {
	rsp, err := c.DocumentsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsUpdateResp(rsp)
}

// DocumentsDownloadRetrieveWithResponse request returning *DocumentsDownloadRetrieveResp
func (c *ClientWithResponses) DocumentsDownloadRetrieveWithResponse(ctx context.Context, id int, params *DocumentsDownloadRetrieveParams, reqEditors ...RequestEditorFn) (*DocumentsDownloadRetrieveResp, error) {
	rsp, err := c.DocumentsDownloadRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsDownloadRetrieveResp(rsp)
}

// DocumentsEmailCreateWithBodyWithResponse request with arbitrary body returning *DocumentsEmailCreateResp
func (c *ClientWithResponses) DocumentsEmailCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsEmailCreateResp, error) {
	rsp, err := c.DocumentsEmailCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsEmailCreateResp(rsp)
}

func (c *ClientWithResponses) DocumentsEmailCreateWithResponse(ctx context.Context, id int, body DocumentsEmailCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsEmailCreateResp, error) {
	rsp, err := c.DocumentsEmailCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsEmailCreateResp(rsp)
}

func (c *ClientWithResponses) DocumentsEmailCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body DocumentsEmailCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentsEmailCreateResp, error) {
	rsp, err := c.DocumentsEmailCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsEmailCreateResp(rsp)
}

// DocumentsHistoryListWithResponse request returning *DocumentsHistoryListResp
func (c *ClientWithResponses) DocumentsHistoryListWithResponse(ctx context.Context, id int, params *DocumentsHistoryListParams, reqEditors ...RequestEditorFn) (*DocumentsHistoryListResp, error) {
	rsp, err := c.DocumentsHistoryList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsHistoryListResp(rsp)
}

// DocumentsMetadataRetrieveWithResponse request returning *DocumentsMetadataRetrieveResp
func (c *ClientWithResponses) DocumentsMetadataRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsMetadataRetrieveResp, error) {
	rsp, err := c.DocumentsMetadataRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsMetadataRetrieveResp(rsp)
}

// DocumentsNotesDestroyWithResponse request returning *DocumentsNotesDestroyResp
func (c *ClientWithResponses) DocumentsNotesDestroyWithResponse(ctx context.Context, id int, params *DocumentsNotesDestroyParams, reqEditors ...RequestEditorFn) (*DocumentsNotesDestroyResp, error) {
	rsp, err := c.DocumentsNotesDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsNotesDestroyResp(rsp)
}

// DocumentsNotesListWithResponse request returning *DocumentsNotesListResp
func (c *ClientWithResponses) DocumentsNotesListWithResponse(ctx context.Context, id int, params *DocumentsNotesListParams, reqEditors ...RequestEditorFn) (*DocumentsNotesListResp, error) {
	rsp, err := c.DocumentsNotesList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsNotesListResp(rsp)
}

// DocumentsNotesCreateWithBodyWithResponse request with arbitrary body returning *DocumentsNotesCreateResp
func (c *ClientWithResponses) DocumentsNotesCreateWithBodyWithResponse(ctx context.Context, id int, params *DocumentsNotesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentsNotesCreateResp, error) {
	rsp, err := c.DocumentsNotesCreateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsNotesCreateResp(rsp)
}

func (c *ClientWithResponses) DocumentsNotesCreateWithResponse(ctx context.Context, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentsNotesCreateResp, error) {
	rsp, err := c.DocumentsNotesCreate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsNotesCreateResp(rsp)
}

func (c *ClientWithResponses) DocumentsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, params *DocumentsNotesCreateParams, body DocumentsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DocumentsNotesCreateResp, error) {
	rsp, err := c.DocumentsNotesCreateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsNotesCreateResp(rsp)
}

// DocumentsPreviewRetrieveWithResponse request returning *DocumentsPreviewRetrieveResp
func (c *ClientWithResponses) DocumentsPreviewRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsPreviewRetrieveResp, error) {
	rsp, err := c.DocumentsPreviewRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsPreviewRetrieveResp(rsp)
}

// DocumentShareLinksWithResponse request returning *DocumentShareLinksResp
func (c *ClientWithResponses) DocumentShareLinksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DocumentShareLinksResp, error) {
	rsp, err := c.DocumentShareLinks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentShareLinksResp(rsp)
}

// DocumentsSuggestionsRetrieveWithResponse request returning *DocumentsSuggestionsRetrieveResp
func (c *ClientWithResponses) DocumentsSuggestionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsSuggestionsRetrieveResp, error) {
	rsp, err := c.DocumentsSuggestionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsSuggestionsRetrieveResp(rsp)
}

// DocumentsThumbRetrieveWithResponse request returning *DocumentsThumbRetrieveResp
func (c *ClientWithResponses) DocumentsThumbRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DocumentsThumbRetrieveResp, error) {
	rsp, err := c.DocumentsThumbRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentsThumbRetrieveResp(rsp)
}

// GroupsListWithResponse request returning *GroupsListResp
func (c *ClientWithResponses) GroupsListWithResponse(ctx context.Context, params *GroupsListParams, reqEditors ...RequestEditorFn) (*GroupsListResp, error) {
	rsp, err := c.GroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsListResp(rsp)
}

// GroupsCreateWithBodyWithResponse request with arbitrary body returning *GroupsCreateResp
func (c *ClientWithResponses) GroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsCreateResp, error) {
	rsp, err := c.GroupsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsCreateResp(rsp)
}

func (c *ClientWithResponses) GroupsCreateWithResponse(ctx context.Context, body GroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsCreateResp, error) {
	rsp, err := c.GroupsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsCreateResp(rsp)
}

func (c *ClientWithResponses) GroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body GroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GroupsCreateResp, error) {
	rsp, err := c.GroupsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsCreateResp(rsp)
}

// GroupsDestroyWithResponse request returning *GroupsDestroyResp
func (c *ClientWithResponses) GroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GroupsDestroyResp, error) {
	rsp, err := c.GroupsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsDestroyResp(rsp)
}

// GroupsRetrieveWithResponse request returning *GroupsRetrieveResp
func (c *ClientWithResponses) GroupsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GroupsRetrieveResp, error) {
	rsp, err := c.GroupsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsRetrieveResp(rsp)
}

// GroupsPartialUpdateWithBodyWithResponse request with arbitrary body returning *GroupsPartialUpdateResp
func (c *ClientWithResponses) GroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsPartialUpdateResp, error) {
	rsp, err := c.GroupsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) GroupsPartialUpdateWithResponse(ctx context.Context, id int, body GroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsPartialUpdateResp, error) {
	rsp, err := c.GroupsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) GroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GroupsPartialUpdateResp, error) {
	rsp, err := c.GroupsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsPartialUpdateResp(rsp)
}

// GroupsUpdateWithBodyWithResponse request with arbitrary body returning *GroupsUpdateResp
func (c *ClientWithResponses) GroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsUpdateResp, error) {
	rsp, err := c.GroupsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsUpdateResp(rsp)
}

func (c *ClientWithResponses) GroupsUpdateWithResponse(ctx context.Context, id int, body GroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsUpdateResp, error) {
	rsp, err := c.GroupsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsUpdateResp(rsp)
}

func (c *ClientWithResponses) GroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GroupsUpdateResp, error) {
	rsp, err := c.GroupsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsUpdateResp(rsp)
}

// LogsListWithResponse request returning *LogsListResp
func (c *ClientWithResponses) LogsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogsListResp, error) {
	rsp, err := c.LogsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogsListResp(rsp)
}

// RetrieveLogWithResponse request returning *RetrieveLogResp
func (c *ClientWithResponses) RetrieveLogWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RetrieveLogResp, error) {
	rsp, err := c.RetrieveLog(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveLogResp(rsp)
}

// MailAccountsListWithResponse request returning *MailAccountsListResp
func (c *ClientWithResponses) MailAccountsListWithResponse(ctx context.Context, params *MailAccountsListParams, reqEditors ...RequestEditorFn) (*MailAccountsListResp, error) {
	rsp, err := c.MailAccountsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsListResp(rsp)
}

// MailAccountsCreateWithBodyWithResponse request with arbitrary body returning *MailAccountsCreateResp
func (c *ClientWithResponses) MailAccountsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountsCreateResp, error) {
	rsp, err := c.MailAccountsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsCreateResp(rsp)
}

func (c *ClientWithResponses) MailAccountsCreateWithResponse(ctx context.Context, body MailAccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsCreateResp, error) {
	rsp, err := c.MailAccountsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsCreateResp(rsp)
}

func (c *ClientWithResponses) MailAccountsCreateWithFormdataBodyWithResponse(ctx context.Context, body MailAccountsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsCreateResp, error) {
	rsp, err := c.MailAccountsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsCreateResp(rsp)
}

// MailAccountTestWithBodyWithResponse request with arbitrary body returning *MailAccountTestResp
func (c *ClientWithResponses) MailAccountTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountTestResp, error) {
	rsp, err := c.MailAccountTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountTestResp(rsp)
}

func (c *ClientWithResponses) MailAccountTestWithResponse(ctx context.Context, body MailAccountTestJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountTestResp, error) {
	rsp, err := c.MailAccountTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountTestResp(rsp)
}

func (c *ClientWithResponses) MailAccountTestWithFormdataBodyWithResponse(ctx context.Context, body MailAccountTestFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountTestResp, error) {
	rsp, err := c.MailAccountTestWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountTestResp(rsp)
}

// MailAccountsDestroyWithResponse request returning *MailAccountsDestroyResp
func (c *ClientWithResponses) MailAccountsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailAccountsDestroyResp, error) {
	rsp, err := c.MailAccountsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsDestroyResp(rsp)
}

// MailAccountsRetrieveWithResponse request returning *MailAccountsRetrieveResp
func (c *ClientWithResponses) MailAccountsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailAccountsRetrieveResp, error) {
	rsp, err := c.MailAccountsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsRetrieveResp(rsp)
}

// MailAccountsPartialUpdateWithBodyWithResponse request with arbitrary body returning *MailAccountsPartialUpdateResp
func (c *ClientWithResponses) MailAccountsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountsPartialUpdateResp, error) {
	rsp, err := c.MailAccountsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) MailAccountsPartialUpdateWithResponse(ctx context.Context, id int, body MailAccountsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsPartialUpdateResp, error) {
	rsp, err := c.MailAccountsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) MailAccountsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MailAccountsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsPartialUpdateResp, error) {
	rsp, err := c.MailAccountsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsPartialUpdateResp(rsp)
}

// MailAccountsUpdateWithBodyWithResponse request with arbitrary body returning *MailAccountsUpdateResp
func (c *ClientWithResponses) MailAccountsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountsUpdateResp, error) {
	rsp, err := c.MailAccountsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsUpdateResp(rsp)
}

func (c *ClientWithResponses) MailAccountsUpdateWithResponse(ctx context.Context, id int, body MailAccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsUpdateResp, error) {
	rsp, err := c.MailAccountsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsUpdateResp(rsp)
}

func (c *ClientWithResponses) MailAccountsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MailAccountsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountsUpdateResp, error) {
	rsp, err := c.MailAccountsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountsUpdateResp(rsp)
}

// MailAccountProcessWithBodyWithResponse request with arbitrary body returning *MailAccountProcessResp
func (c *ClientWithResponses) MailAccountProcessWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailAccountProcessResp, error) {
	rsp, err := c.MailAccountProcessWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountProcessResp(rsp)
}

func (c *ClientWithResponses) MailAccountProcessWithResponse(ctx context.Context, id int, body MailAccountProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*MailAccountProcessResp, error) {
	rsp, err := c.MailAccountProcess(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountProcessResp(rsp)
}

func (c *ClientWithResponses) MailAccountProcessWithFormdataBodyWithResponse(ctx context.Context, id int, body MailAccountProcessFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailAccountProcessResp, error) {
	rsp, err := c.MailAccountProcessWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailAccountProcessResp(rsp)
}

// MailRulesListWithResponse request returning *MailRulesListResp
func (c *ClientWithResponses) MailRulesListWithResponse(ctx context.Context, params *MailRulesListParams, reqEditors ...RequestEditorFn) (*MailRulesListResp, error) {
	rsp, err := c.MailRulesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesListResp(rsp)
}

// MailRulesCreateWithBodyWithResponse request with arbitrary body returning *MailRulesCreateResp
func (c *ClientWithResponses) MailRulesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailRulesCreateResp, error) {
	rsp, err := c.MailRulesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesCreateResp(rsp)
}

func (c *ClientWithResponses) MailRulesCreateWithResponse(ctx context.Context, body MailRulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailRulesCreateResp, error) {
	rsp, err := c.MailRulesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesCreateResp(rsp)
}

func (c *ClientWithResponses) MailRulesCreateWithFormdataBodyWithResponse(ctx context.Context, body MailRulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailRulesCreateResp, error) {
	rsp, err := c.MailRulesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesCreateResp(rsp)
}

// MailRulesDestroyWithResponse request returning *MailRulesDestroyResp
func (c *ClientWithResponses) MailRulesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailRulesDestroyResp, error) {
	rsp, err := c.MailRulesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesDestroyResp(rsp)
}

// MailRulesRetrieveWithResponse request returning *MailRulesRetrieveResp
func (c *ClientWithResponses) MailRulesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailRulesRetrieveResp, error) {
	rsp, err := c.MailRulesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesRetrieveResp(rsp)
}

// MailRulesPartialUpdateWithBodyWithResponse request with arbitrary body returning *MailRulesPartialUpdateResp
func (c *ClientWithResponses) MailRulesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailRulesPartialUpdateResp, error) {
	rsp, err := c.MailRulesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) MailRulesPartialUpdateWithResponse(ctx context.Context, id int, body MailRulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailRulesPartialUpdateResp, error) {
	rsp, err := c.MailRulesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) MailRulesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MailRulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailRulesPartialUpdateResp, error) {
	rsp, err := c.MailRulesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesPartialUpdateResp(rsp)
}

// MailRulesUpdateWithBodyWithResponse request with arbitrary body returning *MailRulesUpdateResp
func (c *ClientWithResponses) MailRulesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MailRulesUpdateResp, error) {
	rsp, err := c.MailRulesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesUpdateResp(rsp)
}

func (c *ClientWithResponses) MailRulesUpdateWithResponse(ctx context.Context, id int, body MailRulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MailRulesUpdateResp, error) {
	rsp, err := c.MailRulesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesUpdateResp(rsp)
}

func (c *ClientWithResponses) MailRulesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MailRulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MailRulesUpdateResp, error) {
	rsp, err := c.MailRulesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailRulesUpdateResp(rsp)
}

// OauthCallbackRetrieveWithResponse request returning *OauthCallbackRetrieveResp
func (c *ClientWithResponses) OauthCallbackRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OauthCallbackRetrieveResp, error) {
	rsp, err := c.OauthCallbackRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOauthCallbackRetrieveResp(rsp)
}

// ProfileRetrieveWithResponse request returning *ProfileRetrieveResp
func (c *ClientWithResponses) ProfileRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileRetrieveResp, error) {
	rsp, err := c.ProfileRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileRetrieveResp(rsp)
}

// ProfilePartialUpdateWithBodyWithResponse request with arbitrary body returning *ProfilePartialUpdateResp
func (c *ClientWithResponses) ProfilePartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfilePartialUpdateResp, error) {
	rsp, err := c.ProfilePartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilePartialUpdateResp(rsp)
}

func (c *ClientWithResponses) ProfilePartialUpdateWithResponse(ctx context.Context, body ProfilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfilePartialUpdateResp, error) {
	rsp, err := c.ProfilePartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilePartialUpdateResp(rsp)
}

func (c *ClientWithResponses) ProfilePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, body ProfilePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProfilePartialUpdateResp, error) {
	rsp, err := c.ProfilePartialUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilePartialUpdateResp(rsp)
}

// ProfileDisconnectSocialAccountCreateWithBodyWithResponse request with arbitrary body returning *ProfileDisconnectSocialAccountCreateResp
func (c *ClientWithResponses) ProfileDisconnectSocialAccountCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfileDisconnectSocialAccountCreateResp, error) {
	rsp, err := c.ProfileDisconnectSocialAccountCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileDisconnectSocialAccountCreateResp(rsp)
}

func (c *ClientWithResponses) ProfileDisconnectSocialAccountCreateWithResponse(ctx context.Context, body ProfileDisconnectSocialAccountCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfileDisconnectSocialAccountCreateResp, error) {
	rsp, err := c.ProfileDisconnectSocialAccountCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileDisconnectSocialAccountCreateResp(rsp)
}

// ProfileGenerateAuthTokenCreateWithResponse request returning *ProfileGenerateAuthTokenCreateResp
func (c *ClientWithResponses) ProfileGenerateAuthTokenCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileGenerateAuthTokenCreateResp, error) {
	rsp, err := c.ProfileGenerateAuthTokenCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileGenerateAuthTokenCreateResp(rsp)
}

// ProfileSocialAccountProvidersRetrieveWithResponse request returning *ProfileSocialAccountProvidersRetrieveResp
func (c *ClientWithResponses) ProfileSocialAccountProvidersRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileSocialAccountProvidersRetrieveResp, error) {
	rsp, err := c.ProfileSocialAccountProvidersRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileSocialAccountProvidersRetrieveResp(rsp)
}

// ProfileTotpDestroyWithResponse request returning *ProfileTotpDestroyResp
func (c *ClientWithResponses) ProfileTotpDestroyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileTotpDestroyResp, error) {
	rsp, err := c.ProfileTotpDestroy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileTotpDestroyResp(rsp)
}

// ProfileTotpRetrieveWithResponse request returning *ProfileTotpRetrieveResp
func (c *ClientWithResponses) ProfileTotpRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProfileTotpRetrieveResp, error) {
	rsp, err := c.ProfileTotpRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileTotpRetrieveResp(rsp)
}

// ProfileTotpCreateWithBodyWithResponse request with arbitrary body returning *ProfileTotpCreateResp
func (c *ClientWithResponses) ProfileTotpCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfileTotpCreateResp, error) {
	rsp, err := c.ProfileTotpCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileTotpCreateResp(rsp)
}

func (c *ClientWithResponses) ProfileTotpCreateWithResponse(ctx context.Context, body ProfileTotpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfileTotpCreateResp, error) {
	rsp, err := c.ProfileTotpCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileTotpCreateResp(rsp)
}

// RemoteVersionRetrieveWithResponse request returning *RemoteVersionRetrieveResp
func (c *ClientWithResponses) RemoteVersionRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RemoteVersionRetrieveResp, error) {
	rsp, err := c.RemoteVersionRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoteVersionRetrieveResp(rsp)
}

// SavedViewsListWithResponse request returning *SavedViewsListResp
func (c *ClientWithResponses) SavedViewsListWithResponse(ctx context.Context, params *SavedViewsListParams, reqEditors ...RequestEditorFn) (*SavedViewsListResp, error) {
	rsp, err := c.SavedViewsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsListResp(rsp)
}

// SavedViewsCreateWithBodyWithResponse request with arbitrary body returning *SavedViewsCreateResp
func (c *ClientWithResponses) SavedViewsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavedViewsCreateResp, error) {
	rsp, err := c.SavedViewsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsCreateResp(rsp)
}

func (c *ClientWithResponses) SavedViewsCreateWithResponse(ctx context.Context, body SavedViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsCreateResp, error) {
	rsp, err := c.SavedViewsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsCreateResp(rsp)
}

func (c *ClientWithResponses) SavedViewsCreateWithFormdataBodyWithResponse(ctx context.Context, body SavedViewsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsCreateResp, error) {
	rsp, err := c.SavedViewsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsCreateResp(rsp)
}

// SavedViewsDestroyWithResponse request returning *SavedViewsDestroyResp
func (c *ClientWithResponses) SavedViewsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SavedViewsDestroyResp, error) {
	rsp, err := c.SavedViewsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsDestroyResp(rsp)
}

// SavedViewsRetrieveWithResponse request returning *SavedViewsRetrieveResp
func (c *ClientWithResponses) SavedViewsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SavedViewsRetrieveResp, error) {
	rsp, err := c.SavedViewsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsRetrieveResp(rsp)
}

// SavedViewsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SavedViewsPartialUpdateResp
func (c *ClientWithResponses) SavedViewsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavedViewsPartialUpdateResp, error) {
	rsp, err := c.SavedViewsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) SavedViewsPartialUpdateWithResponse(ctx context.Context, id int, body SavedViewsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsPartialUpdateResp, error) {
	rsp, err := c.SavedViewsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) SavedViewsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SavedViewsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsPartialUpdateResp, error) {
	rsp, err := c.SavedViewsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsPartialUpdateResp(rsp)
}

// SavedViewsUpdateWithBodyWithResponse request with arbitrary body returning *SavedViewsUpdateResp
func (c *ClientWithResponses) SavedViewsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavedViewsUpdateResp, error) {
	rsp, err := c.SavedViewsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsUpdateResp(rsp)
}

func (c *ClientWithResponses) SavedViewsUpdateWithResponse(ctx context.Context, id int, body SavedViewsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsUpdateResp, error) {
	rsp, err := c.SavedViewsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsUpdateResp(rsp)
}

func (c *ClientWithResponses) SavedViewsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SavedViewsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SavedViewsUpdateResp, error) {
	rsp, err := c.SavedViewsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavedViewsUpdateResp(rsp)
}

// SearchRetrieveWithResponse request returning *SearchRetrieveResp
func (c *ClientWithResponses) SearchRetrieveWithResponse(ctx context.Context, params *SearchRetrieveParams, reqEditors ...RequestEditorFn) (*SearchRetrieveResp, error) {
	rsp, err := c.SearchRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchRetrieveResp(rsp)
}

// SearchAutocompleteListWithResponse request returning *SearchAutocompleteListResp
func (c *ClientWithResponses) SearchAutocompleteListWithResponse(ctx context.Context, params *SearchAutocompleteListParams, reqEditors ...RequestEditorFn) (*SearchAutocompleteListResp, error) {
	rsp, err := c.SearchAutocompleteList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchAutocompleteListResp(rsp)
}

// ShareLinksListWithResponse request returning *ShareLinksListResp
func (c *ClientWithResponses) ShareLinksListWithResponse(ctx context.Context, params *ShareLinksListParams, reqEditors ...RequestEditorFn) (*ShareLinksListResp, error) {
	rsp, err := c.ShareLinksList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksListResp(rsp)
}

// ShareLinksCreateWithBodyWithResponse request with arbitrary body returning *ShareLinksCreateResp
func (c *ClientWithResponses) ShareLinksCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareLinksCreateResp, error) {
	rsp, err := c.ShareLinksCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksCreateResp(rsp)
}

func (c *ClientWithResponses) ShareLinksCreateWithResponse(ctx context.Context, body ShareLinksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksCreateResp, error) {
	rsp, err := c.ShareLinksCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksCreateResp(rsp)
}

func (c *ClientWithResponses) ShareLinksCreateWithFormdataBodyWithResponse(ctx context.Context, body ShareLinksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksCreateResp, error) {
	rsp, err := c.ShareLinksCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksCreateResp(rsp)
}

// ShareLinksDestroyWithResponse request returning *ShareLinksDestroyResp
func (c *ClientWithResponses) ShareLinksDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ShareLinksDestroyResp, error) {
	rsp, err := c.ShareLinksDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksDestroyResp(rsp)
}

// ShareLinksRetrieveWithResponse request returning *ShareLinksRetrieveResp
func (c *ClientWithResponses) ShareLinksRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ShareLinksRetrieveResp, error) {
	rsp, err := c.ShareLinksRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksRetrieveResp(rsp)
}

// ShareLinksPartialUpdateWithBodyWithResponse request with arbitrary body returning *ShareLinksPartialUpdateResp
func (c *ClientWithResponses) ShareLinksPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareLinksPartialUpdateResp, error) {
	rsp, err := c.ShareLinksPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) ShareLinksPartialUpdateWithResponse(ctx context.Context, id int, body ShareLinksPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksPartialUpdateResp, error) {
	rsp, err := c.ShareLinksPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) ShareLinksPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ShareLinksPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksPartialUpdateResp, error) {
	rsp, err := c.ShareLinksPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksPartialUpdateResp(rsp)
}

// ShareLinksUpdateWithBodyWithResponse request with arbitrary body returning *ShareLinksUpdateResp
func (c *ClientWithResponses) ShareLinksUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareLinksUpdateResp, error) {
	rsp, err := c.ShareLinksUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksUpdateResp(rsp)
}

func (c *ClientWithResponses) ShareLinksUpdateWithResponse(ctx context.Context, id int, body ShareLinksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksUpdateResp, error) {
	rsp, err := c.ShareLinksUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksUpdateResp(rsp)
}

func (c *ClientWithResponses) ShareLinksUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ShareLinksUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ShareLinksUpdateResp, error) {
	rsp, err := c.ShareLinksUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareLinksUpdateResp(rsp)
}

// StatisticsRetrieveWithResponse request returning *StatisticsRetrieveResp
func (c *ClientWithResponses) StatisticsRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatisticsRetrieveResp, error) {
	rsp, err := c.StatisticsRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatisticsRetrieveResp(rsp)
}

// StatusRetrieveWithResponse request returning *StatusRetrieveResp
func (c *ClientWithResponses) StatusRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatusRetrieveResp, error) {
	rsp, err := c.StatusRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatusRetrieveResp(rsp)
}

// StoragePathsListWithResponse request returning *StoragePathsListResp
func (c *ClientWithResponses) StoragePathsListWithResponse(ctx context.Context, params *StoragePathsListParams, reqEditors ...RequestEditorFn) (*StoragePathsListResp, error) {
	rsp, err := c.StoragePathsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsListResp(rsp)
}

// StoragePathsCreateWithBodyWithResponse request with arbitrary body returning *StoragePathsCreateResp
func (c *ClientWithResponses) StoragePathsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoragePathsCreateResp, error) {
	rsp, err := c.StoragePathsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsCreateResp(rsp)
}

func (c *ClientWithResponses) StoragePathsCreateWithResponse(ctx context.Context, body StoragePathsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsCreateResp, error) {
	rsp, err := c.StoragePathsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsCreateResp(rsp)
}

func (c *ClientWithResponses) StoragePathsCreateWithFormdataBodyWithResponse(ctx context.Context, body StoragePathsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsCreateResp, error) {
	rsp, err := c.StoragePathsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsCreateResp(rsp)
}

// StoragePathsTestCreateWithBodyWithResponse request with arbitrary body returning *StoragePathsTestCreateResp
func (c *ClientWithResponses) StoragePathsTestCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoragePathsTestCreateResp, error) {
	rsp, err := c.StoragePathsTestCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsTestCreateResp(rsp)
}

func (c *ClientWithResponses) StoragePathsTestCreateWithResponse(ctx context.Context, body StoragePathsTestCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsTestCreateResp, error) {
	rsp, err := c.StoragePathsTestCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsTestCreateResp(rsp)
}

func (c *ClientWithResponses) StoragePathsTestCreateWithFormdataBodyWithResponse(ctx context.Context, body StoragePathsTestCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsTestCreateResp, error) {
	rsp, err := c.StoragePathsTestCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsTestCreateResp(rsp)
}

// StoragePathsDestroyWithResponse request returning *StoragePathsDestroyResp
func (c *ClientWithResponses) StoragePathsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StoragePathsDestroyResp, error) {
	rsp, err := c.StoragePathsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsDestroyResp(rsp)
}

// StoragePathsRetrieveWithResponse request returning *StoragePathsRetrieveResp
func (c *ClientWithResponses) StoragePathsRetrieveWithResponse(ctx context.Context, id int, params *StoragePathsRetrieveParams, reqEditors ...RequestEditorFn) (*StoragePathsRetrieveResp, error) {
	rsp, err := c.StoragePathsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsRetrieveResp(rsp)
}

// StoragePathsPartialUpdateWithBodyWithResponse request with arbitrary body returning *StoragePathsPartialUpdateResp
func (c *ClientWithResponses) StoragePathsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoragePathsPartialUpdateResp, error) {
	rsp, err := c.StoragePathsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) StoragePathsPartialUpdateWithResponse(ctx context.Context, id int, body StoragePathsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsPartialUpdateResp, error) {
	rsp, err := c.StoragePathsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) StoragePathsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StoragePathsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsPartialUpdateResp, error) {
	rsp, err := c.StoragePathsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsPartialUpdateResp(rsp)
}

// StoragePathsUpdateWithBodyWithResponse request with arbitrary body returning *StoragePathsUpdateResp
func (c *ClientWithResponses) StoragePathsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoragePathsUpdateResp, error) {
	rsp, err := c.StoragePathsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsUpdateResp(rsp)
}

func (c *ClientWithResponses) StoragePathsUpdateWithResponse(ctx context.Context, id int, body StoragePathsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsUpdateResp, error) {
	rsp, err := c.StoragePathsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsUpdateResp(rsp)
}

func (c *ClientWithResponses) StoragePathsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StoragePathsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StoragePathsUpdateResp, error) {
	rsp, err := c.StoragePathsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoragePathsUpdateResp(rsp)
}

// TagsListWithResponse request returning *TagsListResp
func (c *ClientWithResponses) TagsListWithResponse(ctx context.Context, params *TagsListParams, reqEditors ...RequestEditorFn) (*TagsListResp, error) {
	rsp, err := c.TagsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsListResp(rsp)
}

// TagsCreateWithBodyWithResponse request with arbitrary body returning *TagsCreateResp
func (c *ClientWithResponses) TagsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagsCreateResp, error) {
	rsp, err := c.TagsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsCreateResp(rsp)
}

func (c *ClientWithResponses) TagsCreateWithResponse(ctx context.Context, body TagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TagsCreateResp, error) {
	rsp, err := c.TagsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsCreateResp(rsp)
}

func (c *ClientWithResponses) TagsCreateWithFormdataBodyWithResponse(ctx context.Context, body TagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TagsCreateResp, error) {
	rsp, err := c.TagsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsCreateResp(rsp)
}

// TagsDestroyWithResponse request returning *TagsDestroyResp
func (c *ClientWithResponses) TagsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TagsDestroyResp, error) {
	rsp, err := c.TagsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsDestroyResp(rsp)
}

// TagsRetrieveWithResponse request returning *TagsRetrieveResp
func (c *ClientWithResponses) TagsRetrieveWithResponse(ctx context.Context, id int, params *TagsRetrieveParams, reqEditors ...RequestEditorFn) (*TagsRetrieveResp, error) {
	rsp, err := c.TagsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsRetrieveResp(rsp)
}

// TagsPartialUpdateWithBodyWithResponse request with arbitrary body returning *TagsPartialUpdateResp
func (c *ClientWithResponses) TagsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagsPartialUpdateResp, error) {
	rsp, err := c.TagsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) TagsPartialUpdateWithResponse(ctx context.Context, id int, body TagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TagsPartialUpdateResp, error) {
	rsp, err := c.TagsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) TagsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TagsPartialUpdateResp, error) {
	rsp, err := c.TagsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsPartialUpdateResp(rsp)
}

// TagsUpdateWithBodyWithResponse request with arbitrary body returning *TagsUpdateResp
func (c *ClientWithResponses) TagsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagsUpdateResp, error) {
	rsp, err := c.TagsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsUpdateResp(rsp)
}

func (c *ClientWithResponses) TagsUpdateWithResponse(ctx context.Context, id int, body TagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TagsUpdateResp, error) {
	rsp, err := c.TagsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsUpdateResp(rsp)
}

func (c *ClientWithResponses) TagsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TagsUpdateResp, error) {
	rsp, err := c.TagsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagsUpdateResp(rsp)
}

// TasksListWithResponse request returning *TasksListResp
func (c *ClientWithResponses) TasksListWithResponse(ctx context.Context, params *TasksListParams, reqEditors ...RequestEditorFn) (*TasksListResp, error) {
	rsp, err := c.TasksList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksListResp(rsp)
}

// AcknowledgeTasksWithBodyWithResponse request with arbitrary body returning *AcknowledgeTasksResp
func (c *ClientWithResponses) AcknowledgeTasksWithBodyWithResponse(ctx context.Context, params *AcknowledgeTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcknowledgeTasksResp, error) {
	rsp, err := c.AcknowledgeTasksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcknowledgeTasksResp(rsp)
}

func (c *ClientWithResponses) AcknowledgeTasksWithResponse(ctx context.Context, params *AcknowledgeTasksParams, body AcknowledgeTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*AcknowledgeTasksResp, error) {
	rsp, err := c.AcknowledgeTasks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcknowledgeTasksResp(rsp)
}

// TasksRunCreateWithBodyWithResponse request with arbitrary body returning *TasksRunCreateResp
func (c *ClientWithResponses) TasksRunCreateWithBodyWithResponse(ctx context.Context, params *TasksRunCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TasksRunCreateResp, error) {
	rsp, err := c.TasksRunCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksRunCreateResp(rsp)
}

func (c *ClientWithResponses) TasksRunCreateWithResponse(ctx context.Context, params *TasksRunCreateParams, body TasksRunCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TasksRunCreateResp, error) {
	rsp, err := c.TasksRunCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksRunCreateResp(rsp)
}

func (c *ClientWithResponses) TasksRunCreateWithFormdataBodyWithResponse(ctx context.Context, params *TasksRunCreateParams, body TasksRunCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TasksRunCreateResp, error) {
	rsp, err := c.TasksRunCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksRunCreateResp(rsp)
}

// TasksRetrieveWithResponse request returning *TasksRetrieveResp
func (c *ClientWithResponses) TasksRetrieveWithResponse(ctx context.Context, id int, params *TasksRetrieveParams, reqEditors ...RequestEditorFn) (*TasksRetrieveResp, error) {
	rsp, err := c.TasksRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksRetrieveResp(rsp)
}

// TokenCreateWithBodyWithResponse request with arbitrary body returning *TokenCreateResp
func (c *ClientWithResponses) TokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenCreateResp, error) {
	rsp, err := c.TokenCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenCreateResp(rsp)
}

func (c *ClientWithResponses) TokenCreateWithResponse(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResp, error) {
	rsp, err := c.TokenCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenCreateResp(rsp)
}

func (c *ClientWithResponses) TokenCreateWithFormdataBodyWithResponse(ctx context.Context, body TokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResp, error) {
	rsp, err := c.TokenCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenCreateResp(rsp)
}

// TrashListWithResponse request returning *TrashListResp
func (c *ClientWithResponses) TrashListWithResponse(ctx context.Context, params *TrashListParams, reqEditors ...RequestEditorFn) (*TrashListResp, error) {
	rsp, err := c.TrashList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrashListResp(rsp)
}

// TrashCreateWithBodyWithResponse request with arbitrary body returning *TrashCreateResp
func (c *ClientWithResponses) TrashCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrashCreateResp, error) {
	rsp, err := c.TrashCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrashCreateResp(rsp)
}

func (c *ClientWithResponses) TrashCreateWithResponse(ctx context.Context, body TrashCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TrashCreateResp, error) {
	rsp, err := c.TrashCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrashCreateResp(rsp)
}

func (c *ClientWithResponses) TrashCreateWithFormdataBodyWithResponse(ctx context.Context, body TrashCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TrashCreateResp, error) {
	rsp, err := c.TrashCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrashCreateResp(rsp)
}

// UiSettingsRetrieveWithResponse request returning *UiSettingsRetrieveResp
func (c *ClientWithResponses) UiSettingsRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UiSettingsRetrieveResp, error) {
	rsp, err := c.UiSettingsRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUiSettingsRetrieveResp(rsp)
}

// UiSettingsCreateWithBodyWithResponse request with arbitrary body returning *UiSettingsCreateResp
func (c *ClientWithResponses) UiSettingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UiSettingsCreateResp, error) {
	rsp, err := c.UiSettingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUiSettingsCreateResp(rsp)
}

func (c *ClientWithResponses) UiSettingsCreateWithResponse(ctx context.Context, body UiSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UiSettingsCreateResp, error) {
	rsp, err := c.UiSettingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUiSettingsCreateResp(rsp)
}

func (c *ClientWithResponses) UiSettingsCreateWithFormdataBodyWithResponse(ctx context.Context, body UiSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UiSettingsCreateResp, error) {
	rsp, err := c.UiSettingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUiSettingsCreateResp(rsp)
}

// UsersListWithResponse request returning *UsersListResp
func (c *ClientWithResponses) UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResp, error) {
	rsp, err := c.UsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersListResp(rsp)
}

// UsersCreateWithBodyWithResponse request with arbitrary body returning *UsersCreateResp
func (c *ClientWithResponses) UsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateResp, error) {
	rsp, err := c.UsersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResp(rsp)
}

func (c *ClientWithResponses) UsersCreateWithResponse(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResp, error) {
	rsp, err := c.UsersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResp(rsp)
}

func (c *ClientWithResponses) UsersCreateWithFormdataBodyWithResponse(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResp, error) {
	rsp, err := c.UsersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResp(rsp)
}

// UsersDestroyWithResponse request returning *UsersDestroyResp
func (c *ClientWithResponses) UsersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersDestroyResp, error) {
	rsp, err := c.UsersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDestroyResp(rsp)
}

// UsersRetrieveWithResponse request returning *UsersRetrieveResp
func (c *ClientWithResponses) UsersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersRetrieveResp, error) {
	rsp, err := c.UsersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersRetrieveResp(rsp)
}

// UsersPartialUpdateWithBodyWithResponse request with arbitrary body returning *UsersPartialUpdateResp
func (c *ClientWithResponses) UsersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResp, error) {
	rsp, err := c.UsersPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) UsersPartialUpdateWithResponse(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResp, error) {
	rsp, err := c.UsersPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) UsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResp, error) {
	rsp, err := c.UsersPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResp(rsp)
}

// UsersUpdateWithBodyWithResponse request with arbitrary body returning *UsersUpdateResp
func (c *ClientWithResponses) UsersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateResp, error) {
	rsp, err := c.UsersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResp(rsp)
}

func (c *ClientWithResponses) UsersUpdateWithResponse(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResp, error) {
	rsp, err := c.UsersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResp(rsp)
}

func (c *ClientWithResponses) UsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResp, error) {
	rsp, err := c.UsersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResp(rsp)
}

// UsersDeactivateTotpCreateWithResponse request returning *UsersDeactivateTotpCreateResp
func (c *ClientWithResponses) UsersDeactivateTotpCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersDeactivateTotpCreateResp, error) {
	rsp, err := c.UsersDeactivateTotpCreate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeactivateTotpCreateResp(rsp)
}

// WorkflowActionsListWithResponse request returning *WorkflowActionsListResp
func (c *ClientWithResponses) WorkflowActionsListWithResponse(ctx context.Context, params *WorkflowActionsListParams, reqEditors ...RequestEditorFn) (*WorkflowActionsListResp, error) {
	rsp, err := c.WorkflowActionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsListResp(rsp)
}

// WorkflowActionsCreateWithBodyWithResponse request with arbitrary body returning *WorkflowActionsCreateResp
func (c *ClientWithResponses) WorkflowActionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowActionsCreateResp, error) {
	rsp, err := c.WorkflowActionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsCreateResp(rsp)
}

func (c *ClientWithResponses) WorkflowActionsCreateWithResponse(ctx context.Context, body WorkflowActionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsCreateResp, error) {
	rsp, err := c.WorkflowActionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsCreateResp(rsp)
}

func (c *ClientWithResponses) WorkflowActionsCreateWithFormdataBodyWithResponse(ctx context.Context, body WorkflowActionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsCreateResp, error) {
	rsp, err := c.WorkflowActionsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsCreateResp(rsp)
}

// WorkflowActionsDestroyWithResponse request returning *WorkflowActionsDestroyResp
func (c *ClientWithResponses) WorkflowActionsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowActionsDestroyResp, error) {
	rsp, err := c.WorkflowActionsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsDestroyResp(rsp)
}

// WorkflowActionsRetrieveWithResponse request returning *WorkflowActionsRetrieveResp
func (c *ClientWithResponses) WorkflowActionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowActionsRetrieveResp, error) {
	rsp, err := c.WorkflowActionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsRetrieveResp(rsp)
}

// WorkflowActionsPartialUpdateWithBodyWithResponse request with arbitrary body returning *WorkflowActionsPartialUpdateResp
func (c *ClientWithResponses) WorkflowActionsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowActionsPartialUpdateResp, error) {
	rsp, err := c.WorkflowActionsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowActionsPartialUpdateWithResponse(ctx context.Context, id int, body WorkflowActionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsPartialUpdateResp, error) {
	rsp, err := c.WorkflowActionsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowActionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowActionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsPartialUpdateResp, error) {
	rsp, err := c.WorkflowActionsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsPartialUpdateResp(rsp)
}

// WorkflowActionsUpdateWithBodyWithResponse request with arbitrary body returning *WorkflowActionsUpdateResp
func (c *ClientWithResponses) WorkflowActionsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowActionsUpdateResp, error) {
	rsp, err := c.WorkflowActionsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowActionsUpdateWithResponse(ctx context.Context, id int, body WorkflowActionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsUpdateResp, error) {
	rsp, err := c.WorkflowActionsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowActionsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowActionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowActionsUpdateResp, error) {
	rsp, err := c.WorkflowActionsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowActionsUpdateResp(rsp)
}

// WorkflowTriggersListWithResponse request returning *WorkflowTriggersListResp
func (c *ClientWithResponses) WorkflowTriggersListWithResponse(ctx context.Context, params *WorkflowTriggersListParams, reqEditors ...RequestEditorFn) (*WorkflowTriggersListResp, error) {
	rsp, err := c.WorkflowTriggersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersListResp(rsp)
}

// WorkflowTriggersCreateWithBodyWithResponse request with arbitrary body returning *WorkflowTriggersCreateResp
func (c *ClientWithResponses) WorkflowTriggersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowTriggersCreateResp, error) {
	rsp, err := c.WorkflowTriggersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersCreateResp(rsp)
}

func (c *ClientWithResponses) WorkflowTriggersCreateWithResponse(ctx context.Context, body WorkflowTriggersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersCreateResp, error) {
	rsp, err := c.WorkflowTriggersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersCreateResp(rsp)
}

func (c *ClientWithResponses) WorkflowTriggersCreateWithFormdataBodyWithResponse(ctx context.Context, body WorkflowTriggersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersCreateResp, error) {
	rsp, err := c.WorkflowTriggersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersCreateResp(rsp)
}

// WorkflowTriggersDestroyWithResponse request returning *WorkflowTriggersDestroyResp
func (c *ClientWithResponses) WorkflowTriggersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowTriggersDestroyResp, error) {
	rsp, err := c.WorkflowTriggersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersDestroyResp(rsp)
}

// WorkflowTriggersRetrieveWithResponse request returning *WorkflowTriggersRetrieveResp
func (c *ClientWithResponses) WorkflowTriggersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowTriggersRetrieveResp, error) {
	rsp, err := c.WorkflowTriggersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersRetrieveResp(rsp)
}

// WorkflowTriggersPartialUpdateWithBodyWithResponse request with arbitrary body returning *WorkflowTriggersPartialUpdateResp
func (c *ClientWithResponses) WorkflowTriggersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowTriggersPartialUpdateResp, error) {
	rsp, err := c.WorkflowTriggersPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowTriggersPartialUpdateWithResponse(ctx context.Context, id int, body WorkflowTriggersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersPartialUpdateResp, error) {
	rsp, err := c.WorkflowTriggersPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowTriggersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowTriggersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersPartialUpdateResp, error) {
	rsp, err := c.WorkflowTriggersPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersPartialUpdateResp(rsp)
}

// WorkflowTriggersUpdateWithBodyWithResponse request with arbitrary body returning *WorkflowTriggersUpdateResp
func (c *ClientWithResponses) WorkflowTriggersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowTriggersUpdateResp, error) {
	rsp, err := c.WorkflowTriggersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowTriggersUpdateWithResponse(ctx context.Context, id int, body WorkflowTriggersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersUpdateResp, error) {
	rsp, err := c.WorkflowTriggersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowTriggersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowTriggersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowTriggersUpdateResp, error) {
	rsp, err := c.WorkflowTriggersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowTriggersUpdateResp(rsp)
}

// WorkflowsListWithResponse request returning *WorkflowsListResp
func (c *ClientWithResponses) WorkflowsListWithResponse(ctx context.Context, params *WorkflowsListParams, reqEditors ...RequestEditorFn) (*WorkflowsListResp, error) {
	rsp, err := c.WorkflowsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsListResp(rsp)
}

// WorkflowsCreateWithBodyWithResponse request with arbitrary body returning *WorkflowsCreateResp
func (c *ClientWithResponses) WorkflowsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsCreateResp, error) {
	rsp, err := c.WorkflowsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsCreateResp(rsp)
}

func (c *ClientWithResponses) WorkflowsCreateWithResponse(ctx context.Context, body WorkflowsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsCreateResp, error) {
	rsp, err := c.WorkflowsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsCreateResp(rsp)
}

func (c *ClientWithResponses) WorkflowsCreateWithFormdataBodyWithResponse(ctx context.Context, body WorkflowsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsCreateResp, error) {
	rsp, err := c.WorkflowsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsCreateResp(rsp)
}

// WorkflowsDestroyWithResponse request returning *WorkflowsDestroyResp
func (c *ClientWithResponses) WorkflowsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowsDestroyResp, error) {
	rsp, err := c.WorkflowsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsDestroyResp(rsp)
}

// WorkflowsRetrieveWithResponse request returning *WorkflowsRetrieveResp
func (c *ClientWithResponses) WorkflowsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*WorkflowsRetrieveResp, error) {
	rsp, err := c.WorkflowsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsRetrieveResp(rsp)
}

// WorkflowsPartialUpdateWithBodyWithResponse request with arbitrary body returning *WorkflowsPartialUpdateResp
func (c *ClientWithResponses) WorkflowsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsPartialUpdateResp, error) {
	rsp, err := c.WorkflowsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowsPartialUpdateWithResponse(ctx context.Context, id int, body WorkflowsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsPartialUpdateResp, error) {
	rsp, err := c.WorkflowsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsPartialUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsPartialUpdateResp, error) {
	rsp, err := c.WorkflowsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsPartialUpdateResp(rsp)
}

// WorkflowsUpdateWithBodyWithResponse request with arbitrary body returning *WorkflowsUpdateResp
func (c *ClientWithResponses) WorkflowsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResp, error) {
	rsp, err := c.WorkflowsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowsUpdateWithResponse(ctx context.Context, id int, body WorkflowsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResp, error) {
	rsp, err := c.WorkflowsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsUpdateResp(rsp)
}

func (c *ClientWithResponses) WorkflowsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body WorkflowsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResp, error) {
	rsp, err := c.WorkflowsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsUpdateResp(rsp)
}

// ParseBulkEditObjectsResp parses an HTTP response from a BulkEditObjectsWithResponse call
func ParseBulkEditObjectsResp(rsp *http.Response) (*BulkEditObjectsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkEditObjectsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkEditResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseConfigListResp parses an HTTP response from a ConfigListWithResponse call
func ParseConfigListResp(rsp *http.Response) (*ConfigListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseConfigDestroyResp parses an HTTP response from a ConfigDestroyWithResponse call
func ParseConfigDestroyResp(rsp *http.Response) (*ConfigDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseConfigRetrieveResp parses an HTTP response from a ConfigRetrieveWithResponse call
func ParseConfigRetrieveResp(rsp *http.Response) (*ConfigRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseConfigPartialUpdateResp parses an HTTP response from a ConfigPartialUpdateWithResponse call
func ParseConfigPartialUpdateResp(rsp *http.Response) (*ConfigPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseConfigUpdateResp parses an HTTP response from a ConfigUpdateWithResponse call
func ParseConfigUpdateResp(rsp *http.Response) (*ConfigUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCorrespondentsListResp parses an HTTP response from a CorrespondentsListWithResponse call
func ParseCorrespondentsListResp(rsp *http.Response) (*CorrespondentsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CorrespondentsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCorrespondentList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCorrespondentsCreateResp parses an HTTP response from a CorrespondentsCreateWithResponse call
func ParseCorrespondentsCreateResp(rsp *http.Response) (*CorrespondentsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CorrespondentsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Correspondent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCorrespondentsDestroyResp parses an HTTP response from a CorrespondentsDestroyWithResponse call
func ParseCorrespondentsDestroyResp(rsp *http.Response) (*CorrespondentsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CorrespondentsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCorrespondentsRetrieveResp parses an HTTP response from a CorrespondentsRetrieveWithResponse call
func ParseCorrespondentsRetrieveResp(rsp *http.Response) (*CorrespondentsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CorrespondentsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Correspondent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCorrespondentsPartialUpdateResp parses an HTTP response from a CorrespondentsPartialUpdateWithResponse call
func ParseCorrespondentsPartialUpdateResp(rsp *http.Response) (*CorrespondentsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CorrespondentsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Correspondent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCorrespondentsUpdateResp parses an HTTP response from a CorrespondentsUpdateWithResponse call
func ParseCorrespondentsUpdateResp(rsp *http.Response) (*CorrespondentsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CorrespondentsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Correspondent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsListResp parses an HTTP response from a CustomFieldsListWithResponse call
func ParseCustomFieldsListResp(rsp *http.Response) (*CustomFieldsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCustomFieldList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsCreateResp parses an HTTP response from a CustomFieldsCreateWithResponse call
func ParseCustomFieldsCreateResp(rsp *http.Response) (*CustomFieldsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CustomField
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCustomFieldsDestroyResp parses an HTTP response from a CustomFieldsDestroyWithResponse call
func ParseCustomFieldsDestroyResp(rsp *http.Response) (*CustomFieldsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCustomFieldsRetrieveResp parses an HTTP response from a CustomFieldsRetrieveWithResponse call
func ParseCustomFieldsRetrieveResp(rsp *http.Response) (*CustomFieldsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomField
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsPartialUpdateResp parses an HTTP response from a CustomFieldsPartialUpdateWithResponse call
func ParseCustomFieldsPartialUpdateResp(rsp *http.Response) (*CustomFieldsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomField
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsUpdateResp parses an HTTP response from a CustomFieldsUpdateWithResponse call
func ParseCustomFieldsUpdateResp(rsp *http.Response) (*CustomFieldsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomField
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentTypesListResp parses an HTTP response from a DocumentTypesListWithResponse call
func ParseDocumentTypesListResp(rsp *http.Response) (*DocumentTypesListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentTypesListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDocumentTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentTypesCreateResp parses an HTTP response from a DocumentTypesCreateWithResponse call
func ParseDocumentTypesCreateResp(rsp *http.Response) (*DocumentTypesCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentTypesCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DocumentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDocumentTypesDestroyResp parses an HTTP response from a DocumentTypesDestroyWithResponse call
func ParseDocumentTypesDestroyResp(rsp *http.Response) (*DocumentTypesDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentTypesDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDocumentTypesRetrieveResp parses an HTTP response from a DocumentTypesRetrieveWithResponse call
func ParseDocumentTypesRetrieveResp(rsp *http.Response) (*DocumentTypesRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentTypesRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentTypesPartialUpdateResp parses an HTTP response from a DocumentTypesPartialUpdateWithResponse call
func ParseDocumentTypesPartialUpdateResp(rsp *http.Response) (*DocumentTypesPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentTypesPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentTypesUpdateResp parses an HTTP response from a DocumentTypesUpdateWithResponse call
func ParseDocumentTypesUpdateResp(rsp *http.Response) (*DocumentTypesUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentTypesUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsListResp parses an HTTP response from a DocumentsListWithResponse call
func ParseDocumentsListResp(rsp *http.Response) (*DocumentsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDocumentList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsBulkDownloadCreateResp parses an HTTP response from a DocumentsBulkDownloadCreateWithResponse call
func ParseDocumentsBulkDownloadCreateResp(rsp *http.Response) (*DocumentsBulkDownloadCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsBulkDownloadCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkDownload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBulkEditResp parses an HTTP response from a BulkEditWithResponse call
func ParseBulkEditResp(rsp *http.Response) (*BulkEditResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkEditResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkEditDocumentsResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsNextAsnRetrieveResp parses an HTTP response from a DocumentsNextAsnRetrieveWithResponse call
func ParseDocumentsNextAsnRetrieveResp(rsp *http.Response) (*DocumentsNextAsnRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsNextAsnRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsPostDocumentCreateResp parses an HTTP response from a DocumentsPostDocumentCreateWithResponse call
func ParseDocumentsPostDocumentCreateResp(rsp *http.Response) (*DocumentsPostDocumentCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsPostDocumentCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsSelectionDataCreateResp parses an HTTP response from a DocumentsSelectionDataCreateWithResponse call
func ParseDocumentsSelectionDataCreateResp(rsp *http.Response) (*DocumentsSelectionDataCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsSelectionDataCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SelectionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsDestroyResp parses an HTTP response from a DocumentsDestroyWithResponse call
func ParseDocumentsDestroyResp(rsp *http.Response) (*DocumentsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDocumentsRetrieveResp parses an HTTP response from a DocumentsRetrieveWithResponse call
func ParseDocumentsRetrieveResp(rsp *http.Response) (*DocumentsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Document
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsPartialUpdateResp parses an HTTP response from a DocumentsPartialUpdateWithResponse call
func ParseDocumentsPartialUpdateResp(rsp *http.Response) (*DocumentsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Document
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsUpdateResp parses an HTTP response from a DocumentsUpdateWithResponse call
func ParseDocumentsUpdateResp(rsp *http.Response) (*DocumentsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Document
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsDownloadRetrieveResp parses an HTTP response from a DocumentsDownloadRetrieveWithResponse call
func ParseDocumentsDownloadRetrieveResp(rsp *http.Response) (*DocumentsDownloadRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsDownloadRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsEmailCreateResp parses an HTTP response from a DocumentsEmailCreateWithResponse call
func ParseDocumentsEmailCreateResp(rsp *http.Response) (*DocumentsEmailCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsEmailCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsHistoryListResp parses an HTTP response from a DocumentsHistoryListWithResponse call
func ParseDocumentsHistoryListResp(rsp *http.Response) (*DocumentsHistoryListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsHistoryListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedLogEntryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsMetadataRetrieveResp parses an HTTP response from a DocumentsMetadataRetrieveWithResponse call
func ParseDocumentsMetadataRetrieveResp(rsp *http.Response) (*DocumentsMetadataRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsMetadataRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsNotesDestroyResp parses an HTTP response from a DocumentsNotesDestroyWithResponse call
func ParseDocumentsNotesDestroyResp(rsp *http.Response) (*DocumentsNotesDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsNotesDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNotesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsNotesListResp parses an HTTP response from a DocumentsNotesListWithResponse call
func ParseDocumentsNotesListResp(rsp *http.Response) (*DocumentsNotesListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsNotesListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNotesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsNotesCreateResp parses an HTTP response from a DocumentsNotesCreateWithResponse call
func ParseDocumentsNotesCreateResp(rsp *http.Response) (*DocumentsNotesCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsNotesCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNotesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsPreviewRetrieveResp parses an HTTP response from a DocumentsPreviewRetrieveWithResponse call
func ParseDocumentsPreviewRetrieveResp(rsp *http.Response) (*DocumentsPreviewRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsPreviewRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentShareLinksResp parses an HTTP response from a DocumentShareLinksWithResponse call
func ParseDocumentShareLinksResp(rsp *http.Response) (*DocumentShareLinksResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentShareLinksResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Created    *time.Time `json:"created,omitempty"`
			Expiration *time.Time `json:"expiration,omitempty"`
			Id         *int       `json:"id,omitempty"`
			Slug       *string    `json:"slug,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsSuggestionsRetrieveResp parses an HTTP response from a DocumentsSuggestionsRetrieveWithResponse call
func ParseDocumentsSuggestionsRetrieveResp(rsp *http.Response) (*DocumentsSuggestionsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsSuggestionsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Suggestions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDocumentsThumbRetrieveResp parses an HTTP response from a DocumentsThumbRetrieveWithResponse call
func ParseDocumentsThumbRetrieveResp(rsp *http.Response) (*DocumentsThumbRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentsThumbRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGroupsListResp parses an HTTP response from a GroupsListWithResponse call
func ParseGroupsListResp(rsp *http.Response) (*GroupsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGroupsCreateResp parses an HTTP response from a GroupsCreateWithResponse call
func ParseGroupsCreateResp(rsp *http.Response) (*GroupsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGroupsDestroyResp parses an HTTP response from a GroupsDestroyWithResponse call
func ParseGroupsDestroyResp(rsp *http.Response) (*GroupsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGroupsRetrieveResp parses an HTTP response from a GroupsRetrieveWithResponse call
func ParseGroupsRetrieveResp(rsp *http.Response) (*GroupsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGroupsPartialUpdateResp parses an HTTP response from a GroupsPartialUpdateWithResponse call
func ParseGroupsPartialUpdateResp(rsp *http.Response) (*GroupsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGroupsUpdateResp parses an HTTP response from a GroupsUpdateWithResponse call
func ParseGroupsUpdateResp(rsp *http.Response) (*GroupsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogsListResp parses an HTTP response from a LogsListWithResponse call
func ParseLogsListResp(rsp *http.Response) (*LogsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveLogResp parses an HTTP response from a RetrieveLogWithResponse call
func ParseRetrieveLogResp(rsp *http.Response) (*RetrieveLogResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveLogResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailAccountsListResp parses an HTTP response from a MailAccountsListWithResponse call
func ParseMailAccountsListResp(rsp *http.Response) (*MailAccountsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailAccountsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedMailAccountList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailAccountsCreateResp parses an HTTP response from a MailAccountsCreateWithResponse call
func ParseMailAccountsCreateResp(rsp *http.Response) (*MailAccountsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailAccountsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MailAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMailAccountTestResp parses an HTTP response from a MailAccountTestWithResponse call
func ParseMailAccountTestResp(rsp *http.Response) (*MailAccountTestResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailAccountTestResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailAccountTestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMailAccountsDestroyResp parses an HTTP response from a MailAccountsDestroyWithResponse call
func ParseMailAccountsDestroyResp(rsp *http.Response) (*MailAccountsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailAccountsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMailAccountsRetrieveResp parses an HTTP response from a MailAccountsRetrieveWithResponse call
func ParseMailAccountsRetrieveResp(rsp *http.Response) (*MailAccountsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailAccountsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailAccountsPartialUpdateResp parses an HTTP response from a MailAccountsPartialUpdateWithResponse call
func ParseMailAccountsPartialUpdateResp(rsp *http.Response) (*MailAccountsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailAccountsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailAccountsUpdateResp parses an HTTP response from a MailAccountsUpdateWithResponse call
func ParseMailAccountsUpdateResp(rsp *http.Response) (*MailAccountsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailAccountsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailAccountProcessResp parses an HTTP response from a MailAccountProcessWithResponse call
func ParseMailAccountProcessResp(rsp *http.Response) (*MailAccountProcessResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailAccountProcessResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailAccountProcessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailRulesListResp parses an HTTP response from a MailRulesListWithResponse call
func ParseMailRulesListResp(rsp *http.Response) (*MailRulesListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailRulesListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedMailRuleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailRulesCreateResp parses an HTTP response from a MailRulesCreateWithResponse call
func ParseMailRulesCreateResp(rsp *http.Response) (*MailRulesCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailRulesCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MailRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMailRulesDestroyResp parses an HTTP response from a MailRulesDestroyWithResponse call
func ParseMailRulesDestroyResp(rsp *http.Response) (*MailRulesDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailRulesDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMailRulesRetrieveResp parses an HTTP response from a MailRulesRetrieveWithResponse call
func ParseMailRulesRetrieveResp(rsp *http.Response) (*MailRulesRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailRulesRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailRulesPartialUpdateResp parses an HTTP response from a MailRulesPartialUpdateWithResponse call
func ParseMailRulesPartialUpdateResp(rsp *http.Response) (*MailRulesPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailRulesPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailRulesUpdateResp parses an HTTP response from a MailRulesUpdateWithResponse call
func ParseMailRulesUpdateResp(rsp *http.Response) (*MailRulesUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailRulesUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOauthCallbackRetrieveResp parses an HTTP response from a OauthCallbackRetrieveWithResponse call
func ParseOauthCallbackRetrieveResp(rsp *http.Response) (*OauthCallbackRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OauthCallbackRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProfileRetrieveResp parses an HTTP response from a ProfileRetrieveWithResponse call
func ParseProfileRetrieveResp(rsp *http.Response) (*ProfileRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfilePartialUpdateResp parses an HTTP response from a ProfilePartialUpdateWithResponse call
func ParseProfilePartialUpdateResp(rsp *http.Response) (*ProfilePartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilePartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfileDisconnectSocialAccountCreateResp parses an HTTP response from a ProfileDisconnectSocialAccountCreateWithResponse call
func ParseProfileDisconnectSocialAccountCreateResp(rsp *http.Response) (*ProfileDisconnectSocialAccountCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileDisconnectSocialAccountCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseProfileGenerateAuthTokenCreateResp parses an HTTP response from a ProfileGenerateAuthTokenCreateWithResponse call
func ParseProfileGenerateAuthTokenCreateResp(rsp *http.Response) (*ProfileGenerateAuthTokenCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileGenerateAuthTokenCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfileSocialAccountProvidersRetrieveResp parses an HTTP response from a ProfileSocialAccountProvidersRetrieveWithResponse call
func ParseProfileSocialAccountProvidersRetrieveResp(rsp *http.Response) (*ProfileSocialAccountProvidersRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileSocialAccountProvidersRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfileTotpDestroyResp parses an HTTP response from a ProfileTotpDestroyWithResponse call
func ParseProfileTotpDestroyResp(rsp *http.Response) (*ProfileTotpDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileTotpDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseProfileTotpRetrieveResp parses an HTTP response from a ProfileTotpRetrieveWithResponse call
func ParseProfileTotpRetrieveResp(rsp *http.Response) (*ProfileTotpRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileTotpRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfileTotpCreateResp parses an HTTP response from a ProfileTotpCreateWithResponse call
func ParseProfileTotpCreateResp(rsp *http.Response) (*ProfileTotpCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileTotpCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoteVersionRetrieveResp parses an HTTP response from a RemoteVersionRetrieveWithResponse call
func ParseRemoteVersionRetrieveResp(rsp *http.Response) (*RemoteVersionRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoteVersionRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSavedViewsListResp parses an HTTP response from a SavedViewsListWithResponse call
func ParseSavedViewsListResp(rsp *http.Response) (*SavedViewsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SavedViewsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSavedViewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSavedViewsCreateResp parses an HTTP response from a SavedViewsCreateWithResponse call
func ParseSavedViewsCreateResp(rsp *http.Response) (*SavedViewsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SavedViewsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SavedView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSavedViewsDestroyResp parses an HTTP response from a SavedViewsDestroyWithResponse call
func ParseSavedViewsDestroyResp(rsp *http.Response) (*SavedViewsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SavedViewsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSavedViewsRetrieveResp parses an HTTP response from a SavedViewsRetrieveWithResponse call
func ParseSavedViewsRetrieveResp(rsp *http.Response) (*SavedViewsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SavedViewsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SavedView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSavedViewsPartialUpdateResp parses an HTTP response from a SavedViewsPartialUpdateWithResponse call
func ParseSavedViewsPartialUpdateResp(rsp *http.Response) (*SavedViewsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SavedViewsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SavedView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSavedViewsUpdateResp parses an HTTP response from a SavedViewsUpdateWithResponse call
func ParseSavedViewsUpdateResp(rsp *http.Response) (*SavedViewsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SavedViewsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SavedView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchRetrieveResp parses an HTTP response from a SearchRetrieveWithResponse call
func ParseSearchRetrieveResp(rsp *http.Response) (*SearchRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchAutocompleteListResp parses an HTTP response from a SearchAutocompleteListWithResponse call
func ParseSearchAutocompleteListResp(rsp *http.Response) (*SearchAutocompleteListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchAutocompleteListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShareLinksListResp parses an HTTP response from a ShareLinksListWithResponse call
func ParseShareLinksListResp(rsp *http.Response) (*ShareLinksListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareLinksListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedShareLinkList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShareLinksCreateResp parses an HTTP response from a ShareLinksCreateWithResponse call
func ParseShareLinksCreateResp(rsp *http.Response) (*ShareLinksCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareLinksCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShareLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseShareLinksDestroyResp parses an HTTP response from a ShareLinksDestroyWithResponse call
func ParseShareLinksDestroyResp(rsp *http.Response) (*ShareLinksDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareLinksDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseShareLinksRetrieveResp parses an HTTP response from a ShareLinksRetrieveWithResponse call
func ParseShareLinksRetrieveResp(rsp *http.Response) (*ShareLinksRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareLinksRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShareLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShareLinksPartialUpdateResp parses an HTTP response from a ShareLinksPartialUpdateWithResponse call
func ParseShareLinksPartialUpdateResp(rsp *http.Response) (*ShareLinksPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareLinksPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShareLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseShareLinksUpdateResp parses an HTTP response from a ShareLinksUpdateWithResponse call
func ParseShareLinksUpdateResp(rsp *http.Response) (*ShareLinksUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareLinksUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShareLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStatisticsRetrieveResp parses an HTTP response from a StatisticsRetrieveWithResponse call
func ParseStatisticsRetrieveResp(rsp *http.Response) (*StatisticsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatisticsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStatusRetrieveResp parses an HTTP response from a StatusRetrieveWithResponse call
func ParseStatusRetrieveResp(rsp *http.Response) (*StatusRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatusRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStoragePathsListResp parses an HTTP response from a StoragePathsListWithResponse call
func ParseStoragePathsListResp(rsp *http.Response) (*StoragePathsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StoragePathsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedStoragePathList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStoragePathsCreateResp parses an HTTP response from a StoragePathsCreateWithResponse call
func ParseStoragePathsCreateResp(rsp *http.Response) (*StoragePathsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StoragePathsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StoragePath
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseStoragePathsTestCreateResp parses an HTTP response from a StoragePathsTestCreateWithResponse call
func ParseStoragePathsTestCreateResp(rsp *http.Response) (*StoragePathsTestCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StoragePathsTestCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoragePath
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStoragePathsDestroyResp parses an HTTP response from a StoragePathsDestroyWithResponse call
func ParseStoragePathsDestroyResp(rsp *http.Response) (*StoragePathsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StoragePathsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStoragePathsRetrieveResp parses an HTTP response from a StoragePathsRetrieveWithResponse call
func ParseStoragePathsRetrieveResp(rsp *http.Response) (*StoragePathsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StoragePathsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoragePath
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStoragePathsPartialUpdateResp parses an HTTP response from a StoragePathsPartialUpdateWithResponse call
func ParseStoragePathsPartialUpdateResp(rsp *http.Response) (*StoragePathsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StoragePathsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoragePath
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStoragePathsUpdateResp parses an HTTP response from a StoragePathsUpdateWithResponse call
func ParseStoragePathsUpdateResp(rsp *http.Response) (*StoragePathsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StoragePathsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoragePath
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagsListResp parses an HTTP response from a TagsListWithResponse call
func ParseTagsListResp(rsp *http.Response) (*TagsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTagList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagsCreateResp parses an HTTP response from a TagsCreateWithResponse call
func ParseTagsCreateResp(rsp *http.Response) (*TagsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTagsDestroyResp parses an HTTP response from a TagsDestroyWithResponse call
func ParseTagsDestroyResp(rsp *http.Response) (*TagsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTagsRetrieveResp parses an HTTP response from a TagsRetrieveWithResponse call
func ParseTagsRetrieveResp(rsp *http.Response) (*TagsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagsPartialUpdateResp parses an HTTP response from a TagsPartialUpdateWithResponse call
func ParseTagsPartialUpdateResp(rsp *http.Response) (*TagsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagsUpdateResp parses an HTTP response from a TagsUpdateWithResponse call
func ParseTagsUpdateResp(rsp *http.Response) (*TagsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTasksListResp parses an HTTP response from a TasksListWithResponse call
func ParseTasksListResp(rsp *http.Response) (*TasksListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TasksView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcknowledgeTasksResp parses an HTTP response from a AcknowledgeTasksWithResponse call
func ParseAcknowledgeTasksResp(rsp *http.Response) (*AcknowledgeTasksResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcknowledgeTasksResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AcknowledgeTasks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTasksRunCreateResp parses an HTTP response from a TasksRunCreateWithResponse call
func ParseTasksRunCreateResp(rsp *http.Response) (*TasksRunCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksRunCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TasksView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTasksRetrieveResp parses an HTTP response from a TasksRetrieveWithResponse call
func ParseTasksRetrieveResp(rsp *http.Response) (*TasksRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TasksView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTokenCreateResp parses an HTTP response from a TokenCreateWithResponse call
func ParseTokenCreateResp(rsp *http.Response) (*TokenCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaperlessAuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrashListResp parses an HTTP response from a TrashListWithResponse call
func ParseTrashListResp(rsp *http.Response) (*TrashListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TrashListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTrashCreateResp parses an HTTP response from a TrashCreateWithResponse call
func ParseTrashCreateResp(rsp *http.Response) (*TrashCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TrashCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUiSettingsRetrieveResp parses an HTTP response from a UiSettingsRetrieveWithResponse call
func ParseUiSettingsRetrieveResp(rsp *http.Response) (*UiSettingsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UiSettingsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UiSettingsView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUiSettingsCreateResp parses an HTTP response from a UiSettingsCreateWithResponse call
func ParseUiSettingsCreateResp(rsp *http.Response) (*UiSettingsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UiSettingsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UiSettingsView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersListResp parses an HTTP response from a UsersListWithResponse call
func ParseUsersListResp(rsp *http.Response) (*UsersListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersCreateResp parses an HTTP response from a UsersCreateWithResponse call
func ParseUsersCreateResp(rsp *http.Response) (*UsersCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUsersDestroyResp parses an HTTP response from a UsersDestroyWithResponse call
func ParseUsersDestroyResp(rsp *http.Response) (*UsersDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUsersRetrieveResp parses an HTTP response from a UsersRetrieveWithResponse call
func ParseUsersRetrieveResp(rsp *http.Response) (*UsersRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersPartialUpdateResp parses an HTTP response from a UsersPartialUpdateWithResponse call
func ParseUsersPartialUpdateResp(rsp *http.Response) (*UsersPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersUpdateResp parses an HTTP response from a UsersUpdateWithResponse call
func ParseUsersUpdateResp(rsp *http.Response) (*UsersUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersDeactivateTotpCreateResp parses an HTTP response from a UsersDeactivateTotpCreateWithResponse call
func ParseUsersDeactivateTotpCreateResp(rsp *http.Response) (*UsersDeactivateTotpCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeactivateTotpCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkflowActionsListResp parses an HTTP response from a WorkflowActionsListWithResponse call
func ParseWorkflowActionsListResp(rsp *http.Response) (*WorkflowActionsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowActionsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWorkflowActionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowActionsCreateResp parses an HTTP response from a WorkflowActionsCreateWithResponse call
func ParseWorkflowActionsCreateResp(rsp *http.Response) (*WorkflowActionsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowActionsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseWorkflowActionsDestroyResp parses an HTTP response from a WorkflowActionsDestroyWithResponse call
func ParseWorkflowActionsDestroyResp(rsp *http.Response) (*WorkflowActionsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowActionsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWorkflowActionsRetrieveResp parses an HTTP response from a WorkflowActionsRetrieveWithResponse call
func ParseWorkflowActionsRetrieveResp(rsp *http.Response) (*WorkflowActionsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowActionsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowActionsPartialUpdateResp parses an HTTP response from a WorkflowActionsPartialUpdateWithResponse call
func ParseWorkflowActionsPartialUpdateResp(rsp *http.Response) (*WorkflowActionsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowActionsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowActionsUpdateResp parses an HTTP response from a WorkflowActionsUpdateWithResponse call
func ParseWorkflowActionsUpdateResp(rsp *http.Response) (*WorkflowActionsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowActionsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowTriggersListResp parses an HTTP response from a WorkflowTriggersListWithResponse call
func ParseWorkflowTriggersListResp(rsp *http.Response) (*WorkflowTriggersListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowTriggersListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWorkflowTriggerList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowTriggersCreateResp parses an HTTP response from a WorkflowTriggersCreateWithResponse call
func ParseWorkflowTriggersCreateResp(rsp *http.Response) (*WorkflowTriggersCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowTriggersCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkflowTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseWorkflowTriggersDestroyResp parses an HTTP response from a WorkflowTriggersDestroyWithResponse call
func ParseWorkflowTriggersDestroyResp(rsp *http.Response) (*WorkflowTriggersDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowTriggersDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWorkflowTriggersRetrieveResp parses an HTTP response from a WorkflowTriggersRetrieveWithResponse call
func ParseWorkflowTriggersRetrieveResp(rsp *http.Response) (*WorkflowTriggersRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowTriggersRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowTriggersPartialUpdateResp parses an HTTP response from a WorkflowTriggersPartialUpdateWithResponse call
func ParseWorkflowTriggersPartialUpdateResp(rsp *http.Response) (*WorkflowTriggersPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowTriggersPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowTriggersUpdateResp parses an HTTP response from a WorkflowTriggersUpdateWithResponse call
func ParseWorkflowTriggersUpdateResp(rsp *http.Response) (*WorkflowTriggersUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowTriggersUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsListResp parses an HTTP response from a WorkflowsListWithResponse call
func ParseWorkflowsListResp(rsp *http.Response) (*WorkflowsListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWorkflowList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsCreateResp parses an HTTP response from a WorkflowsCreateWithResponse call
func ParseWorkflowsCreateResp(rsp *http.Response) (*WorkflowsCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseWorkflowsDestroyResp parses an HTTP response from a WorkflowsDestroyWithResponse call
func ParseWorkflowsDestroyResp(rsp *http.Response) (*WorkflowsDestroyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsDestroyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWorkflowsRetrieveResp parses an HTTP response from a WorkflowsRetrieveWithResponse call
func ParseWorkflowsRetrieveResp(rsp *http.Response) (*WorkflowsRetrieveResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsRetrieveResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsPartialUpdateResp parses an HTTP response from a WorkflowsPartialUpdateWithResponse call
func ParseWorkflowsPartialUpdateResp(rsp *http.Response) (*WorkflowsPartialUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsPartialUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsUpdateResp parses an HTTP response from a WorkflowsUpdateWithResponse call
func ParseWorkflowsUpdateResp(rsp *http.Response) (*WorkflowsUpdateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsUpdateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
