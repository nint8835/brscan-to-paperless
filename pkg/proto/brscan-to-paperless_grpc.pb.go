// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: brscan-to-paperless.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrscanToPaperless_Trigger_FullMethodName = "/brscan_to_paperless.BrscanToPaperless/Trigger"
)

// BrscanToPaperlessClient is the client API for BrscanToPaperless service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrscanToPaperlessClient interface {
	// Trigger causes the brscan-to-paperless daemon to respond to an incoming event.
	Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type brscanToPaperlessClient struct {
	cc grpc.ClientConnInterface
}

func NewBrscanToPaperlessClient(cc grpc.ClientConnInterface) BrscanToPaperlessClient {
	return &brscanToPaperlessClient{cc}
}

func (c *brscanToPaperlessClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BrscanToPaperless_Trigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrscanToPaperlessServer is the server API for BrscanToPaperless service.
// All implementations must embed UnimplementedBrscanToPaperlessServer
// for forward compatibility.
type BrscanToPaperlessServer interface {
	// Trigger causes the brscan-to-paperless daemon to respond to an incoming event.
	Trigger(context.Context, *TriggerRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBrscanToPaperlessServer()
}

// UnimplementedBrscanToPaperlessServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrscanToPaperlessServer struct{}

func (UnimplementedBrscanToPaperlessServer) Trigger(context.Context, *TriggerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trigger not implemented")
}
func (UnimplementedBrscanToPaperlessServer) mustEmbedUnimplementedBrscanToPaperlessServer() {}
func (UnimplementedBrscanToPaperlessServer) testEmbeddedByValue()                           {}

// UnsafeBrscanToPaperlessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrscanToPaperlessServer will
// result in compilation errors.
type UnsafeBrscanToPaperlessServer interface {
	mustEmbedUnimplementedBrscanToPaperlessServer()
}

func RegisterBrscanToPaperlessServer(s grpc.ServiceRegistrar, srv BrscanToPaperlessServer) {
	// If the following call pancis, it indicates UnimplementedBrscanToPaperlessServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrscanToPaperless_ServiceDesc, srv)
}

func _BrscanToPaperless_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrscanToPaperlessServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrscanToPaperless_Trigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrscanToPaperlessServer).Trigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrscanToPaperless_ServiceDesc is the grpc.ServiceDesc for BrscanToPaperless service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrscanToPaperless_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brscan_to_paperless.BrscanToPaperless",
	HandlerType: (*BrscanToPaperlessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trigger",
			Handler:    _BrscanToPaperless_Trigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brscan-to-paperless.proto",
}
